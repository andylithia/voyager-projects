
HP12Cplus_Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .test         00000180  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009480  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .relocate     000004ac  20000000  00011480  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000039b0  200004ac  0001192c  000204ac  2**2
                  ALLOC
  4 .stack        00001004  20003e5c  000152dc  000204ac  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000204ac  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000204d6  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001b128  00000000  00000000  0002052f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000328c  00000000  00000000  0003b657  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00009404  00000000  00000000  0003e8e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001208  00000000  00000000  00047ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001140  00000000  00000000  00048eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00007bd3  00000000  00000000  0004a02f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000123a5  00000000  00000000  00051c02  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000ea046  00000000  00000000  00063fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004908  00000000  00000000  0014dff0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00008000 <__do_global_dtors_aux>:
    8000:	b510      	push	{r4, lr}
    8002:	4c05      	ldr	r4, [pc, #20]	; (8018 <__do_global_dtors_aux+0x18>)
    8004:	7823      	ldrb	r3, [r4, #0]
    8006:	b933      	cbnz	r3, 8016 <__do_global_dtors_aux+0x16>
    8008:	4b04      	ldr	r3, [pc, #16]	; (801c <__do_global_dtors_aux+0x1c>)
    800a:	b113      	cbz	r3, 8012 <__do_global_dtors_aux+0x12>
    800c:	4804      	ldr	r0, [pc, #16]	; (8020 <__do_global_dtors_aux+0x20>)
    800e:	f3af 8000 	nop.w
    8012:	2301      	movs	r3, #1
    8014:	7023      	strb	r3, [r4, #0]
    8016:	bd10      	pop	{r4, pc}
    8018:	200004ac 	.word	0x200004ac
    801c:	00000000 	.word	0x00000000
    8020:	00011480 	.word	0x00011480

00008024 <frame_dummy>:
    8024:	4b0c      	ldr	r3, [pc, #48]	; (8058 <frame_dummy+0x34>)
    8026:	b143      	cbz	r3, 803a <frame_dummy+0x16>
    8028:	480c      	ldr	r0, [pc, #48]	; (805c <frame_dummy+0x38>)
    802a:	490d      	ldr	r1, [pc, #52]	; (8060 <frame_dummy+0x3c>)
    802c:	b510      	push	{r4, lr}
    802e:	f3af 8000 	nop.w
    8032:	480c      	ldr	r0, [pc, #48]	; (8064 <frame_dummy+0x40>)
    8034:	6803      	ldr	r3, [r0, #0]
    8036:	b923      	cbnz	r3, 8042 <frame_dummy+0x1e>
    8038:	bd10      	pop	{r4, pc}
    803a:	480a      	ldr	r0, [pc, #40]	; (8064 <frame_dummy+0x40>)
    803c:	6803      	ldr	r3, [r0, #0]
    803e:	b933      	cbnz	r3, 804e <frame_dummy+0x2a>
    8040:	4770      	bx	lr
    8042:	4b09      	ldr	r3, [pc, #36]	; (8068 <frame_dummy+0x44>)
    8044:	2b00      	cmp	r3, #0
    8046:	d0f7      	beq.n	8038 <frame_dummy+0x14>
    8048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    804c:	4718      	bx	r3
    804e:	4b06      	ldr	r3, [pc, #24]	; (8068 <frame_dummy+0x44>)
    8050:	2b00      	cmp	r3, #0
    8052:	d0f5      	beq.n	8040 <frame_dummy+0x1c>
    8054:	4718      	bx	r3
    8056:	bf00      	nop
    8058:	00000000 	.word	0x00000000
    805c:	00011480 	.word	0x00011480
    8060:	200004b0 	.word	0x200004b0
    8064:	00004180 	.word	0x00004180
    8068:	00000000 	.word	0x00000000

0000806c <nut_read_rom>:

// Page Size 4096 Words

#include "vROM.h"

static bool nut_read_rom (rom_addr_t bank, rom_addr_t addr, rom_word_t* val) {
    806c:	b480      	push	{r7}
    806e:	b083      	sub	sp, #12
    8070:	af00      	add	r7, sp, #0
    8072:	4603      	mov	r3, r0
    8074:	603a      	str	r2, [r7, #0]
    8076:	80fb      	strh	r3, [r7, #6]
    8078:	460b      	mov	r3, r1
    807a:	80bb      	strh	r3, [r7, #4]
	// if(vROM[(bank<<12)|addr]){
		*val =   vROM[(((bank<<12)|addr)<<1)+1]<<8;
    807c:	88fb      	ldrh	r3, [r7, #6]
    807e:	031a      	lsls	r2, r3, #12
    8080:	88bb      	ldrh	r3, [r7, #4]
    8082:	4313      	orrs	r3, r2
    8084:	005b      	lsls	r3, r3, #1
    8086:	3301      	adds	r3, #1
    8088:	4a0d      	ldr	r2, [pc, #52]	; (80c0 <nut_read_rom+0x54>)
    808a:	5cd3      	ldrb	r3, [r2, r3]
    808c:	b29b      	uxth	r3, r3
    808e:	021b      	lsls	r3, r3, #8
    8090:	b29a      	uxth	r2, r3
    8092:	683b      	ldr	r3, [r7, #0]
    8094:	801a      	strh	r2, [r3, #0]
		*val |=  vROM[((bank<<12)|addr)<<1];
    8096:	683b      	ldr	r3, [r7, #0]
    8098:	881a      	ldrh	r2, [r3, #0]
    809a:	88fb      	ldrh	r3, [r7, #6]
    809c:	0319      	lsls	r1, r3, #12
    809e:	88bb      	ldrh	r3, [r7, #4]
    80a0:	430b      	orrs	r3, r1
    80a2:	005b      	lsls	r3, r3, #1
    80a4:	4906      	ldr	r1, [pc, #24]	; (80c0 <nut_read_rom+0x54>)
    80a6:	5ccb      	ldrb	r3, [r1, r3]
    80a8:	b29b      	uxth	r3, r3
    80aa:	4313      	orrs	r3, r2
    80ac:	b29a      	uxth	r2, r3
    80ae:	683b      	ldr	r3, [r7, #0]
    80b0:	801a      	strh	r2, [r3, #0]
	//	return true;
	//} else
	//return false;
	return true;
    80b2:	2301      	movs	r3, #1
}
    80b4:	4618      	mov	r0, r3
    80b6:	370c      	adds	r7, #12
    80b8:	46bd      	mov	sp, r7
    80ba:	bc80      	pop	{r7}
    80bc:	4770      	bx	lr
    80be:	bf00      	nop
    80c0:	0000b3f4 	.word	0x0000b3f4

000080c4 <nut_get_ucode>:

rom_word_t nut_get_ucode(rom_addr_t addr) {
    80c4:	b580      	push	{r7, lr}
    80c6:	b084      	sub	sp, #16
    80c8:	af00      	add	r7, sp, #0
    80ca:	4603      	mov	r3, r0
    80cc:	80fb      	strh	r3, [r7, #6]
	// Simplified for Voyager, the original impl. uses bank mapping
	// (akin to MMU), restore this for HP41
	// Use nut_read_rom
	rom_addr_t bank = nutr.active_bank;
    80ce:	4b08      	ldr	r3, [pc, #32]	; (80f0 <nut_get_ucode+0x2c>)
    80d0:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    80d4:	81fb      	strh	r3, [r7, #14]
	rom_addr_t rtn;
	nut_read_rom(bank, addr, &rtn);
    80d6:	f107 020c 	add.w	r2, r7, #12
    80da:	88f9      	ldrh	r1, [r7, #6]
    80dc:	89fb      	ldrh	r3, [r7, #14]
    80de:	4618      	mov	r0, r3
    80e0:	4b04      	ldr	r3, [pc, #16]	; (80f4 <nut_get_ucode+0x30>)
    80e2:	4798      	blx	r3
	return rtn;
    80e4:	89bb      	ldrh	r3, [r7, #12]
}
    80e6:	4618      	mov	r0, r3
    80e8:	3710      	adds	r7, #16
    80ea:	46bd      	mov	sp, r7
    80ec:	bd80      	pop	{r7, pc}
    80ee:	bf00      	nop
    80f0:	20000504 	.word	0x20000504
    80f4:	0000806d 	.word	0x0000806d

000080f8 <nut_reset>:
			break;
	}
	return true;
}

void nut_reset(){
    80f8:	b480      	push	{r7}
    80fa:	b083      	sub	sp, #12
    80fc:	af00      	add	r7, sp, #0
	int i;
	for(i=0;i<WSIZE;i++) {
    80fe:	2300      	movs	r3, #0
    8100:	607b      	str	r3, [r7, #4]
    8102:	e01f      	b.n	8144 <nut_reset+0x4c>
		nutr.a[i] = 0;
    8104:	4a2b      	ldr	r2, [pc, #172]	; (81b4 <nut_reset+0xbc>)
    8106:	687b      	ldr	r3, [r7, #4]
    8108:	4413      	add	r3, r2
    810a:	2200      	movs	r2, #0
    810c:	701a      	strb	r2, [r3, #0]
		nutr.b[i] = 0;
    810e:	4a29      	ldr	r2, [pc, #164]	; (81b4 <nut_reset+0xbc>)
    8110:	687b      	ldr	r3, [r7, #4]
    8112:	4413      	add	r3, r2
    8114:	330e      	adds	r3, #14
    8116:	2200      	movs	r2, #0
    8118:	701a      	strb	r2, [r3, #0]
		nutr.c[i] = 0;
    811a:	4a26      	ldr	r2, [pc, #152]	; (81b4 <nut_reset+0xbc>)
    811c:	687b      	ldr	r3, [r7, #4]
    811e:	4413      	add	r3, r2
    8120:	331c      	adds	r3, #28
    8122:	2200      	movs	r2, #0
    8124:	701a      	strb	r2, [r3, #0]
		nutr.m[i] = 0;
    8126:	4a23      	ldr	r2, [pc, #140]	; (81b4 <nut_reset+0xbc>)
    8128:	687b      	ldr	r3, [r7, #4]
    812a:	4413      	add	r3, r2
    812c:	332a      	adds	r3, #42	; 0x2a
    812e:	2200      	movs	r2, #0
    8130:	701a      	strb	r2, [r3, #0]
		nutr.n[i] = 0;
    8132:	4a20      	ldr	r2, [pc, #128]	; (81b4 <nut_reset+0xbc>)
    8134:	687b      	ldr	r3, [r7, #4]
    8136:	4413      	add	r3, r2
    8138:	3338      	adds	r3, #56	; 0x38
    813a:	2200      	movs	r2, #0
    813c:	701a      	strb	r2, [r3, #0]
	for(i=0;i<WSIZE;i++) {
    813e:	687b      	ldr	r3, [r7, #4]
    8140:	3301      	adds	r3, #1
    8142:	607b      	str	r3, [r7, #4]
    8144:	687b      	ldr	r3, [r7, #4]
    8146:	2b0d      	cmp	r3, #13
    8148:	dddc      	ble.n	8104 <nut_reset+0xc>
	}
	
	for(i=0;i<SSIZE;i++)
    814a:	2300      	movs	r3, #0
    814c:	607b      	str	r3, [r7, #4]
    814e:	e008      	b.n	8162 <nut_reset+0x6a>
		nutr.s[i] = 0;
    8150:	4a18      	ldr	r2, [pc, #96]	; (81b4 <nut_reset+0xbc>)
    8152:	687b      	ldr	r3, [r7, #4]
    8154:	4413      	add	r3, r2
    8156:	334f      	adds	r3, #79	; 0x4f
    8158:	2200      	movs	r2, #0
    815a:	701a      	strb	r2, [r3, #0]
	for(i=0;i<SSIZE;i++)
    815c:	687b      	ldr	r3, [r7, #4]
    815e:	3301      	adds	r3, #1
    8160:	607b      	str	r3, [r7, #4]
    8162:	687b      	ldr	r3, [r7, #4]
    8164:	2b0d      	cmp	r3, #13
    8166:	ddf3      	ble.n	8150 <nut_reset+0x58>
	nutr.p = 0;
    8168:	4b12      	ldr	r3, [pc, #72]	; (81b4 <nut_reset+0xbc>)
    816a:	2200      	movs	r2, #0
    816c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	nutr.q = 0;
    8170:	4b10      	ldr	r3, [pc, #64]	; (81b4 <nut_reset+0xbc>)
    8172:	2200      	movs	r2, #0
    8174:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	nutr.q_sel = false;
    8178:	4b0e      	ldr	r3, [pc, #56]	; (81b4 <nut_reset+0xbc>)
    817a:	2200      	movs	r2, #0
    817c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	
	nutr.active_bank = 0;
    8180:	4b0c      	ldr	r3, [pc, #48]	; (81b4 <nut_reset+0xbc>)
    8182:	2200      	movs	r2, #0
    8184:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	nutr.pc = 0;
    8188:	4b0a      	ldr	r3, [pc, #40]	; (81b4 <nut_reset+0xbc>)
    818a:	2200      	movs	r2, #0
    818c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	nutr.inst_state = norm;
    8190:	4b08      	ldr	r3, [pc, #32]	; (81b4 <nut_reset+0xbc>)
    8192:	2200      	movs	r2, #0
    8194:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	nutr.carry = 1;
    8198:	4b06      	ldr	r3, [pc, #24]	; (81b4 <nut_reset+0xbc>)
    819a:	2201      	movs	r2, #1
    819c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	nutr.awake = true;
    81a0:	4b04      	ldr	r3, [pc, #16]	; (81b4 <nut_reset+0xbc>)
    81a2:	2201      	movs	r2, #1
    81a4:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
}
    81a8:	bf00      	nop
    81aa:	370c      	adds	r7, #12
    81ac:	46bd      	mov	sp, r7
    81ae:	bc80      	pop	{r7}
    81b0:	4770      	bx	lr
    81b2:	bf00      	nop
    81b4:	20000504 	.word	0x20000504

000081b8 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    81b8:	b480      	push	{r7}
    81ba:	b083      	sub	sp, #12
    81bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    81be:	f3ef 8310 	mrs	r3, PRIMASK
    81c2:	607b      	str	r3, [r7, #4]
  return(result);
    81c4:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    81c6:	2b00      	cmp	r3, #0
    81c8:	bf0c      	ite	eq
    81ca:	2301      	moveq	r3, #1
    81cc:	2300      	movne	r3, #0
    81ce:	b2db      	uxtb	r3, r3
    81d0:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    81d2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    81d4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    81d8:	4b04      	ldr	r3, [pc, #16]	; (81ec <cpu_irq_save+0x34>)
    81da:	2200      	movs	r2, #0
    81dc:	701a      	strb	r2, [r3, #0]
	return flags;
    81de:	683b      	ldr	r3, [r7, #0]
}
    81e0:	4618      	mov	r0, r3
    81e2:	370c      	adds	r7, #12
    81e4:	46bd      	mov	sp, r7
    81e6:	bc80      	pop	{r7}
    81e8:	4770      	bx	lr
    81ea:	bf00      	nop
    81ec:	20000074 	.word	0x20000074

000081f0 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    81f0:	b480      	push	{r7}
    81f2:	b083      	sub	sp, #12
    81f4:	af00      	add	r7, sp, #0
    81f6:	6078      	str	r0, [r7, #4]
	return (flags);
    81f8:	687b      	ldr	r3, [r7, #4]
    81fa:	2b00      	cmp	r3, #0
    81fc:	bf14      	ite	ne
    81fe:	2301      	movne	r3, #1
    8200:	2300      	moveq	r3, #0
    8202:	b2db      	uxtb	r3, r3
}
    8204:	4618      	mov	r0, r3
    8206:	370c      	adds	r7, #12
    8208:	46bd      	mov	sp, r7
    820a:	bc80      	pop	{r7}
    820c:	4770      	bx	lr
	...

00008210 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    8210:	b580      	push	{r7, lr}
    8212:	b082      	sub	sp, #8
    8214:	af00      	add	r7, sp, #0
    8216:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    8218:	6878      	ldr	r0, [r7, #4]
    821a:	4b07      	ldr	r3, [pc, #28]	; (8238 <cpu_irq_restore+0x28>)
    821c:	4798      	blx	r3
    821e:	4603      	mov	r3, r0
    8220:	2b00      	cmp	r3, #0
    8222:	d005      	beq.n	8230 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    8224:	4b05      	ldr	r3, [pc, #20]	; (823c <cpu_irq_restore+0x2c>)
    8226:	2201      	movs	r2, #1
    8228:	701a      	strb	r2, [r3, #0]
    822a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    822e:	b662      	cpsie	i
}
    8230:	bf00      	nop
    8232:	3708      	adds	r7, #8
    8234:	46bd      	mov	sp, r7
    8236:	bd80      	pop	{r7, pc}
    8238:	000081f1 	.word	0x000081f1
    823c:	20000074 	.word	0x20000074

00008240 <osc_priv_enable_osc0>:
 */
#include <osc.h>

#ifdef BOARD_OSC0_HZ
void osc_priv_enable_osc0(void)
{
    8240:	b580      	push	{r7, lr}
    8242:	b082      	sub	sp, #8
    8244:	af00      	add	r7, sp, #0
	irqflags_t flags;

	flags = cpu_irq_save();
    8246:	4b08      	ldr	r3, [pc, #32]	; (8268 <osc_priv_enable_osc0+0x28>)
    8248:	4798      	blx	r3
    824a:	6078      	str	r0, [r7, #4]
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
    824c:	4b07      	ldr	r3, [pc, #28]	; (826c <osc_priv_enable_osc0+0x2c>)
    824e:	4a08      	ldr	r2, [pc, #32]	; (8270 <osc_priv_enable_osc0+0x30>)
    8250:	619a      	str	r2, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_OSCCTRL0 - (uint32_t)SCIF);
	SCIF->SCIF_OSCCTRL0 =
    8252:	4b06      	ldr	r3, [pc, #24]	; (826c <osc_priv_enable_osc0+0x2c>)
    8254:	4a07      	ldr	r2, [pc, #28]	; (8274 <osc_priv_enable_osc0+0x34>)
    8256:	621a      	str	r2, [r3, #32]
# if BOARD_OSC0_IS_XTAL == true
			| OSC0_GAIN_VALUE
#endif
			| OSC0_MODE_VALUE
			| SCIF_OSCCTRL0_OSCEN;
	cpu_irq_restore(flags);
    8258:	6878      	ldr	r0, [r7, #4]
    825a:	4b07      	ldr	r3, [pc, #28]	; (8278 <osc_priv_enable_osc0+0x38>)
    825c:	4798      	blx	r3
}
    825e:	bf00      	nop
    8260:	3708      	adds	r7, #8
    8262:	46bd      	mov	sp, r7
    8264:	bd80      	pop	{r7, pc}
    8266:	bf00      	nop
    8268:	000081b9 	.word	0x000081b9
    826c:	400e0800 	.word	0x400e0800
    8270:	aa000020 	.word	0xaa000020
    8274:	00010207 	.word	0x00010207
    8278:	00008211 	.word	0x00008211

0000827c <osc_priv_enable_osc32>:
}
#endif /* BOARD_OSC0_HZ */

#ifdef BOARD_OSC32_HZ
void osc_priv_enable_osc32(void)
{
    827c:	b580      	push	{r7, lr}
    827e:	b082      	sub	sp, #8
    8280:	af00      	add	r7, sp, #0
	irqflags_t flags;

	flags = cpu_irq_save();
    8282:	4b08      	ldr	r3, [pc, #32]	; (82a4 <osc_priv_enable_osc32+0x28>)
    8284:	4798      	blx	r3
    8286:	6078      	str	r0, [r7, #4]
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
    8288:	4b07      	ldr	r3, [pc, #28]	; (82a8 <osc_priv_enable_osc32+0x2c>)
    828a:	4a08      	ldr	r2, [pc, #32]	; (82ac <osc_priv_enable_osc32+0x30>)
    828c:	619a      	str	r2, [r3, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_OSCCTRL32 - (uint32_t)BSCIF);
	BSCIF->BSCIF_OSCCTRL32 =
    828e:	4b06      	ldr	r3, [pc, #24]	; (82a8 <osc_priv_enable_osc32+0x2c>)
    8290:	4a07      	ldr	r2, [pc, #28]	; (82b0 <osc_priv_enable_osc32+0x34>)
    8292:	621a      	str	r2, [r3, #32]
			| BOARD_OSC32_SELCURR
			| OSC32_MODE_VALUE
			| BSCIF_OSCCTRL32_EN1K
			| BSCIF_OSCCTRL32_EN32K
			| BSCIF_OSCCTRL32_OSC32EN;
	cpu_irq_restore(flags);
    8294:	6878      	ldr	r0, [r7, #4]
    8296:	4b07      	ldr	r3, [pc, #28]	; (82b4 <osc_priv_enable_osc32+0x38>)
    8298:	4798      	blx	r3
}
    829a:	bf00      	nop
    829c:	3708      	adds	r7, #8
    829e:	46bd      	mov	sp, r7
    82a0:	bd80      	pop	{r7, pc}
    82a2:	bf00      	nop
    82a4:	000081b9 	.word	0x000081b9
    82a8:	400f0400 	.word	0x400f0400
    82ac:	aa000020 	.word	0xaa000020
    82b0:	0005a10d 	.word	0x0005a10d
    82b4:	00008211 	.word	0x00008211

000082b8 <osc_priv_enable_rc32k>:
	cpu_irq_restore(flags);
}
#endif /* BOARD_OSC32_HZ */

void osc_priv_enable_rc32k(void)
{
    82b8:	b580      	push	{r7, lr}
    82ba:	b082      	sub	sp, #8
    82bc:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint32_t temp;

	flags = cpu_irq_save();
    82be:	4b0a      	ldr	r3, [pc, #40]	; (82e8 <osc_priv_enable_rc32k+0x30>)
    82c0:	4798      	blx	r3
    82c2:	6078      	str	r0, [r7, #4]
	temp = BSCIF->BSCIF_RC32KCR;
    82c4:	4b09      	ldr	r3, [pc, #36]	; (82ec <osc_priv_enable_rc32k+0x34>)
    82c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    82c8:	603b      	str	r3, [r7, #0]
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
    82ca:	4b08      	ldr	r3, [pc, #32]	; (82ec <osc_priv_enable_rc32k+0x34>)
    82cc:	4a08      	ldr	r2, [pc, #32]	; (82f0 <osc_priv_enable_rc32k+0x38>)
    82ce:	619a      	str	r2, [r3, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_RC32KCR - (uint32_t)BSCIF);
	BSCIF->BSCIF_RC32KCR = temp | BSCIF_RC32KCR_EN32K | BSCIF_RC32KCR_EN;
    82d0:	4a06      	ldr	r2, [pc, #24]	; (82ec <osc_priv_enable_rc32k+0x34>)
    82d2:	683b      	ldr	r3, [r7, #0]
    82d4:	f043 0305 	orr.w	r3, r3, #5
    82d8:	6253      	str	r3, [r2, #36]	; 0x24
	cpu_irq_restore(flags);
    82da:	6878      	ldr	r0, [r7, #4]
    82dc:	4b05      	ldr	r3, [pc, #20]	; (82f4 <osc_priv_enable_rc32k+0x3c>)
    82de:	4798      	blx	r3
}
    82e0:	bf00      	nop
    82e2:	3708      	adds	r7, #8
    82e4:	46bd      	mov	sp, r7
    82e6:	bd80      	pop	{r7, pc}
    82e8:	000081b9 	.word	0x000081b9
    82ec:	400f0400 	.word	0x400f0400
    82f0:	aa000024 	.word	0xaa000024
    82f4:	00008211 	.word	0x00008211

000082f8 <osc_priv_enable_rc1m>:
	BSCIF->BSCIF_RC32KCR = temp;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rc1m(void)
{
    82f8:	b580      	push	{r7, lr}
    82fa:	b082      	sub	sp, #8
    82fc:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint32_t temp;

	flags = cpu_irq_save();
    82fe:	4b0a      	ldr	r3, [pc, #40]	; (8328 <osc_priv_enable_rc1m+0x30>)
    8300:	4798      	blx	r3
    8302:	6078      	str	r0, [r7, #4]
	temp = BSCIF->BSCIF_RC1MCR;
    8304:	4b09      	ldr	r3, [pc, #36]	; (832c <osc_priv_enable_rc1m+0x34>)
    8306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    8308:	603b      	str	r3, [r7, #0]
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
    830a:	4b08      	ldr	r3, [pc, #32]	; (832c <osc_priv_enable_rc1m+0x34>)
    830c:	4a08      	ldr	r2, [pc, #32]	; (8330 <osc_priv_enable_rc1m+0x38>)
    830e:	619a      	str	r2, [r3, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_RC1MCR - (uint32_t)BSCIF);
	BSCIF->BSCIF_RC1MCR = temp | BSCIF_RC1MCR_CLKOE;
    8310:	4a06      	ldr	r2, [pc, #24]	; (832c <osc_priv_enable_rc1m+0x34>)
    8312:	683b      	ldr	r3, [r7, #0]
    8314:	f043 0301 	orr.w	r3, r3, #1
    8318:	6593      	str	r3, [r2, #88]	; 0x58
	cpu_irq_restore(flags);
    831a:	6878      	ldr	r0, [r7, #4]
    831c:	4b05      	ldr	r3, [pc, #20]	; (8334 <osc_priv_enable_rc1m+0x3c>)
    831e:	4798      	blx	r3
}
    8320:	bf00      	nop
    8322:	3708      	adds	r7, #8
    8324:	46bd      	mov	sp, r7
    8326:	bd80      	pop	{r7, pc}
    8328:	000081b9 	.word	0x000081b9
    832c:	400f0400 	.word	0x400f0400
    8330:	aa000058 	.word	0xaa000058
    8334:	00008211 	.word	0x00008211

00008338 <osc_priv_enable_rc80m>:
	BSCIF->BSCIF_RC1MCR = temp;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rc80m(void)
{
    8338:	b580      	push	{r7, lr}
    833a:	b082      	sub	sp, #8
    833c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint32_t temp;

	flags = cpu_irq_save();
    833e:	4b0a      	ldr	r3, [pc, #40]	; (8368 <osc_priv_enable_rc80m+0x30>)
    8340:	4798      	blx	r3
    8342:	6078      	str	r0, [r7, #4]
	temp = SCIF->SCIF_RC80MCR;
    8344:	4b09      	ldr	r3, [pc, #36]	; (836c <osc_priv_enable_rc80m+0x34>)
    8346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8348:	603b      	str	r3, [r7, #0]
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
    834a:	4b08      	ldr	r3, [pc, #32]	; (836c <osc_priv_enable_rc80m+0x34>)
    834c:	4a08      	ldr	r2, [pc, #32]	; (8370 <osc_priv_enable_rc80m+0x38>)
    834e:	619a      	str	r2, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_RC80MCR - (uint32_t)SCIF);
	SCIF->SCIF_RC80MCR = temp | SCIF_RC80MCR_EN;
    8350:	4a06      	ldr	r2, [pc, #24]	; (836c <osc_priv_enable_rc80m+0x34>)
    8352:	683b      	ldr	r3, [r7, #0]
    8354:	f043 0301 	orr.w	r3, r3, #1
    8358:	6513      	str	r3, [r2, #80]	; 0x50
	cpu_irq_restore(flags);
    835a:	6878      	ldr	r0, [r7, #4]
    835c:	4b05      	ldr	r3, [pc, #20]	; (8374 <osc_priv_enable_rc80m+0x3c>)
    835e:	4798      	blx	r3
}
    8360:	bf00      	nop
    8362:	3708      	adds	r7, #8
    8364:	46bd      	mov	sp, r7
    8366:	bd80      	pop	{r7, pc}
    8368:	000081b9 	.word	0x000081b9
    836c:	400e0800 	.word	0x400e0800
    8370:	aa000050 	.word	0xaa000050
    8374:	00008211 	.word	0x00008211

00008378 <osc_priv_enable_rcfast>:
	SCIF->SCIF_RC80MCR = temp;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rcfast(void)
{
    8378:	b580      	push	{r7, lr}
    837a:	b082      	sub	sp, #8
    837c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint32_t temp;

	flags = cpu_irq_save();
    837e:	4b0d      	ldr	r3, [pc, #52]	; (83b4 <osc_priv_enable_rcfast+0x3c>)
    8380:	4798      	blx	r3
    8382:	6078      	str	r0, [r7, #4]
	// Let FCD and calibration value by default
	temp = SCIF->SCIF_RCFASTCFG;
    8384:	4b0c      	ldr	r3, [pc, #48]	; (83b8 <osc_priv_enable_rcfast+0x40>)
    8386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8388:	603b      	str	r3, [r7, #0]
	// Clear previous FRANGE value
	temp &= ~SCIF_RCFASTCFG_FRANGE_Msk;
    838a:	683b      	ldr	r3, [r7, #0]
    838c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    8390:	603b      	str	r3, [r7, #0]

	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
    8392:	4b09      	ldr	r3, [pc, #36]	; (83b8 <osc_priv_enable_rcfast+0x40>)
    8394:	4a09      	ldr	r2, [pc, #36]	; (83bc <osc_priv_enable_rcfast+0x44>)
    8396:	619a      	str	r2, [r3, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_RCFASTCFG - (uint32_t)SCIF);
	SCIF->SCIF_RCFASTCFG = temp | SCIF_RCFASTCFG_EN
    8398:	4a07      	ldr	r2, [pc, #28]	; (83b8 <osc_priv_enable_rcfast+0x40>)
		| SCIF_RCFASTCFG_FRANGE(CONFIG_RCFAST_FRANGE);
    839a:	683b      	ldr	r3, [r7, #0]
    839c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    83a0:	f043 0301 	orr.w	r3, r3, #1
	SCIF->SCIF_RCFASTCFG = temp | SCIF_RCFASTCFG_EN
    83a4:	6493      	str	r3, [r2, #72]	; 0x48
	cpu_irq_restore(flags);
    83a6:	6878      	ldr	r0, [r7, #4]
    83a8:	4b05      	ldr	r3, [pc, #20]	; (83c0 <osc_priv_enable_rcfast+0x48>)
    83aa:	4798      	blx	r3
}
    83ac:	bf00      	nop
    83ae:	3708      	adds	r7, #8
    83b0:	46bd      	mov	sp, r7
    83b2:	bd80      	pop	{r7, pc}
    83b4:	000081b9 	.word	0x000081b9
    83b8:	400e0800 	.word	0x400e0800
    83bc:	aa000048 	.word	0xaa000048
    83c0:	00008211 	.word	0x00008211

000083c4 <cpu_irq_save>:
{
    83c4:	b480      	push	{r7}
    83c6:	b083      	sub	sp, #12
    83c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    83ca:	f3ef 8310 	mrs	r3, PRIMASK
    83ce:	607b      	str	r3, [r7, #4]
  return(result);
    83d0:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    83d2:	2b00      	cmp	r3, #0
    83d4:	bf0c      	ite	eq
    83d6:	2301      	moveq	r3, #1
    83d8:	2300      	movne	r3, #0
    83da:	b2db      	uxtb	r3, r3
    83dc:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    83de:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    83e0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    83e4:	4b04      	ldr	r3, [pc, #16]	; (83f8 <cpu_irq_save+0x34>)
    83e6:	2200      	movs	r2, #0
    83e8:	701a      	strb	r2, [r3, #0]
	return flags;
    83ea:	683b      	ldr	r3, [r7, #0]
}
    83ec:	4618      	mov	r0, r3
    83ee:	370c      	adds	r7, #12
    83f0:	46bd      	mov	sp, r7
    83f2:	bc80      	pop	{r7}
    83f4:	4770      	bx	lr
    83f6:	bf00      	nop
    83f8:	20000074 	.word	0x20000074

000083fc <cpu_irq_is_enabled_flags>:
{
    83fc:	b480      	push	{r7}
    83fe:	b083      	sub	sp, #12
    8400:	af00      	add	r7, sp, #0
    8402:	6078      	str	r0, [r7, #4]
	return (flags);
    8404:	687b      	ldr	r3, [r7, #4]
    8406:	2b00      	cmp	r3, #0
    8408:	bf14      	ite	ne
    840a:	2301      	movne	r3, #1
    840c:	2300      	moveq	r3, #0
    840e:	b2db      	uxtb	r3, r3
}
    8410:	4618      	mov	r0, r3
    8412:	370c      	adds	r7, #12
    8414:	46bd      	mov	sp, r7
    8416:	bc80      	pop	{r7}
    8418:	4770      	bx	lr
	...

0000841c <cpu_irq_restore>:
{
    841c:	b580      	push	{r7, lr}
    841e:	b082      	sub	sp, #8
    8420:	af00      	add	r7, sp, #0
    8422:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    8424:	6878      	ldr	r0, [r7, #4]
    8426:	4b07      	ldr	r3, [pc, #28]	; (8444 <cpu_irq_restore+0x28>)
    8428:	4798      	blx	r3
    842a:	4603      	mov	r3, r0
    842c:	2b00      	cmp	r3, #0
    842e:	d005      	beq.n	843c <cpu_irq_restore+0x20>
		cpu_irq_enable();
    8430:	4b05      	ldr	r3, [pc, #20]	; (8448 <cpu_irq_restore+0x2c>)
    8432:	2201      	movs	r2, #1
    8434:	701a      	strb	r2, [r3, #0]
    8436:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    843a:	b662      	cpsie	i
}
    843c:	bf00      	nop
    843e:	3708      	adds	r7, #8
    8440:	46bd      	mov	sp, r7
    8442:	bd80      	pop	{r7, pc}
    8444:	000083fd 	.word	0x000083fd
    8448:	20000074 	.word	0x20000074

0000844c <osc_enable>:
extern void osc_priv_disable_rcfast(void);
extern void osc_priv_enable_rc1m(void);
extern void osc_priv_disable_rc1m(void);

static inline void osc_enable(uint8_t id)
{
    844c:	b580      	push	{r7, lr}
    844e:	b082      	sub	sp, #8
    8450:	af00      	add	r7, sp, #0
    8452:	4603      	mov	r3, r0
    8454:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    8456:	79fb      	ldrb	r3, [r7, #7]
    8458:	2b06      	cmp	r3, #6
    845a:	d823      	bhi.n	84a4 <osc_enable+0x58>
    845c:	a201      	add	r2, pc, #4	; (adr r2, 8464 <osc_enable+0x18>)
    845e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8462:	bf00      	nop
    8464:	00008481 	.word	0x00008481
    8468:	00008487 	.word	0x00008487
    846c:	0000848d 	.word	0x0000848d
    8470:	00008493 	.word	0x00008493
    8474:	00008499 	.word	0x00008499
    8478:	0000849f 	.word	0x0000849f
    847c:	000084a5 	.word	0x000084a5
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
    8480:	4b0b      	ldr	r3, [pc, #44]	; (84b0 <osc_enable+0x64>)
    8482:	4798      	blx	r3
		break;
    8484:	e00f      	b.n	84a6 <osc_enable+0x5a>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
    8486:	4b0b      	ldr	r3, [pc, #44]	; (84b4 <osc_enable+0x68>)
    8488:	4798      	blx	r3
		break;
    848a:	e00c      	b.n	84a6 <osc_enable+0x5a>
#endif

	case OSC_ID_RC32K:
		osc_priv_enable_rc32k();
    848c:	4b0a      	ldr	r3, [pc, #40]	; (84b8 <osc_enable+0x6c>)
    848e:	4798      	blx	r3
		break;
    8490:	e009      	b.n	84a6 <osc_enable+0x5a>

	case OSC_ID_RC80M:
		osc_priv_enable_rc80m();
    8492:	4b0a      	ldr	r3, [pc, #40]	; (84bc <osc_enable+0x70>)
    8494:	4798      	blx	r3
		break;
    8496:	e006      	b.n	84a6 <osc_enable+0x5a>

	case OSC_ID_RCFAST:
		osc_priv_enable_rcfast();
    8498:	4b09      	ldr	r3, [pc, #36]	; (84c0 <osc_enable+0x74>)
    849a:	4798      	blx	r3
		break;
    849c:	e003      	b.n	84a6 <osc_enable+0x5a>

	case OSC_ID_RC1M:
		osc_priv_enable_rc1m();
    849e:	4b09      	ldr	r3, [pc, #36]	; (84c4 <osc_enable+0x78>)
    84a0:	4798      	blx	r3
		break;
    84a2:	e000      	b.n	84a6 <osc_enable+0x5a>
		/* RCSYS is always running */
		break;

	default:
		/* unhandled_case(id); */
		break;
    84a4:	bf00      	nop
	}
}
    84a6:	bf00      	nop
    84a8:	3708      	adds	r7, #8
    84aa:	46bd      	mov	sp, r7
    84ac:	bd80      	pop	{r7, pc}
    84ae:	bf00      	nop
    84b0:	00008241 	.word	0x00008241
    84b4:	0000827d 	.word	0x0000827d
    84b8:	000082b9 	.word	0x000082b9
    84bc:	00008339 	.word	0x00008339
    84c0:	00008379 	.word	0x00008379
    84c4:	000082f9 	.word	0x000082f9

000084c8 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
    84c8:	b480      	push	{r7}
    84ca:	b083      	sub	sp, #12
    84cc:	af00      	add	r7, sp, #0
    84ce:	4603      	mov	r3, r0
    84d0:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    84d2:	79fb      	ldrb	r3, [r7, #7]
    84d4:	2b06      	cmp	r3, #6
    84d6:	d84f      	bhi.n	8578 <osc_is_ready+0xb0>
    84d8:	a201      	add	r2, pc, #4	; (adr r2, 84e0 <osc_is_ready+0x18>)
    84da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    84de:	bf00      	nop
    84e0:	000084fd 	.word	0x000084fd
    84e4:	00008511 	.word	0x00008511
    84e8:	00008525 	.word	0x00008525
    84ec:	00008539 	.word	0x00008539
    84f0:	0000854d 	.word	0x0000854d
    84f4:	00008561 	.word	0x00008561
    84f8:	00008575 	.word	0x00008575
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
    84fc:	4b21      	ldr	r3, [pc, #132]	; (8584 <osc_is_ready+0xbc>)
    84fe:	695b      	ldr	r3, [r3, #20]
    8500:	f003 0301 	and.w	r3, r3, #1
    8504:	2b00      	cmp	r3, #0
    8506:	bf14      	ite	ne
    8508:	2301      	movne	r3, #1
    850a:	2300      	moveq	r3, #0
    850c:	b2db      	uxtb	r3, r3
    850e:	e034      	b.n	857a <osc_is_ready+0xb2>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    8510:	4b1d      	ldr	r3, [pc, #116]	; (8588 <osc_is_ready+0xc0>)
    8512:	695b      	ldr	r3, [r3, #20]
    8514:	f003 0301 	and.w	r3, r3, #1
    8518:	2b00      	cmp	r3, #0
    851a:	bf14      	ite	ne
    851c:	2301      	movne	r3, #1
    851e:	2300      	moveq	r3, #0
    8520:	b2db      	uxtb	r3, r3
    8522:	e02a      	b.n	857a <osc_is_ready+0xb2>
#endif

	case OSC_ID_RC32K:
		return !!(BSCIF->BSCIF_RC32KCR & (BSCIF_RC32KCR_EN));
    8524:	4b18      	ldr	r3, [pc, #96]	; (8588 <osc_is_ready+0xc0>)
    8526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8528:	f003 0301 	and.w	r3, r3, #1
    852c:	2b00      	cmp	r3, #0
    852e:	bf14      	ite	ne
    8530:	2301      	movne	r3, #1
    8532:	2300      	moveq	r3, #0
    8534:	b2db      	uxtb	r3, r3
    8536:	e020      	b.n	857a <osc_is_ready+0xb2>

	case OSC_ID_RC80M:
		return !!(SCIF->SCIF_RC80MCR & (SCIF_RC80MCR_EN));
    8538:	4b12      	ldr	r3, [pc, #72]	; (8584 <osc_is_ready+0xbc>)
    853a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    853c:	f003 0301 	and.w	r3, r3, #1
    8540:	2b00      	cmp	r3, #0
    8542:	bf14      	ite	ne
    8544:	2301      	movne	r3, #1
    8546:	2300      	moveq	r3, #0
    8548:	b2db      	uxtb	r3, r3
    854a:	e016      	b.n	857a <osc_is_ready+0xb2>

	case OSC_ID_RCFAST:
		return !!(SCIF->SCIF_RCFASTCFG & (SCIF_RCFASTCFG_EN));
    854c:	4b0d      	ldr	r3, [pc, #52]	; (8584 <osc_is_ready+0xbc>)
    854e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8550:	f003 0301 	and.w	r3, r3, #1
    8554:	2b00      	cmp	r3, #0
    8556:	bf14      	ite	ne
    8558:	2301      	movne	r3, #1
    855a:	2300      	moveq	r3, #0
    855c:	b2db      	uxtb	r3, r3
    855e:	e00c      	b.n	857a <osc_is_ready+0xb2>

	case OSC_ID_RC1M:
		return !!(BSCIF->BSCIF_RC1MCR & (BSCIF_RC1MCR_CLKOE));
    8560:	4b09      	ldr	r3, [pc, #36]	; (8588 <osc_is_ready+0xc0>)
    8562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    8564:	f003 0301 	and.w	r3, r3, #1
    8568:	2b00      	cmp	r3, #0
    856a:	bf14      	ite	ne
    856c:	2301      	movne	r3, #1
    856e:	2300      	moveq	r3, #0
    8570:	b2db      	uxtb	r3, r3
    8572:	e002      	b.n	857a <osc_is_ready+0xb2>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
    8574:	2301      	movs	r3, #1
    8576:	e000      	b.n	857a <osc_is_ready+0xb2>

	default:
		/* unhandled_case(id); */
		return false;
    8578:	2300      	movs	r3, #0
	}
}
    857a:	4618      	mov	r0, r3
    857c:	370c      	adds	r7, #12
    857e:	46bd      	mov	sp, r7
    8580:	bc80      	pop	{r7}
    8582:	4770      	bx	lr
    8584:	400e0800 	.word	0x400e0800
    8588:	400f0400 	.word	0x400f0400

0000858c <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
    858c:	b580      	push	{r7, lr}
    858e:	b082      	sub	sp, #8
    8590:	af00      	add	r7, sp, #0
    8592:	4603      	mov	r3, r0
    8594:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
    8596:	bf00      	nop
    8598:	79fb      	ldrb	r3, [r7, #7]
    859a:	4618      	mov	r0, r3
    859c:	4b05      	ldr	r3, [pc, #20]	; (85b4 <osc_wait_ready+0x28>)
    859e:	4798      	blx	r3
    85a0:	4603      	mov	r3, r0
    85a2:	f083 0301 	eor.w	r3, r3, #1
    85a6:	b2db      	uxtb	r3, r3
    85a8:	2b00      	cmp	r3, #0
    85aa:	d1f5      	bne.n	8598 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
    85ac:	bf00      	nop
    85ae:	3708      	adds	r7, #8
    85b0:	46bd      	mov	sp, r7
    85b2:	bd80      	pop	{r7, pc}
    85b4:	000084c9 	.word	0x000084c9

000085b8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
    85b8:	b480      	push	{r7}
    85ba:	af00      	add	r7, sp, #0
		return OSC_RC80M_NOMINAL_HZ;
	}

	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_RCFAST) {
		if (CONFIG_RCFAST_FRANGE == 2) {
			return OSC_RCFAST12M_NOMINAL_HZ;
    85bc:	4b02      	ldr	r3, [pc, #8]	; (85c8 <sysclk_get_main_hz+0x10>)

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
    85be:	4618      	mov	r0, r3
    85c0:	46bd      	mov	sp, r7
    85c2:	bc80      	pop	{r7}
    85c4:	4770      	bx	lr
    85c6:	bf00      	nop
    85c8:	00b71b00 	.word	0x00b71b00

000085cc <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
    85cc:	b580      	push	{r7, lr}
    85ce:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
    85d0:	4b02      	ldr	r3, [pc, #8]	; (85dc <sysclk_get_cpu_hz+0x10>)
    85d2:	4798      	blx	r3
    85d4:	4603      	mov	r3, r0
}
    85d6:	4618      	mov	r0, r3
    85d8:	bd80      	pop	{r7, pc}
    85da:	bf00      	nop
    85dc:	000085b9 	.word	0x000085b9

000085e0 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
    85e0:	b580      	push	{r7, lr}
    85e2:	b082      	sub	sp, #8
    85e4:	af00      	add	r7, sp, #0
    85e6:	6078      	str	r0, [r7, #4]
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    85e8:	6879      	ldr	r1, [r7, #4]
    85ea:	2001      	movs	r0, #1
    85ec:	4b02      	ldr	r3, [pc, #8]	; (85f8 <sysclk_enable_hsb_module+0x18>)
    85ee:	4798      	blx	r3
}
    85f0:	bf00      	nop
    85f2:	3708      	adds	r7, #8
    85f4:	46bd      	mov	sp, r7
    85f6:	bd80      	pop	{r7, pc}
    85f8:	000086f5 	.word	0x000086f5

000085fc <sysclk_disable_hsb_module>:
/**
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
    85fc:	b580      	push	{r7, lr}
    85fe:	b082      	sub	sp, #8
    8600:	af00      	add	r7, sp, #0
    8602:	6078      	str	r0, [r7, #4]
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    8604:	6879      	ldr	r1, [r7, #4]
    8606:	2001      	movs	r0, #1
    8608:	4b02      	ldr	r3, [pc, #8]	; (8614 <sysclk_disable_hsb_module+0x18>)
    860a:	4798      	blx	r3
}
    860c:	bf00      	nop
    860e:	3708      	adds	r7, #8
    8610:	46bd      	mov	sp, r7
    8612:	bd80      	pop	{r7, pc}
    8614:	0000875d 	.word	0x0000875d

00008618 <sysclk_enable_pbc_module>:
/**
 * \brief Enable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbc_module(uint32_t module_index)
{
    8618:	b580      	push	{r7, lr}
    861a:	b082      	sub	sp, #8
    861c:	af00      	add	r7, sp, #0
    861e:	6078      	str	r0, [r7, #4]
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
    8620:	6879      	ldr	r1, [r7, #4]
    8622:	2004      	movs	r0, #4
    8624:	4b02      	ldr	r3, [pc, #8]	; (8630 <sysclk_enable_pbc_module+0x18>)
    8626:	4798      	blx	r3
}
    8628:	bf00      	nop
    862a:	3708      	adds	r7, #8
    862c:	46bd      	mov	sp, r7
    862e:	bd80      	pop	{r7, pc}
    8630:	000086f5 	.word	0x000086f5

00008634 <sysclk_disable_pbc_module>:
/**
 * \brief Disable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbc_module(uint32_t module_index)
{
    8634:	b580      	push	{r7, lr}
    8636:	b082      	sub	sp, #8
    8638:	af00      	add	r7, sp, #0
    863a:	6078      	str	r0, [r7, #4]
	sysclk_priv_disable_module(PM_CLK_GRP_PBC, module_index);
    863c:	6879      	ldr	r1, [r7, #4]
    863e:	2004      	movs	r0, #4
    8640:	4b02      	ldr	r3, [pc, #8]	; (864c <sysclk_disable_pbc_module+0x18>)
    8642:	4798      	blx	r3
}
    8644:	bf00      	nop
    8646:	3708      	adds	r7, #8
    8648:	46bd      	mov	sp, r7
    864a:	bd80      	pop	{r7, pc}
    864c:	0000875d 	.word	0x0000875d

00008650 <sysclk_enable_pbd_module>:
/**
 * \brief Enable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbd_module(uint32_t module_index)
{
    8650:	b580      	push	{r7, lr}
    8652:	b082      	sub	sp, #8
    8654:	af00      	add	r7, sp, #0
    8656:	6078      	str	r0, [r7, #4]
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
    8658:	6879      	ldr	r1, [r7, #4]
    865a:	2005      	movs	r0, #5
    865c:	4b02      	ldr	r3, [pc, #8]	; (8668 <sysclk_enable_pbd_module+0x18>)
    865e:	4798      	blx	r3
}
    8660:	bf00      	nop
    8662:	3708      	adds	r7, #8
    8664:	46bd      	mov	sp, r7
    8666:	bd80      	pop	{r7, pc}
    8668:	000086f5 	.word	0x000086f5

0000866c <sysclk_disable_pbd_module>:
/**
 * \brief Disable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbd_module(uint32_t module_index)
{
    866c:	b580      	push	{r7, lr}
    866e:	b082      	sub	sp, #8
    8670:	af00      	add	r7, sp, #0
    8672:	6078      	str	r0, [r7, #4]
	sysclk_priv_disable_module(PM_CLK_GRP_PBD, module_index);
    8674:	6879      	ldr	r1, [r7, #4]
    8676:	2005      	movs	r0, #5
    8678:	4b02      	ldr	r3, [pc, #8]	; (8684 <sysclk_disable_pbd_module+0x18>)
    867a:	4798      	blx	r3
}
    867c:	bf00      	nop
    867e:	3708      	adds	r7, #8
    8680:	46bd      	mov	sp, r7
    8682:	bd80      	pop	{r7, pc}
    8684:	0000875d 	.word	0x0000875d

00008688 <sysclk_enable_pba_divmask>:
/**
 * \brief Enable divided clock mask derived from the PBA clock
 * \param mask mask of the divided clock in the PBADIVMASK register
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
    8688:	b480      	push	{r7}
    868a:	b085      	sub	sp, #20
    868c:	af00      	add	r7, sp, #0
    868e:	6078      	str	r0, [r7, #4]
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    8690:	4b08      	ldr	r3, [pc, #32]	; (86b4 <sysclk_enable_pba_divmask+0x2c>)
    8692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8694:	60fb      	str	r3, [r7, #12]
	temp_mask |= mask;
    8696:	68fa      	ldr	r2, [r7, #12]
    8698:	687b      	ldr	r3, [r7, #4]
    869a:	4313      	orrs	r3, r2
    869c:	60fb      	str	r3, [r7, #12]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    869e:	4b05      	ldr	r3, [pc, #20]	; (86b4 <sysclk_enable_pba_divmask+0x2c>)
    86a0:	4a05      	ldr	r2, [pc, #20]	; (86b8 <sysclk_enable_pba_divmask+0x30>)
    86a2:	659a      	str	r2, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    86a4:	4a03      	ldr	r2, [pc, #12]	; (86b4 <sysclk_enable_pba_divmask+0x2c>)
    86a6:	68fb      	ldr	r3, [r7, #12]
    86a8:	6413      	str	r3, [r2, #64]	; 0x40
}
    86aa:	bf00      	nop
    86ac:	3714      	adds	r7, #20
    86ae:	46bd      	mov	sp, r7
    86b0:	bc80      	pop	{r7}
    86b2:	4770      	bx	lr
    86b4:	400e0000 	.word	0x400e0000
    86b8:	aa000040 	.word	0xaa000040

000086bc <sysclk_disable_pba_divmask>:
/**
 * \brief Disable divided clock mask derived from the PBA clock
 * \param mask mask of the divided clock in the PBADIVMASK register
 */
static inline void sysclk_disable_pba_divmask(uint32_t mask)
{
    86bc:	b480      	push	{r7}
    86be:	b085      	sub	sp, #20
    86c0:	af00      	add	r7, sp, #0
    86c2:	6078      	str	r0, [r7, #4]
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    86c4:	4b09      	ldr	r3, [pc, #36]	; (86ec <sysclk_disable_pba_divmask+0x30>)
    86c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    86c8:	60fb      	str	r3, [r7, #12]
	temp_mask &= ~mask;
    86ca:	687b      	ldr	r3, [r7, #4]
    86cc:	43db      	mvns	r3, r3
    86ce:	68fa      	ldr	r2, [r7, #12]
    86d0:	4013      	ands	r3, r2
    86d2:	60fb      	str	r3, [r7, #12]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    86d4:	4b05      	ldr	r3, [pc, #20]	; (86ec <sysclk_disable_pba_divmask+0x30>)
    86d6:	4a06      	ldr	r2, [pc, #24]	; (86f0 <sysclk_disable_pba_divmask+0x34>)
    86d8:	659a      	str	r2, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    86da:	4a04      	ldr	r2, [pc, #16]	; (86ec <sysclk_disable_pba_divmask+0x30>)
    86dc:	68fb      	ldr	r3, [r7, #12]
    86de:	6413      	str	r3, [r2, #64]	; 0x40
}
    86e0:	bf00      	nop
    86e2:	3714      	adds	r7, #20
    86e4:	46bd      	mov	sp, r7
    86e6:	bc80      	pop	{r7}
    86e8:	4770      	bx	lr
    86ea:	bf00      	nop
    86ec:	400e0000 	.word	0x400e0000
    86f0:	aa000040 	.word	0xaa000040

000086f4 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(uint32_t bus_id, uint32_t module_index)
{
    86f4:	b580      	push	{r7, lr}
    86f6:	b084      	sub	sp, #16
    86f8:	af00      	add	r7, sp, #0
    86fa:	6078      	str	r0, [r7, #4]
    86fc:	6039      	str	r1, [r7, #0]
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
    86fe:	4b13      	ldr	r3, [pc, #76]	; (874c <sysclk_priv_enable_module+0x58>)
    8700:	4798      	blx	r3
    8702:	60f8      	str	r0, [r7, #12]

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    8704:	687b      	ldr	r3, [r7, #4]
    8706:	009a      	lsls	r2, r3, #2
    8708:	4b11      	ldr	r3, [pc, #68]	; (8750 <sysclk_priv_enable_module+0x5c>)
    870a:	4413      	add	r3, r2
    870c:	681b      	ldr	r3, [r3, #0]
    870e:	60bb      	str	r3, [r7, #8]
	mask |= 1U << module_index;
    8710:	2201      	movs	r2, #1
    8712:	683b      	ldr	r3, [r7, #0]
    8714:	fa02 f303 	lsl.w	r3, r2, r3
    8718:	68ba      	ldr	r2, [r7, #8]
    871a:	4313      	orrs	r3, r2
    871c:	60bb      	str	r3, [r7, #8]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    871e:	4a0d      	ldr	r2, [pc, #52]	; (8754 <sysclk_priv_enable_module+0x60>)
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    8720:	687b      	ldr	r3, [r7, #4]
    8722:	3308      	adds	r3, #8
    8724:	009b      	lsls	r3, r3, #2
    8726:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    872a:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
    872e:	6593      	str	r3, [r2, #88]	; 0x58
	*(&PM->PM_CPUMASK + bus_id) = mask;
    8730:	687b      	ldr	r3, [r7, #4]
    8732:	009a      	lsls	r2, r3, #2
    8734:	4b06      	ldr	r3, [pc, #24]	; (8750 <sysclk_priv_enable_module+0x5c>)
    8736:	4413      	add	r3, r2
    8738:	68ba      	ldr	r2, [r7, #8]
    873a:	601a      	str	r2, [r3, #0]

	cpu_irq_restore(flags);
    873c:	68f8      	ldr	r0, [r7, #12]
    873e:	4b06      	ldr	r3, [pc, #24]	; (8758 <sysclk_priv_enable_module+0x64>)
    8740:	4798      	blx	r3
}
    8742:	bf00      	nop
    8744:	3710      	adds	r7, #16
    8746:	46bd      	mov	sp, r7
    8748:	bd80      	pop	{r7, pc}
    874a:	bf00      	nop
    874c:	000083c5 	.word	0x000083c5
    8750:	400e0020 	.word	0x400e0020
    8754:	400e0000 	.word	0x400e0000
    8758:	0000841d 	.word	0x0000841d

0000875c <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(uint32_t bus_id, uint32_t module_index)
{
    875c:	b580      	push	{r7, lr}
    875e:	b084      	sub	sp, #16
    8760:	af00      	add	r7, sp, #0
    8762:	6078      	str	r0, [r7, #4]
    8764:	6039      	str	r1, [r7, #0]
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
    8766:	4b13      	ldr	r3, [pc, #76]	; (87b4 <sysclk_priv_disable_module+0x58>)
    8768:	4798      	blx	r3
    876a:	60f8      	str	r0, [r7, #12]

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    876c:	687b      	ldr	r3, [r7, #4]
    876e:	009a      	lsls	r2, r3, #2
    8770:	4b11      	ldr	r3, [pc, #68]	; (87b8 <sysclk_priv_disable_module+0x5c>)
    8772:	4413      	add	r3, r2
    8774:	681b      	ldr	r3, [r3, #0]
    8776:	60bb      	str	r3, [r7, #8]
	mask &= ~(1U << module_index);
    8778:	2201      	movs	r2, #1
    877a:	683b      	ldr	r3, [r7, #0]
    877c:	fa02 f303 	lsl.w	r3, r2, r3
    8780:	43db      	mvns	r3, r3
    8782:	68ba      	ldr	r2, [r7, #8]
    8784:	4013      	ands	r3, r2
    8786:	60bb      	str	r3, [r7, #8]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    8788:	4a0c      	ldr	r2, [pc, #48]	; (87bc <sysclk_priv_disable_module+0x60>)
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    878a:	687b      	ldr	r3, [r7, #4]
    878c:	3308      	adds	r3, #8
    878e:	009b      	lsls	r3, r3, #2
    8790:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    8794:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
    8798:	6593      	str	r3, [r2, #88]	; 0x58
	*(&PM->PM_CPUMASK + bus_id) = mask;
    879a:	687b      	ldr	r3, [r7, #4]
    879c:	009a      	lsls	r2, r3, #2
    879e:	4b06      	ldr	r3, [pc, #24]	; (87b8 <sysclk_priv_disable_module+0x5c>)
    87a0:	4413      	add	r3, r2
    87a2:	68ba      	ldr	r2, [r7, #8]
    87a4:	601a      	str	r2, [r3, #0]

	cpu_irq_restore(flags);
    87a6:	68f8      	ldr	r0, [r7, #12]
    87a8:	4b05      	ldr	r3, [pc, #20]	; (87c0 <sysclk_priv_disable_module+0x64>)
    87aa:	4798      	blx	r3
}
    87ac:	bf00      	nop
    87ae:	3710      	adds	r7, #16
    87b0:	46bd      	mov	sp, r7
    87b2:	bd80      	pop	{r7, pc}
    87b4:	000083c5 	.word	0x000083c5
    87b8:	400e0020 	.word	0x400e0020
    87bc:	400e0000 	.word	0x400e0000
    87c0:	0000841d 	.word	0x0000841d

000087c4 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_enable_pba_module(uint32_t module_index)
{
    87c4:	b580      	push	{r7, lr}
    87c6:	b084      	sub	sp, #16
    87c8:	af00      	add	r7, sp, #0
    87ca:	6078      	str	r0, [r7, #4]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
    87cc:	4b0a      	ldr	r3, [pc, #40]	; (87f8 <sysclk_enable_pba_module+0x34>)
    87ce:	4798      	blx	r3
    87d0:	60f8      	str	r0, [r7, #12]

	if (PM->PM_PBAMASK == 0) {
    87d2:	4b0a      	ldr	r3, [pc, #40]	; (87fc <sysclk_enable_pba_module+0x38>)
    87d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    87d6:	2b00      	cmp	r3, #0
    87d8:	d102      	bne.n	87e0 <sysclk_enable_pba_module+0x1c>
		sysclk_enable_hsb_module(SYSCLK_PBA_BRIDGE);
    87da:	2005      	movs	r0, #5
    87dc:	4b08      	ldr	r3, [pc, #32]	; (8800 <sysclk_enable_pba_module+0x3c>)
    87de:	4798      	blx	r3
	}

	cpu_irq_restore(flags);
    87e0:	68f8      	ldr	r0, [r7, #12]
    87e2:	4b08      	ldr	r3, [pc, #32]	; (8804 <sysclk_enable_pba_module+0x40>)
    87e4:	4798      	blx	r3

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBA, module_index);
    87e6:	6879      	ldr	r1, [r7, #4]
    87e8:	2002      	movs	r0, #2
    87ea:	4b07      	ldr	r3, [pc, #28]	; (8808 <sysclk_enable_pba_module+0x44>)
    87ec:	4798      	blx	r3
}
    87ee:	bf00      	nop
    87f0:	3710      	adds	r7, #16
    87f2:	46bd      	mov	sp, r7
    87f4:	bd80      	pop	{r7, pc}
    87f6:	bf00      	nop
    87f8:	000083c5 	.word	0x000083c5
    87fc:	400e0000 	.word	0x400e0000
    8800:	000085e1 	.word	0x000085e1
    8804:	0000841d 	.word	0x0000841d
    8808:	000086f5 	.word	0x000086f5

0000880c <sysclk_disable_pba_module>:
/**
 * \brief Disable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_disable_pba_module(uint32_t module_index)
{
    880c:	b580      	push	{r7, lr}
    880e:	b084      	sub	sp, #16
    8810:	af00      	add	r7, sp, #0
    8812:	6078      	str	r0, [r7, #4]
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBA, module_index);
    8814:	6879      	ldr	r1, [r7, #4]
    8816:	2002      	movs	r0, #2
    8818:	4b09      	ldr	r3, [pc, #36]	; (8840 <sysclk_disable_pba_module+0x34>)
    881a:	4798      	blx	r3

	/* Disable the bridge if possible */
	flags = cpu_irq_save();
    881c:	4b09      	ldr	r3, [pc, #36]	; (8844 <sysclk_disable_pba_module+0x38>)
    881e:	4798      	blx	r3
    8820:	60f8      	str	r0, [r7, #12]

	if (PM->PM_PBAMASK == 0) {
    8822:	4b09      	ldr	r3, [pc, #36]	; (8848 <sysclk_disable_pba_module+0x3c>)
    8824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8826:	2b00      	cmp	r3, #0
    8828:	d102      	bne.n	8830 <sysclk_disable_pba_module+0x24>
		sysclk_disable_hsb_module(SYSCLK_PBA_BRIDGE);
    882a:	2005      	movs	r0, #5
    882c:	4b07      	ldr	r3, [pc, #28]	; (884c <sysclk_disable_pba_module+0x40>)
    882e:	4798      	blx	r3
	}

	cpu_irq_restore(flags);
    8830:	68f8      	ldr	r0, [r7, #12]
    8832:	4b07      	ldr	r3, [pc, #28]	; (8850 <sysclk_disable_pba_module+0x44>)
    8834:	4798      	blx	r3
}
    8836:	bf00      	nop
    8838:	3710      	adds	r7, #16
    883a:	46bd      	mov	sp, r7
    883c:	bd80      	pop	{r7, pc}
    883e:	bf00      	nop
    8840:	0000875d 	.word	0x0000875d
    8844:	000083c5 	.word	0x000083c5
    8848:	400e0000 	.word	0x400e0000
    884c:	000085fd 	.word	0x000085fd
    8850:	0000841d 	.word	0x0000841d

00008854 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(uint32_t module_index)
{
    8854:	b580      	push	{r7, lr}
    8856:	b084      	sub	sp, #16
    8858:	af00      	add	r7, sp, #0
    885a:	6078      	str	r0, [r7, #4]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
    885c:	4b0a      	ldr	r3, [pc, #40]	; (8888 <sysclk_enable_pbb_module+0x34>)
    885e:	4798      	blx	r3
    8860:	60f8      	str	r0, [r7, #12]

	if (PM->PM_PBBMASK == 0) {
    8862:	4b0a      	ldr	r3, [pc, #40]	; (888c <sysclk_enable_pbb_module+0x38>)
    8864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8866:	2b00      	cmp	r3, #0
    8868:	d102      	bne.n	8870 <sysclk_enable_pbb_module+0x1c>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);
    886a:	2006      	movs	r0, #6
    886c:	4b08      	ldr	r3, [pc, #32]	; (8890 <sysclk_enable_pbb_module+0x3c>)
    886e:	4798      	blx	r3
	}

	cpu_irq_restore(flags);
    8870:	68f8      	ldr	r0, [r7, #12]
    8872:	4b08      	ldr	r3, [pc, #32]	; (8894 <sysclk_enable_pbb_module+0x40>)
    8874:	4798      	blx	r3

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBB, module_index);
    8876:	6879      	ldr	r1, [r7, #4]
    8878:	2003      	movs	r0, #3
    887a:	4b07      	ldr	r3, [pc, #28]	; (8898 <sysclk_enable_pbb_module+0x44>)
    887c:	4798      	blx	r3
}
    887e:	bf00      	nop
    8880:	3710      	adds	r7, #16
    8882:	46bd      	mov	sp, r7
    8884:	bd80      	pop	{r7, pc}
    8886:	bf00      	nop
    8888:	000083c5 	.word	0x000083c5
    888c:	400e0000 	.word	0x400e0000
    8890:	000085e1 	.word	0x000085e1
    8894:	0000841d 	.word	0x0000841d
    8898:	000086f5 	.word	0x000086f5

0000889c <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(uint32_t module_index)
{
    889c:	b580      	push	{r7, lr}
    889e:	b084      	sub	sp, #16
    88a0:	af00      	add	r7, sp, #0
    88a2:	6078      	str	r0, [r7, #4]
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBB, module_index);
    88a4:	6879      	ldr	r1, [r7, #4]
    88a6:	2003      	movs	r0, #3
    88a8:	4b09      	ldr	r3, [pc, #36]	; (88d0 <sysclk_disable_pbb_module+0x34>)
    88aa:	4798      	blx	r3

	/* Disable the bridge if possible */
	flags = cpu_irq_save();
    88ac:	4b09      	ldr	r3, [pc, #36]	; (88d4 <sysclk_disable_pbb_module+0x38>)
    88ae:	4798      	blx	r3
    88b0:	60f8      	str	r0, [r7, #12]

	if (PM->PM_PBBMASK == 0) {
    88b2:	4b09      	ldr	r3, [pc, #36]	; (88d8 <sysclk_disable_pbb_module+0x3c>)
    88b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    88b6:	2b00      	cmp	r3, #0
    88b8:	d102      	bne.n	88c0 <sysclk_disable_pbb_module+0x24>
		sysclk_disable_hsb_module(SYSCLK_PBB_BRIDGE);
    88ba:	2006      	movs	r0, #6
    88bc:	4b07      	ldr	r3, [pc, #28]	; (88dc <sysclk_disable_pbb_module+0x40>)
    88be:	4798      	blx	r3
	}

	cpu_irq_restore(flags);
    88c0:	68f8      	ldr	r0, [r7, #12]
    88c2:	4b07      	ldr	r3, [pc, #28]	; (88e0 <sysclk_disable_pbb_module+0x44>)
    88c4:	4798      	blx	r3
}
    88c6:	bf00      	nop
    88c8:	3710      	adds	r7, #16
    88ca:	46bd      	mov	sp, r7
    88cc:	bd80      	pop	{r7, pc}
    88ce:	bf00      	nop
    88d0:	0000875d 	.word	0x0000875d
    88d4:	000083c5 	.word	0x000083c5
    88d8:	400e0000 	.word	0x400e0000
    88dc:	000085fd 	.word	0x000085fd
    88e0:	0000841d 	.word	0x0000841d

000088e4 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
    88e4:	b580      	push	{r7, lr}
    88e6:	b082      	sub	sp, #8
    88e8:	af00      	add	r7, sp, #0
    88ea:	6078      	str	r0, [r7, #4]
	switch ((uintptr_t)module) {
    88ec:	687b      	ldr	r3, [r7, #4]
    88ee:	4aa9      	ldr	r2, [pc, #676]	; (8b94 <sysclk_enable_peripheral_clock+0x2b0>)
    88f0:	4293      	cmp	r3, r2
    88f2:	f000 8146 	beq.w	8b82 <sysclk_enable_peripheral_clock+0x29e>
    88f6:	4aa7      	ldr	r2, [pc, #668]	; (8b94 <sysclk_enable_peripheral_clock+0x2b0>)
    88f8:	4293      	cmp	r3, r2
    88fa:	d86c      	bhi.n	89d6 <sysclk_enable_peripheral_clock+0xf2>
    88fc:	4aa6      	ldr	r2, [pc, #664]	; (8b98 <sysclk_enable_peripheral_clock+0x2b4>)
    88fe:	4293      	cmp	r3, r2
    8900:	f000 810a 	beq.w	8b18 <sysclk_enable_peripheral_clock+0x234>
    8904:	4aa4      	ldr	r2, [pc, #656]	; (8b98 <sysclk_enable_peripheral_clock+0x2b4>)
    8906:	4293      	cmp	r3, r2
    8908:	d830      	bhi.n	896c <sysclk_enable_peripheral_clock+0x88>
    890a:	4aa4      	ldr	r2, [pc, #656]	; (8b9c <sysclk_enable_peripheral_clock+0x2b8>)
    890c:	4293      	cmp	r3, r2
    890e:	f000 80ec 	beq.w	8aea <sysclk_enable_peripheral_clock+0x206>
    8912:	4aa2      	ldr	r2, [pc, #648]	; (8b9c <sysclk_enable_peripheral_clock+0x2b8>)
    8914:	4293      	cmp	r3, r2
    8916:	d814      	bhi.n	8942 <sysclk_enable_peripheral_clock+0x5e>
    8918:	4aa1      	ldr	r2, [pc, #644]	; (8ba0 <sysclk_enable_peripheral_clock+0x2bc>)
    891a:	4293      	cmp	r3, r2
    891c:	f000 80d3 	beq.w	8ac6 <sysclk_enable_peripheral_clock+0x1e2>
    8920:	4a9f      	ldr	r2, [pc, #636]	; (8ba0 <sysclk_enable_peripheral_clock+0x2bc>)
    8922:	4293      	cmp	r3, r2
    8924:	d804      	bhi.n	8930 <sysclk_enable_peripheral_clock+0x4c>
    8926:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    892a:	f000 80c8 	beq.w	8abe <sysclk_enable_peripheral_clock+0x1da>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    892e:	e1e4      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    8930:	4a9c      	ldr	r2, [pc, #624]	; (8ba4 <sysclk_enable_peripheral_clock+0x2c0>)
    8932:	4293      	cmp	r3, r2
    8934:	f000 80cb 	beq.w	8ace <sysclk_enable_peripheral_clock+0x1ea>
    8938:	4a9b      	ldr	r2, [pc, #620]	; (8ba8 <sysclk_enable_peripheral_clock+0x2c4>)
    893a:	4293      	cmp	r3, r2
    893c:	f000 80ce 	beq.w	8adc <sysclk_enable_peripheral_clock+0x1f8>
		return;
    8940:	e1db      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    8942:	4a9a      	ldr	r2, [pc, #616]	; (8bac <sysclk_enable_peripheral_clock+0x2c8>)
    8944:	4293      	cmp	r3, r2
    8946:	f000 80d8 	beq.w	8afa <sysclk_enable_peripheral_clock+0x216>
    894a:	4a98      	ldr	r2, [pc, #608]	; (8bac <sysclk_enable_peripheral_clock+0x2c8>)
    894c:	4293      	cmp	r3, r2
    894e:	d804      	bhi.n	895a <sysclk_enable_peripheral_clock+0x76>
    8950:	4a97      	ldr	r2, [pc, #604]	; (8bb0 <sysclk_enable_peripheral_clock+0x2cc>)
    8952:	4293      	cmp	r3, r2
    8954:	f000 80cd 	beq.w	8af2 <sysclk_enable_peripheral_clock+0x20e>
		return;
    8958:	e1cf      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    895a:	4a96      	ldr	r2, [pc, #600]	; (8bb4 <sysclk_enable_peripheral_clock+0x2d0>)
    895c:	4293      	cmp	r3, r2
    895e:	f000 80d0 	beq.w	8b02 <sysclk_enable_peripheral_clock+0x21e>
    8962:	4a95      	ldr	r2, [pc, #596]	; (8bb8 <sysclk_enable_peripheral_clock+0x2d4>)
    8964:	4293      	cmp	r3, r2
    8966:	f000 80d0 	beq.w	8b0a <sysclk_enable_peripheral_clock+0x226>
		return;
    896a:	e1c6      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    896c:	4a93      	ldr	r2, [pc, #588]	; (8bbc <sysclk_enable_peripheral_clock+0x2d8>)
    896e:	4293      	cmp	r3, r2
    8970:	f000 80ef 	beq.w	8b52 <sysclk_enable_peripheral_clock+0x26e>
    8974:	4a91      	ldr	r2, [pc, #580]	; (8bbc <sysclk_enable_peripheral_clock+0x2d8>)
    8976:	4293      	cmp	r3, r2
    8978:	d814      	bhi.n	89a4 <sysclk_enable_peripheral_clock+0xc0>
    897a:	4a91      	ldr	r2, [pc, #580]	; (8bc0 <sysclk_enable_peripheral_clock+0x2dc>)
    897c:	4293      	cmp	r3, r2
    897e:	f000 80d9 	beq.w	8b34 <sysclk_enable_peripheral_clock+0x250>
    8982:	4a8f      	ldr	r2, [pc, #572]	; (8bc0 <sysclk_enable_peripheral_clock+0x2dc>)
    8984:	4293      	cmp	r3, r2
    8986:	d804      	bhi.n	8992 <sysclk_enable_peripheral_clock+0xae>
    8988:	4a8e      	ldr	r2, [pc, #568]	; (8bc4 <sysclk_enable_peripheral_clock+0x2e0>)
    898a:	4293      	cmp	r3, r2
    898c:	f000 80cb 	beq.w	8b26 <sysclk_enable_peripheral_clock+0x242>
		return;
    8990:	e1b3      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    8992:	4a8d      	ldr	r2, [pc, #564]	; (8bc8 <sysclk_enable_peripheral_clock+0x2e4>)
    8994:	4293      	cmp	r3, r2
    8996:	f000 80d4 	beq.w	8b42 <sysclk_enable_peripheral_clock+0x25e>
    899a:	4a8c      	ldr	r2, [pc, #560]	; (8bcc <sysclk_enable_peripheral_clock+0x2e8>)
    899c:	4293      	cmp	r3, r2
    899e:	f000 80d4 	beq.w	8b4a <sysclk_enable_peripheral_clock+0x266>
		return;
    89a2:	e1aa      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    89a4:	4a8a      	ldr	r2, [pc, #552]	; (8bd0 <sysclk_enable_peripheral_clock+0x2ec>)
    89a6:	4293      	cmp	r3, r2
    89a8:	f000 80df 	beq.w	8b6a <sysclk_enable_peripheral_clock+0x286>
    89ac:	4a88      	ldr	r2, [pc, #544]	; (8bd0 <sysclk_enable_peripheral_clock+0x2ec>)
    89ae:	4293      	cmp	r3, r2
    89b0:	d808      	bhi.n	89c4 <sysclk_enable_peripheral_clock+0xe0>
    89b2:	4a88      	ldr	r2, [pc, #544]	; (8bd4 <sysclk_enable_peripheral_clock+0x2f0>)
    89b4:	4293      	cmp	r3, r2
    89b6:	f000 80d0 	beq.w	8b5a <sysclk_enable_peripheral_clock+0x276>
    89ba:	4a87      	ldr	r2, [pc, #540]	; (8bd8 <sysclk_enable_peripheral_clock+0x2f4>)
    89bc:	4293      	cmp	r3, r2
    89be:	f000 80d0 	beq.w	8b62 <sysclk_enable_peripheral_clock+0x27e>
		return;
    89c2:	e19a      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    89c4:	4a85      	ldr	r2, [pc, #532]	; (8bdc <sysclk_enable_peripheral_clock+0x2f8>)
    89c6:	4293      	cmp	r3, r2
    89c8:	f000 80d3 	beq.w	8b72 <sysclk_enable_peripheral_clock+0x28e>
    89cc:	4a84      	ldr	r2, [pc, #528]	; (8be0 <sysclk_enable_peripheral_clock+0x2fc>)
    89ce:	4293      	cmp	r3, r2
    89d0:	f000 80d3 	beq.w	8b7a <sysclk_enable_peripheral_clock+0x296>
		return;
    89d4:	e191      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    89d6:	4a83      	ldr	r2, [pc, #524]	; (8be4 <sysclk_enable_peripheral_clock+0x300>)
    89d8:	4293      	cmp	r3, r2
    89da:	f000 8162 	beq.w	8ca2 <sysclk_enable_peripheral_clock+0x3be>
    89de:	4a81      	ldr	r2, [pc, #516]	; (8be4 <sysclk_enable_peripheral_clock+0x300>)
    89e0:	4293      	cmp	r3, r2
    89e2:	d833      	bhi.n	8a4c <sysclk_enable_peripheral_clock+0x168>
    89e4:	4a80      	ldr	r2, [pc, #512]	; (8be8 <sysclk_enable_peripheral_clock+0x304>)
    89e6:	4293      	cmp	r3, r2
    89e8:	f000 813e 	beq.w	8c68 <sysclk_enable_peripheral_clock+0x384>
    89ec:	4a7e      	ldr	r2, [pc, #504]	; (8be8 <sysclk_enable_peripheral_clock+0x304>)
    89ee:	4293      	cmp	r3, r2
    89f0:	d814      	bhi.n	8a1c <sysclk_enable_peripheral_clock+0x138>
    89f2:	4a7e      	ldr	r2, [pc, #504]	; (8bec <sysclk_enable_peripheral_clock+0x308>)
    89f4:	4293      	cmp	r3, r2
    89f6:	f000 8125 	beq.w	8c44 <sysclk_enable_peripheral_clock+0x360>
    89fa:	4a7c      	ldr	r2, [pc, #496]	; (8bec <sysclk_enable_peripheral_clock+0x308>)
    89fc:	4293      	cmp	r3, r2
    89fe:	d804      	bhi.n	8a0a <sysclk_enable_peripheral_clock+0x126>
    8a00:	4a7b      	ldr	r2, [pc, #492]	; (8bf0 <sysclk_enable_peripheral_clock+0x30c>)
    8a02:	4293      	cmp	r3, r2
    8a04:	f000 80c1 	beq.w	8b8a <sysclk_enable_peripheral_clock+0x2a6>
		return;
    8a08:	e177      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    8a0a:	4a7a      	ldr	r2, [pc, #488]	; (8bf4 <sysclk_enable_peripheral_clock+0x310>)
    8a0c:	4293      	cmp	r3, r2
    8a0e:	f000 811d 	beq.w	8c4c <sysclk_enable_peripheral_clock+0x368>
    8a12:	4a79      	ldr	r2, [pc, #484]	; (8bf8 <sysclk_enable_peripheral_clock+0x314>)
    8a14:	4293      	cmp	r3, r2
    8a16:	f000 8120 	beq.w	8c5a <sysclk_enable_peripheral_clock+0x376>
		return;
    8a1a:	e16e      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    8a1c:	4a77      	ldr	r2, [pc, #476]	; (8bfc <sysclk_enable_peripheral_clock+0x318>)
    8a1e:	4293      	cmp	r3, r2
    8a20:	f000 8134 	beq.w	8c8c <sysclk_enable_peripheral_clock+0x3a8>
    8a24:	4a75      	ldr	r2, [pc, #468]	; (8bfc <sysclk_enable_peripheral_clock+0x318>)
    8a26:	4293      	cmp	r3, r2
    8a28:	d808      	bhi.n	8a3c <sysclk_enable_peripheral_clock+0x158>
    8a2a:	4a75      	ldr	r2, [pc, #468]	; (8c00 <sysclk_enable_peripheral_clock+0x31c>)
    8a2c:	4293      	cmp	r3, r2
    8a2e:	f000 811f 	beq.w	8c70 <sysclk_enable_peripheral_clock+0x38c>
    8a32:	4a74      	ldr	r2, [pc, #464]	; (8c04 <sysclk_enable_peripheral_clock+0x320>)
    8a34:	4293      	cmp	r3, r2
    8a36:	f000 8122 	beq.w	8c7e <sysclk_enable_peripheral_clock+0x39a>
		return;
    8a3a:	e15e      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    8a3c:	4a72      	ldr	r2, [pc, #456]	; (8c08 <sysclk_enable_peripheral_clock+0x324>)
    8a3e:	4293      	cmp	r3, r2
    8a40:	f000 812b 	beq.w	8c9a <sysclk_enable_peripheral_clock+0x3b6>
    8a44:	4a71      	ldr	r2, [pc, #452]	; (8c0c <sysclk_enable_peripheral_clock+0x328>)
    8a46:	4293      	cmp	r3, r2
    8a48:	d035      	beq.n	8ab6 <sysclk_enable_peripheral_clock+0x1d2>
		return;
    8a4a:	e156      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    8a4c:	4a70      	ldr	r2, [pc, #448]	; (8c10 <sysclk_enable_peripheral_clock+0x32c>)
    8a4e:	4293      	cmp	r3, r2
    8a50:	f000 813b 	beq.w	8cca <sysclk_enable_peripheral_clock+0x3e6>
    8a54:	4a6e      	ldr	r2, [pc, #440]	; (8c10 <sysclk_enable_peripheral_clock+0x32c>)
    8a56:	4293      	cmp	r3, r2
    8a58:	d814      	bhi.n	8a84 <sysclk_enable_peripheral_clock+0x1a0>
    8a5a:	4a6e      	ldr	r2, [pc, #440]	; (8c14 <sysclk_enable_peripheral_clock+0x330>)
    8a5c:	4293      	cmp	r3, r2
    8a5e:	f000 8128 	beq.w	8cb2 <sysclk_enable_peripheral_clock+0x3ce>
    8a62:	4a6c      	ldr	r2, [pc, #432]	; (8c14 <sysclk_enable_peripheral_clock+0x330>)
    8a64:	4293      	cmp	r3, r2
    8a66:	d804      	bhi.n	8a72 <sysclk_enable_peripheral_clock+0x18e>
    8a68:	4a6b      	ldr	r2, [pc, #428]	; (8c18 <sysclk_enable_peripheral_clock+0x334>)
    8a6a:	4293      	cmp	r3, r2
    8a6c:	f000 811d 	beq.w	8caa <sysclk_enable_peripheral_clock+0x3c6>
		return;
    8a70:	e143      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    8a72:	4a6a      	ldr	r2, [pc, #424]	; (8c1c <sysclk_enable_peripheral_clock+0x338>)
    8a74:	4293      	cmp	r3, r2
    8a76:	f000 8120 	beq.w	8cba <sysclk_enable_peripheral_clock+0x3d6>
    8a7a:	4a69      	ldr	r2, [pc, #420]	; (8c20 <sysclk_enable_peripheral_clock+0x33c>)
    8a7c:	4293      	cmp	r3, r2
    8a7e:	f000 8120 	beq.w	8cc2 <sysclk_enable_peripheral_clock+0x3de>
		return;
    8a82:	e13a      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    8a84:	4a67      	ldr	r2, [pc, #412]	; (8c24 <sysclk_enable_peripheral_clock+0x340>)
    8a86:	4293      	cmp	r3, r2
    8a88:	f000 812b 	beq.w	8ce2 <sysclk_enable_peripheral_clock+0x3fe>
    8a8c:	4a65      	ldr	r2, [pc, #404]	; (8c24 <sysclk_enable_peripheral_clock+0x340>)
    8a8e:	4293      	cmp	r3, r2
    8a90:	d808      	bhi.n	8aa4 <sysclk_enable_peripheral_clock+0x1c0>
    8a92:	4a65      	ldr	r2, [pc, #404]	; (8c28 <sysclk_enable_peripheral_clock+0x344>)
    8a94:	4293      	cmp	r3, r2
    8a96:	f000 811c 	beq.w	8cd2 <sysclk_enable_peripheral_clock+0x3ee>
    8a9a:	4a64      	ldr	r2, [pc, #400]	; (8c2c <sysclk_enable_peripheral_clock+0x348>)
    8a9c:	4293      	cmp	r3, r2
    8a9e:	f000 811c 	beq.w	8cda <sysclk_enable_peripheral_clock+0x3f6>
		return;
    8aa2:	e12a      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
	switch ((uintptr_t)module) {
    8aa4:	4a62      	ldr	r2, [pc, #392]	; (8c30 <sysclk_enable_peripheral_clock+0x34c>)
    8aa6:	4293      	cmp	r3, r2
    8aa8:	f000 811f 	beq.w	8cea <sysclk_enable_peripheral_clock+0x406>
    8aac:	4a61      	ldr	r2, [pc, #388]	; (8c34 <sysclk_enable_peripheral_clock+0x350>)
    8aae:	4293      	cmp	r3, r2
    8ab0:	f000 811f 	beq.w	8cf2 <sysclk_enable_peripheral_clock+0x40e>
		return;
    8ab4:	e121      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_hsb_module(SYSCLK_AESA_HSB);
    8ab6:	2009      	movs	r0, #9
    8ab8:	4b5f      	ldr	r3, [pc, #380]	; (8c38 <sysclk_enable_peripheral_clock+0x354>)
    8aba:	4798      	blx	r3
		break;
    8abc:	e11d      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_IISC);
    8abe:	2000      	movs	r0, #0
    8ac0:	4b5e      	ldr	r3, [pc, #376]	; (8c3c <sysclk_enable_peripheral_clock+0x358>)
    8ac2:	4798      	blx	r3
		break;
    8ac4:	e119      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_SPI);
    8ac6:	2001      	movs	r0, #1
    8ac8:	4b5c      	ldr	r3, [pc, #368]	; (8c3c <sysclk_enable_peripheral_clock+0x358>)
    8aca:	4798      	blx	r3
		break;
    8acc:	e115      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TC0);
    8ace:	2002      	movs	r0, #2
    8ad0:	4b5a      	ldr	r3, [pc, #360]	; (8c3c <sysclk_enable_peripheral_clock+0x358>)
    8ad2:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_TIMER_CLOCK2
    8ad4:	2055      	movs	r0, #85	; 0x55
    8ad6:	4b5a      	ldr	r3, [pc, #360]	; (8c40 <sysclk_enable_peripheral_clock+0x35c>)
    8ad8:	4798      	blx	r3
		break;
    8ada:	e10e      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TC1);
    8adc:	2003      	movs	r0, #3
    8ade:	4b57      	ldr	r3, [pc, #348]	; (8c3c <sysclk_enable_peripheral_clock+0x358>)
    8ae0:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_TIMER_CLOCK2
    8ae2:	2055      	movs	r0, #85	; 0x55
    8ae4:	4b56      	ldr	r3, [pc, #344]	; (8c40 <sysclk_enable_peripheral_clock+0x35c>)
    8ae6:	4798      	blx	r3
		break;
    8ae8:	e107      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TWIM0);
    8aea:	2004      	movs	r0, #4
    8aec:	4b53      	ldr	r3, [pc, #332]	; (8c3c <sysclk_enable_peripheral_clock+0x358>)
    8aee:	4798      	blx	r3
		break;
    8af0:	e103      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TWIS0);
    8af2:	2005      	movs	r0, #5
    8af4:	4b51      	ldr	r3, [pc, #324]	; (8c3c <sysclk_enable_peripheral_clock+0x358>)
    8af6:	4798      	blx	r3
		break;
    8af8:	e0ff      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TWIM1);
    8afa:	2006      	movs	r0, #6
    8afc:	4b4f      	ldr	r3, [pc, #316]	; (8c3c <sysclk_enable_peripheral_clock+0x358>)
    8afe:	4798      	blx	r3
		break;
    8b00:	e0fb      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TWIS1);
    8b02:	2007      	movs	r0, #7
    8b04:	4b4d      	ldr	r3, [pc, #308]	; (8c3c <sysclk_enable_peripheral_clock+0x358>)
    8b06:	4798      	blx	r3
		break;
    8b08:	e0f7      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_USART0);
    8b0a:	2008      	movs	r0, #8
    8b0c:	4b4b      	ldr	r3, [pc, #300]	; (8c3c <sysclk_enable_peripheral_clock+0x358>)
    8b0e:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
    8b10:	2004      	movs	r0, #4
    8b12:	4b4b      	ldr	r3, [pc, #300]	; (8c40 <sysclk_enable_peripheral_clock+0x35c>)
    8b14:	4798      	blx	r3
		break;
    8b16:	e0f0      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_USART1);
    8b18:	2009      	movs	r0, #9
    8b1a:	4b48      	ldr	r3, [pc, #288]	; (8c3c <sysclk_enable_peripheral_clock+0x358>)
    8b1c:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
    8b1e:	2004      	movs	r0, #4
    8b20:	4b47      	ldr	r3, [pc, #284]	; (8c40 <sysclk_enable_peripheral_clock+0x35c>)
    8b22:	4798      	blx	r3
		break;
    8b24:	e0e9      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_USART2);
    8b26:	200a      	movs	r0, #10
    8b28:	4b44      	ldr	r3, [pc, #272]	; (8c3c <sysclk_enable_peripheral_clock+0x358>)
    8b2a:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
    8b2c:	2004      	movs	r0, #4
    8b2e:	4b44      	ldr	r3, [pc, #272]	; (8c40 <sysclk_enable_peripheral_clock+0x35c>)
    8b30:	4798      	blx	r3
		break;
    8b32:	e0e2      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_USART3);
    8b34:	200b      	movs	r0, #11
    8b36:	4b41      	ldr	r3, [pc, #260]	; (8c3c <sysclk_enable_peripheral_clock+0x358>)
    8b38:	4798      	blx	r3
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
    8b3a:	2004      	movs	r0, #4
    8b3c:	4b40      	ldr	r3, [pc, #256]	; (8c40 <sysclk_enable_peripheral_clock+0x35c>)
    8b3e:	4798      	blx	r3
		break;
    8b40:	e0db      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
    8b42:	200c      	movs	r0, #12
    8b44:	4b3d      	ldr	r3, [pc, #244]	; (8c3c <sysclk_enable_peripheral_clock+0x358>)
    8b46:	4798      	blx	r3
		break;
    8b48:	e0d7      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_DACC);
    8b4a:	200d      	movs	r0, #13
    8b4c:	4b3b      	ldr	r3, [pc, #236]	; (8c3c <sysclk_enable_peripheral_clock+0x358>)
    8b4e:	4798      	blx	r3
		break;
    8b50:	e0d3      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_ACIFC);
    8b52:	200e      	movs	r0, #14
    8b54:	4b39      	ldr	r3, [pc, #228]	; (8c3c <sysclk_enable_peripheral_clock+0x358>)
    8b56:	4798      	blx	r3
		break;
    8b58:	e0cf      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_GLOC);
    8b5a:	200f      	movs	r0, #15
    8b5c:	4b37      	ldr	r3, [pc, #220]	; (8c3c <sysclk_enable_peripheral_clock+0x358>)
    8b5e:	4798      	blx	r3
		break;
    8b60:	e0cb      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_ABDACB);
    8b62:	2010      	movs	r0, #16
    8b64:	4b35      	ldr	r3, [pc, #212]	; (8c3c <sysclk_enable_peripheral_clock+0x358>)
    8b66:	4798      	blx	r3
		break;
    8b68:	e0c7      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TRNG);
    8b6a:	2011      	movs	r0, #17
    8b6c:	4b33      	ldr	r3, [pc, #204]	; (8c3c <sysclk_enable_peripheral_clock+0x358>)
    8b6e:	4798      	blx	r3
		break;
    8b70:	e0c3      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_PARC);
    8b72:	2012      	movs	r0, #18
    8b74:	4b31      	ldr	r3, [pc, #196]	; (8c3c <sysclk_enable_peripheral_clock+0x358>)
    8b76:	4798      	blx	r3
		break;
    8b78:	e0bf      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_CATB);
    8b7a:	2013      	movs	r0, #19
    8b7c:	4b2f      	ldr	r3, [pc, #188]	; (8c3c <sysclk_enable_peripheral_clock+0x358>)
    8b7e:	4798      	blx	r3
		break;
    8b80:	e0bb      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TWIM2);
    8b82:	2015      	movs	r0, #21
    8b84:	4b2d      	ldr	r3, [pc, #180]	; (8c3c <sysclk_enable_peripheral_clock+0x358>)
    8b86:	4798      	blx	r3
		break;
    8b88:	e0b7      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pba_module(SYSCLK_TWIM3);
    8b8a:	2016      	movs	r0, #22
    8b8c:	4b2b      	ldr	r3, [pc, #172]	; (8c3c <sysclk_enable_peripheral_clock+0x358>)
    8b8e:	4798      	blx	r3
		break;
    8b90:	e0b3      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
    8b92:	bf00      	nop
    8b94:	40078000 	.word	0x40078000
    8b98:	40028000 	.word	0x40028000
    8b9c:	40018000 	.word	0x40018000
    8ba0:	40008000 	.word	0x40008000
    8ba4:	40010000 	.word	0x40010000
    8ba8:	40014000 	.word	0x40014000
    8bac:	4001c000 	.word	0x4001c000
    8bb0:	40018400 	.word	0x40018400
    8bb4:	4001c400 	.word	0x4001c400
    8bb8:	40024000 	.word	0x40024000
    8bbc:	40040000 	.word	0x40040000
    8bc0:	40030000 	.word	0x40030000
    8bc4:	4002c000 	.word	0x4002c000
    8bc8:	40038000 	.word	0x40038000
    8bcc:	4003c000 	.word	0x4003c000
    8bd0:	40068000 	.word	0x40068000
    8bd4:	40060000 	.word	0x40060000
    8bd8:	40064000 	.word	0x40064000
    8bdc:	4006c000 	.word	0x4006c000
    8be0:	40070000 	.word	0x40070000
    8be4:	400e0000 	.word	0x400e0000
    8be8:	400a1000 	.word	0x400a1000
    8bec:	40080000 	.word	0x40080000
    8bf0:	4007c000 	.word	0x4007c000
    8bf4:	400a0000 	.word	0x400a0000
    8bf8:	400a0400 	.word	0x400a0400
    8bfc:	400a5000 	.word	0x400a5000
    8c00:	400a2000 	.word	0x400a2000
    8c04:	400a4000 	.word	0x400a4000
    8c08:	400a6000 	.word	0x400a6000
    8c0c:	400b0000 	.word	0x400b0000
    8c10:	400f0000 	.word	0x400f0000
    8c14:	400e0800 	.word	0x400e0800
    8c18:	400e0400 	.word	0x400e0400
    8c1c:	400e0c00 	.word	0x400e0c00
    8c20:	400e1000 	.word	0x400e1000
    8c24:	400f0c00 	.word	0x400f0c00
    8c28:	400f0400 	.word	0x400f0400
    8c2c:	400f0800 	.word	0x400f0800
    8c30:	400f1000 	.word	0x400f1000
    8c34:	400f1400 	.word	0x400f1400
    8c38:	000085e1 	.word	0x000085e1
    8c3c:	000087c5 	.word	0x000087c5
    8c40:	00008689 	.word	0x00008689
		sysclk_enable_pba_module(SYSCLK_LCDCA);
    8c44:	2017      	movs	r0, #23
    8c46:	4b2e      	ldr	r3, [pc, #184]	; (8d00 <sysclk_enable_peripheral_clock+0x41c>)
    8c48:	4798      	blx	r3
		break;
    8c4a:	e056      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_hsb_module(SYSCLK_HFLASHC_DATA);
    8c4c:	2001      	movs	r0, #1
    8c4e:	4b2d      	ldr	r3, [pc, #180]	; (8d04 <sysclk_enable_peripheral_clock+0x420>)
    8c50:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
    8c52:	2000      	movs	r0, #0
    8c54:	4b2c      	ldr	r3, [pc, #176]	; (8d08 <sysclk_enable_peripheral_clock+0x424>)
    8c56:	4798      	blx	r3
		break;
    8c58:	e04f      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_hsb_module(SYSCLK_HRAMC1_DATA);
    8c5a:	2002      	movs	r0, #2
    8c5c:	4b29      	ldr	r3, [pc, #164]	; (8d04 <sysclk_enable_peripheral_clock+0x420>)
    8c5e:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_HRAMC1_REGS);
    8c60:	2001      	movs	r0, #1
    8c62:	4b29      	ldr	r3, [pc, #164]	; (8d08 <sysclk_enable_peripheral_clock+0x424>)
    8c64:	4798      	blx	r3
		break;
    8c66:	e048      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
    8c68:	2002      	movs	r0, #2
    8c6a:	4b27      	ldr	r3, [pc, #156]	; (8d08 <sysclk_enable_peripheral_clock+0x424>)
    8c6c:	4798      	blx	r3
		break;
    8c6e:	e044      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
    8c70:	2000      	movs	r0, #0
    8c72:	4b24      	ldr	r3, [pc, #144]	; (8d04 <sysclk_enable_peripheral_clock+0x420>)
    8c74:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_PDCA_PB);
    8c76:	2003      	movs	r0, #3
    8c78:	4b23      	ldr	r3, [pc, #140]	; (8d08 <sysclk_enable_peripheral_clock+0x424>)
    8c7a:	4798      	blx	r3
		break;
    8c7c:	e03d      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_hsb_module(SYSCLK_CRCCU_DATA);
    8c7e:	2004      	movs	r0, #4
    8c80:	4b20      	ldr	r3, [pc, #128]	; (8d04 <sysclk_enable_peripheral_clock+0x420>)
    8c82:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_CRCCU_REGS);
    8c84:	2004      	movs	r0, #4
    8c86:	4b20      	ldr	r3, [pc, #128]	; (8d08 <sysclk_enable_peripheral_clock+0x424>)
    8c88:	4798      	blx	r3
		break;
    8c8a:	e036      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
    8c8c:	2003      	movs	r0, #3
    8c8e:	4b1d      	ldr	r3, [pc, #116]	; (8d04 <sysclk_enable_peripheral_clock+0x420>)
    8c90:	4798      	blx	r3
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
    8c92:	2005      	movs	r0, #5
    8c94:	4b1c      	ldr	r3, [pc, #112]	; (8d08 <sysclk_enable_peripheral_clock+0x424>)
    8c96:	4798      	blx	r3
		break;
    8c98:	e02f      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbb_module(SYSCLK_PEVC);
    8c9a:	2006      	movs	r0, #6
    8c9c:	4b1a      	ldr	r3, [pc, #104]	; (8d08 <sysclk_enable_peripheral_clock+0x424>)
    8c9e:	4798      	blx	r3
		break;
    8ca0:	e02b      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbc_module(SYSCLK_PM);
    8ca2:	2000      	movs	r0, #0
    8ca4:	4b19      	ldr	r3, [pc, #100]	; (8d0c <sysclk_enable_peripheral_clock+0x428>)
    8ca6:	4798      	blx	r3
		break;
    8ca8:	e027      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbc_module(SYSCLK_CHIPID);
    8caa:	2001      	movs	r0, #1
    8cac:	4b17      	ldr	r3, [pc, #92]	; (8d0c <sysclk_enable_peripheral_clock+0x428>)
    8cae:	4798      	blx	r3
		break;
    8cb0:	e023      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbc_module(SYSCLK_SCIF);
    8cb2:	2002      	movs	r0, #2
    8cb4:	4b15      	ldr	r3, [pc, #84]	; (8d0c <sysclk_enable_peripheral_clock+0x428>)
    8cb6:	4798      	blx	r3
		break;
    8cb8:	e01f      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbc_module(SYSCLK_FREQM);
    8cba:	2003      	movs	r0, #3
    8cbc:	4b13      	ldr	r3, [pc, #76]	; (8d0c <sysclk_enable_peripheral_clock+0x428>)
    8cbe:	4798      	blx	r3
		break;
    8cc0:	e01b      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbc_module(SYSCLK_GPIO);
    8cc2:	2004      	movs	r0, #4
    8cc4:	4b11      	ldr	r3, [pc, #68]	; (8d0c <sysclk_enable_peripheral_clock+0x428>)
    8cc6:	4798      	blx	r3
		break;
    8cc8:	e017      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbd_module(SYSCLK_BPM);
    8cca:	2000      	movs	r0, #0
    8ccc:	4b10      	ldr	r3, [pc, #64]	; (8d10 <sysclk_enable_peripheral_clock+0x42c>)
    8cce:	4798      	blx	r3
		break;
    8cd0:	e013      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbd_module(SYSCLK_BSCIF);
    8cd2:	2001      	movs	r0, #1
    8cd4:	4b0e      	ldr	r3, [pc, #56]	; (8d10 <sysclk_enable_peripheral_clock+0x42c>)
    8cd6:	4798      	blx	r3
		break;
    8cd8:	e00f      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbd_module(SYSCLK_AST);
    8cda:	2002      	movs	r0, #2
    8cdc:	4b0c      	ldr	r3, [pc, #48]	; (8d10 <sysclk_enable_peripheral_clock+0x42c>)
    8cde:	4798      	blx	r3
		break;
    8ce0:	e00b      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbd_module(SYSCLK_WDT);
    8ce2:	2003      	movs	r0, #3
    8ce4:	4b0a      	ldr	r3, [pc, #40]	; (8d10 <sysclk_enable_peripheral_clock+0x42c>)
    8ce6:	4798      	blx	r3
		break;
    8ce8:	e007      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbd_module(SYSCLK_EIC);
    8cea:	2004      	movs	r0, #4
    8cec:	4b08      	ldr	r3, [pc, #32]	; (8d10 <sysclk_enable_peripheral_clock+0x42c>)
    8cee:	4798      	blx	r3
		break;
    8cf0:	e003      	b.n	8cfa <sysclk_enable_peripheral_clock+0x416>
		sysclk_enable_pbd_module(SYSCLK_PICOUART);
    8cf2:	2005      	movs	r0, #5
    8cf4:	4b06      	ldr	r3, [pc, #24]	; (8d10 <sysclk_enable_peripheral_clock+0x42c>)
    8cf6:	4798      	blx	r3
		break;
    8cf8:	bf00      	nop
	}
}
    8cfa:	3708      	adds	r7, #8
    8cfc:	46bd      	mov	sp, r7
    8cfe:	bd80      	pop	{r7, pc}
    8d00:	000087c5 	.word	0x000087c5
    8d04:	000085e1 	.word	0x000085e1
    8d08:	00008855 	.word	0x00008855
    8d0c:	00008619 	.word	0x00008619
    8d10:	00008651 	.word	0x00008651

00008d14 <sysclk_disable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be disabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
    8d14:	b580      	push	{r7, lr}
    8d16:	b082      	sub	sp, #8
    8d18:	af00      	add	r7, sp, #0
    8d1a:	6078      	str	r0, [r7, #4]
	switch ((uintptr_t)module) {
    8d1c:	687b      	ldr	r3, [r7, #4]
    8d1e:	4aa7      	ldr	r2, [pc, #668]	; (8fbc <sysclk_disable_peripheral_clock+0x2a8>)
    8d20:	4293      	cmp	r3, r2
    8d22:	f000 8134 	beq.w	8f8e <sysclk_disable_peripheral_clock+0x27a>
    8d26:	4aa5      	ldr	r2, [pc, #660]	; (8fbc <sysclk_disable_peripheral_clock+0x2a8>)
    8d28:	4293      	cmp	r3, r2
    8d2a:	d86c      	bhi.n	8e06 <sysclk_disable_peripheral_clock+0xf2>
    8d2c:	4aa4      	ldr	r2, [pc, #656]	; (8fc0 <sysclk_disable_peripheral_clock+0x2ac>)
    8d2e:	4293      	cmp	r3, r2
    8d30:	f000 8101 	beq.w	8f36 <sysclk_disable_peripheral_clock+0x222>
    8d34:	4aa2      	ldr	r2, [pc, #648]	; (8fc0 <sysclk_disable_peripheral_clock+0x2ac>)
    8d36:	4293      	cmp	r3, r2
    8d38:	d830      	bhi.n	8d9c <sysclk_disable_peripheral_clock+0x88>
    8d3a:	4aa2      	ldr	r2, [pc, #648]	; (8fc4 <sysclk_disable_peripheral_clock+0x2b0>)
    8d3c:	4293      	cmp	r3, r2
    8d3e:	f000 80e6 	beq.w	8f0e <sysclk_disable_peripheral_clock+0x1fa>
    8d42:	4aa0      	ldr	r2, [pc, #640]	; (8fc4 <sysclk_disable_peripheral_clock+0x2b0>)
    8d44:	4293      	cmp	r3, r2
    8d46:	d814      	bhi.n	8d72 <sysclk_disable_peripheral_clock+0x5e>
    8d48:	4a9f      	ldr	r2, [pc, #636]	; (8fc8 <sysclk_disable_peripheral_clock+0x2b4>)
    8d4a:	4293      	cmp	r3, r2
    8d4c:	f000 80d3 	beq.w	8ef6 <sysclk_disable_peripheral_clock+0x1e2>
    8d50:	4a9d      	ldr	r2, [pc, #628]	; (8fc8 <sysclk_disable_peripheral_clock+0x2b4>)
    8d52:	4293      	cmp	r3, r2
    8d54:	d804      	bhi.n	8d60 <sysclk_disable_peripheral_clock+0x4c>
    8d56:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    8d5a:	f000 80c8 	beq.w	8eee <sysclk_disable_peripheral_clock+0x1da>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
		break;

	default:
		Assert(false);
		return;
    8d5e:	e1d8      	b.n	9112 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    8d60:	4a9a      	ldr	r2, [pc, #616]	; (8fcc <sysclk_disable_peripheral_clock+0x2b8>)
    8d62:	4293      	cmp	r3, r2
    8d64:	f000 80cb 	beq.w	8efe <sysclk_disable_peripheral_clock+0x1ea>
    8d68:	4a99      	ldr	r2, [pc, #612]	; (8fd0 <sysclk_disable_peripheral_clock+0x2bc>)
    8d6a:	4293      	cmp	r3, r2
    8d6c:	f000 80cb 	beq.w	8f06 <sysclk_disable_peripheral_clock+0x1f2>
		return;
    8d70:	e1cf      	b.n	9112 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    8d72:	4a98      	ldr	r2, [pc, #608]	; (8fd4 <sysclk_disable_peripheral_clock+0x2c0>)
    8d74:	4293      	cmp	r3, r2
    8d76:	f000 80d2 	beq.w	8f1e <sysclk_disable_peripheral_clock+0x20a>
    8d7a:	4a96      	ldr	r2, [pc, #600]	; (8fd4 <sysclk_disable_peripheral_clock+0x2c0>)
    8d7c:	4293      	cmp	r3, r2
    8d7e:	d804      	bhi.n	8d8a <sysclk_disable_peripheral_clock+0x76>
    8d80:	4a95      	ldr	r2, [pc, #596]	; (8fd8 <sysclk_disable_peripheral_clock+0x2c4>)
    8d82:	4293      	cmp	r3, r2
    8d84:	f000 80c7 	beq.w	8f16 <sysclk_disable_peripheral_clock+0x202>
		return;
    8d88:	e1c3      	b.n	9112 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    8d8a:	4a94      	ldr	r2, [pc, #592]	; (8fdc <sysclk_disable_peripheral_clock+0x2c8>)
    8d8c:	4293      	cmp	r3, r2
    8d8e:	f000 80ca 	beq.w	8f26 <sysclk_disable_peripheral_clock+0x212>
    8d92:	4a93      	ldr	r2, [pc, #588]	; (8fe0 <sysclk_disable_peripheral_clock+0x2cc>)
    8d94:	4293      	cmp	r3, r2
    8d96:	f000 80ca 	beq.w	8f2e <sysclk_disable_peripheral_clock+0x21a>
		return;
    8d9a:	e1ba      	b.n	9112 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    8d9c:	4a91      	ldr	r2, [pc, #580]	; (8fe4 <sysclk_disable_peripheral_clock+0x2d0>)
    8d9e:	4293      	cmp	r3, r2
    8da0:	f000 80dd 	beq.w	8f5e <sysclk_disable_peripheral_clock+0x24a>
    8da4:	4a8f      	ldr	r2, [pc, #572]	; (8fe4 <sysclk_disable_peripheral_clock+0x2d0>)
    8da6:	4293      	cmp	r3, r2
    8da8:	d814      	bhi.n	8dd4 <sysclk_disable_peripheral_clock+0xc0>
    8daa:	4a8f      	ldr	r2, [pc, #572]	; (8fe8 <sysclk_disable_peripheral_clock+0x2d4>)
    8dac:	4293      	cmp	r3, r2
    8dae:	f000 80ca 	beq.w	8f46 <sysclk_disable_peripheral_clock+0x232>
    8db2:	4a8d      	ldr	r2, [pc, #564]	; (8fe8 <sysclk_disable_peripheral_clock+0x2d4>)
    8db4:	4293      	cmp	r3, r2
    8db6:	d804      	bhi.n	8dc2 <sysclk_disable_peripheral_clock+0xae>
    8db8:	4a8c      	ldr	r2, [pc, #560]	; (8fec <sysclk_disable_peripheral_clock+0x2d8>)
    8dba:	4293      	cmp	r3, r2
    8dbc:	f000 80bf 	beq.w	8f3e <sysclk_disable_peripheral_clock+0x22a>
		return;
    8dc0:	e1a7      	b.n	9112 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    8dc2:	4a8b      	ldr	r2, [pc, #556]	; (8ff0 <sysclk_disable_peripheral_clock+0x2dc>)
    8dc4:	4293      	cmp	r3, r2
    8dc6:	f000 80c2 	beq.w	8f4e <sysclk_disable_peripheral_clock+0x23a>
    8dca:	4a8a      	ldr	r2, [pc, #552]	; (8ff4 <sysclk_disable_peripheral_clock+0x2e0>)
    8dcc:	4293      	cmp	r3, r2
    8dce:	f000 80c2 	beq.w	8f56 <sysclk_disable_peripheral_clock+0x242>
		return;
    8dd2:	e19e      	b.n	9112 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    8dd4:	4a88      	ldr	r2, [pc, #544]	; (8ff8 <sysclk_disable_peripheral_clock+0x2e4>)
    8dd6:	4293      	cmp	r3, r2
    8dd8:	f000 80cd 	beq.w	8f76 <sysclk_disable_peripheral_clock+0x262>
    8ddc:	4a86      	ldr	r2, [pc, #536]	; (8ff8 <sysclk_disable_peripheral_clock+0x2e4>)
    8dde:	4293      	cmp	r3, r2
    8de0:	d808      	bhi.n	8df4 <sysclk_disable_peripheral_clock+0xe0>
    8de2:	4a86      	ldr	r2, [pc, #536]	; (8ffc <sysclk_disable_peripheral_clock+0x2e8>)
    8de4:	4293      	cmp	r3, r2
    8de6:	f000 80be 	beq.w	8f66 <sysclk_disable_peripheral_clock+0x252>
    8dea:	4a85      	ldr	r2, [pc, #532]	; (9000 <sysclk_disable_peripheral_clock+0x2ec>)
    8dec:	4293      	cmp	r3, r2
    8dee:	f000 80be 	beq.w	8f6e <sysclk_disable_peripheral_clock+0x25a>
		return;
    8df2:	e18e      	b.n	9112 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    8df4:	4a83      	ldr	r2, [pc, #524]	; (9004 <sysclk_disable_peripheral_clock+0x2f0>)
    8df6:	4293      	cmp	r3, r2
    8df8:	f000 80c1 	beq.w	8f7e <sysclk_disable_peripheral_clock+0x26a>
    8dfc:	4a82      	ldr	r2, [pc, #520]	; (9008 <sysclk_disable_peripheral_clock+0x2f4>)
    8dfe:	4293      	cmp	r3, r2
    8e00:	f000 80c1 	beq.w	8f86 <sysclk_disable_peripheral_clock+0x272>
		return;
    8e04:	e185      	b.n	9112 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    8e06:	4a81      	ldr	r2, [pc, #516]	; (900c <sysclk_disable_peripheral_clock+0x2f8>)
    8e08:	4293      	cmp	r3, r2
    8e0a:	f000 814c 	beq.w	90a6 <sysclk_disable_peripheral_clock+0x392>
    8e0e:	4a7f      	ldr	r2, [pc, #508]	; (900c <sysclk_disable_peripheral_clock+0x2f8>)
    8e10:	4293      	cmp	r3, r2
    8e12:	d833      	bhi.n	8e7c <sysclk_disable_peripheral_clock+0x168>
    8e14:	4a7e      	ldr	r2, [pc, #504]	; (9010 <sysclk_disable_peripheral_clock+0x2fc>)
    8e16:	4293      	cmp	r3, r2
    8e18:	f000 8128 	beq.w	906c <sysclk_disable_peripheral_clock+0x358>
    8e1c:	4a7c      	ldr	r2, [pc, #496]	; (9010 <sysclk_disable_peripheral_clock+0x2fc>)
    8e1e:	4293      	cmp	r3, r2
    8e20:	d814      	bhi.n	8e4c <sysclk_disable_peripheral_clock+0x138>
    8e22:	4a7c      	ldr	r2, [pc, #496]	; (9014 <sysclk_disable_peripheral_clock+0x300>)
    8e24:	4293      	cmp	r3, r2
    8e26:	f000 80ba 	beq.w	8f9e <sysclk_disable_peripheral_clock+0x28a>
    8e2a:	4a7a      	ldr	r2, [pc, #488]	; (9014 <sysclk_disable_peripheral_clock+0x300>)
    8e2c:	4293      	cmp	r3, r2
    8e2e:	d804      	bhi.n	8e3a <sysclk_disable_peripheral_clock+0x126>
    8e30:	4a79      	ldr	r2, [pc, #484]	; (9018 <sysclk_disable_peripheral_clock+0x304>)
    8e32:	4293      	cmp	r3, r2
    8e34:	f000 80af 	beq.w	8f96 <sysclk_disable_peripheral_clock+0x282>
		return;
    8e38:	e16b      	b.n	9112 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    8e3a:	4a78      	ldr	r2, [pc, #480]	; (901c <sysclk_disable_peripheral_clock+0x308>)
    8e3c:	4293      	cmp	r3, r2
    8e3e:	f000 80b2 	beq.w	8fa6 <sysclk_disable_peripheral_clock+0x292>
    8e42:	4a77      	ldr	r2, [pc, #476]	; (9020 <sysclk_disable_peripheral_clock+0x30c>)
    8e44:	4293      	cmp	r3, r2
    8e46:	f000 80b2 	beq.w	8fae <sysclk_disable_peripheral_clock+0x29a>
		return;
    8e4a:	e162      	b.n	9112 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    8e4c:	4a75      	ldr	r2, [pc, #468]	; (9024 <sysclk_disable_peripheral_clock+0x310>)
    8e4e:	4293      	cmp	r3, r2
    8e50:	f000 811e 	beq.w	9090 <sysclk_disable_peripheral_clock+0x37c>
    8e54:	4a73      	ldr	r2, [pc, #460]	; (9024 <sysclk_disable_peripheral_clock+0x310>)
    8e56:	4293      	cmp	r3, r2
    8e58:	d808      	bhi.n	8e6c <sysclk_disable_peripheral_clock+0x158>
    8e5a:	4a73      	ldr	r2, [pc, #460]	; (9028 <sysclk_disable_peripheral_clock+0x314>)
    8e5c:	4293      	cmp	r3, r2
    8e5e:	f000 8109 	beq.w	9074 <sysclk_disable_peripheral_clock+0x360>
    8e62:	4a72      	ldr	r2, [pc, #456]	; (902c <sysclk_disable_peripheral_clock+0x318>)
    8e64:	4293      	cmp	r3, r2
    8e66:	f000 810c 	beq.w	9082 <sysclk_disable_peripheral_clock+0x36e>
		return;
    8e6a:	e152      	b.n	9112 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    8e6c:	4a70      	ldr	r2, [pc, #448]	; (9030 <sysclk_disable_peripheral_clock+0x31c>)
    8e6e:	4293      	cmp	r3, r2
    8e70:	f000 8115 	beq.w	909e <sysclk_disable_peripheral_clock+0x38a>
    8e74:	4a6f      	ldr	r2, [pc, #444]	; (9034 <sysclk_disable_peripheral_clock+0x320>)
    8e76:	4293      	cmp	r3, r2
    8e78:	d035      	beq.n	8ee6 <sysclk_disable_peripheral_clock+0x1d2>
		return;
    8e7a:	e14a      	b.n	9112 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    8e7c:	4a6e      	ldr	r2, [pc, #440]	; (9038 <sysclk_disable_peripheral_clock+0x324>)
    8e7e:	4293      	cmp	r3, r2
    8e80:	f000 8125 	beq.w	90ce <sysclk_disable_peripheral_clock+0x3ba>
    8e84:	4a6c      	ldr	r2, [pc, #432]	; (9038 <sysclk_disable_peripheral_clock+0x324>)
    8e86:	4293      	cmp	r3, r2
    8e88:	d814      	bhi.n	8eb4 <sysclk_disable_peripheral_clock+0x1a0>
    8e8a:	4a6c      	ldr	r2, [pc, #432]	; (903c <sysclk_disable_peripheral_clock+0x328>)
    8e8c:	4293      	cmp	r3, r2
    8e8e:	f000 8112 	beq.w	90b6 <sysclk_disable_peripheral_clock+0x3a2>
    8e92:	4a6a      	ldr	r2, [pc, #424]	; (903c <sysclk_disable_peripheral_clock+0x328>)
    8e94:	4293      	cmp	r3, r2
    8e96:	d804      	bhi.n	8ea2 <sysclk_disable_peripheral_clock+0x18e>
    8e98:	4a69      	ldr	r2, [pc, #420]	; (9040 <sysclk_disable_peripheral_clock+0x32c>)
    8e9a:	4293      	cmp	r3, r2
    8e9c:	f000 8107 	beq.w	90ae <sysclk_disable_peripheral_clock+0x39a>
		return;
    8ea0:	e137      	b.n	9112 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    8ea2:	4a68      	ldr	r2, [pc, #416]	; (9044 <sysclk_disable_peripheral_clock+0x330>)
    8ea4:	4293      	cmp	r3, r2
    8ea6:	f000 810a 	beq.w	90be <sysclk_disable_peripheral_clock+0x3aa>
    8eaa:	4a67      	ldr	r2, [pc, #412]	; (9048 <sysclk_disable_peripheral_clock+0x334>)
    8eac:	4293      	cmp	r3, r2
    8eae:	f000 810a 	beq.w	90c6 <sysclk_disable_peripheral_clock+0x3b2>
		return;
    8eb2:	e12e      	b.n	9112 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    8eb4:	4a65      	ldr	r2, [pc, #404]	; (904c <sysclk_disable_peripheral_clock+0x338>)
    8eb6:	4293      	cmp	r3, r2
    8eb8:	f000 8115 	beq.w	90e6 <sysclk_disable_peripheral_clock+0x3d2>
    8ebc:	4a63      	ldr	r2, [pc, #396]	; (904c <sysclk_disable_peripheral_clock+0x338>)
    8ebe:	4293      	cmp	r3, r2
    8ec0:	d808      	bhi.n	8ed4 <sysclk_disable_peripheral_clock+0x1c0>
    8ec2:	4a63      	ldr	r2, [pc, #396]	; (9050 <sysclk_disable_peripheral_clock+0x33c>)
    8ec4:	4293      	cmp	r3, r2
    8ec6:	f000 8106 	beq.w	90d6 <sysclk_disable_peripheral_clock+0x3c2>
    8eca:	4a62      	ldr	r2, [pc, #392]	; (9054 <sysclk_disable_peripheral_clock+0x340>)
    8ecc:	4293      	cmp	r3, r2
    8ece:	f000 8106 	beq.w	90de <sysclk_disable_peripheral_clock+0x3ca>
		return;
    8ed2:	e11e      	b.n	9112 <sysclk_disable_peripheral_clock+0x3fe>
	switch ((uintptr_t)module) {
    8ed4:	4a60      	ldr	r2, [pc, #384]	; (9058 <sysclk_disable_peripheral_clock+0x344>)
    8ed6:	4293      	cmp	r3, r2
    8ed8:	f000 8109 	beq.w	90ee <sysclk_disable_peripheral_clock+0x3da>
    8edc:	4a5f      	ldr	r2, [pc, #380]	; (905c <sysclk_disable_peripheral_clock+0x348>)
    8ede:	4293      	cmp	r3, r2
    8ee0:	f000 8109 	beq.w	90f6 <sysclk_disable_peripheral_clock+0x3e2>
		return;
    8ee4:	e115      	b.n	9112 <sysclk_disable_peripheral_clock+0x3fe>
		sysclk_disable_hsb_module(SYSCLK_AESA_HSB);
    8ee6:	2009      	movs	r0, #9
    8ee8:	4b5d      	ldr	r3, [pc, #372]	; (9060 <sysclk_disable_peripheral_clock+0x34c>)
    8eea:	4798      	blx	r3
		break;
    8eec:	e107      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_IISC);
    8eee:	2000      	movs	r0, #0
    8ef0:	4b5c      	ldr	r3, [pc, #368]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8ef2:	4798      	blx	r3
		break;
    8ef4:	e103      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_SPI);
    8ef6:	2001      	movs	r0, #1
    8ef8:	4b5a      	ldr	r3, [pc, #360]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8efa:	4798      	blx	r3
		break;
    8efc:	e0ff      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TC0);
    8efe:	2002      	movs	r0, #2
    8f00:	4b58      	ldr	r3, [pc, #352]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8f02:	4798      	blx	r3
		break;
    8f04:	e0fb      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TC1);
    8f06:	2003      	movs	r0, #3
    8f08:	4b56      	ldr	r3, [pc, #344]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8f0a:	4798      	blx	r3
		break;
    8f0c:	e0f7      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TWIM0);
    8f0e:	2004      	movs	r0, #4
    8f10:	4b54      	ldr	r3, [pc, #336]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8f12:	4798      	blx	r3
		break;
    8f14:	e0f3      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TWIS0);
    8f16:	2005      	movs	r0, #5
    8f18:	4b52      	ldr	r3, [pc, #328]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8f1a:	4798      	blx	r3
		break;
    8f1c:	e0ef      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TWIM1);
    8f1e:	2006      	movs	r0, #6
    8f20:	4b50      	ldr	r3, [pc, #320]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8f22:	4798      	blx	r3
		break;
    8f24:	e0eb      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TWIS1);
    8f26:	2007      	movs	r0, #7
    8f28:	4b4e      	ldr	r3, [pc, #312]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8f2a:	4798      	blx	r3
		break;
    8f2c:	e0e7      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_USART0);
    8f2e:	2008      	movs	r0, #8
    8f30:	4b4c      	ldr	r3, [pc, #304]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8f32:	4798      	blx	r3
		break;
    8f34:	e0e3      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_USART1);
    8f36:	2009      	movs	r0, #9
    8f38:	4b4a      	ldr	r3, [pc, #296]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8f3a:	4798      	blx	r3
		break;
    8f3c:	e0df      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_USART2);
    8f3e:	200a      	movs	r0, #10
    8f40:	4b48      	ldr	r3, [pc, #288]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8f42:	4798      	blx	r3
		break;
    8f44:	e0db      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_USART3);
    8f46:	200b      	movs	r0, #11
    8f48:	4b46      	ldr	r3, [pc, #280]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8f4a:	4798      	blx	r3
		break;
    8f4c:	e0d7      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_ADCIFE);
    8f4e:	200c      	movs	r0, #12
    8f50:	4b44      	ldr	r3, [pc, #272]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8f52:	4798      	blx	r3
		break;
    8f54:	e0d3      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_DACC);
    8f56:	200d      	movs	r0, #13
    8f58:	4b42      	ldr	r3, [pc, #264]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8f5a:	4798      	blx	r3
		break;
    8f5c:	e0cf      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_ACIFC);
    8f5e:	200e      	movs	r0, #14
    8f60:	4b40      	ldr	r3, [pc, #256]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8f62:	4798      	blx	r3
		break;
    8f64:	e0cb      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_GLOC);
    8f66:	200f      	movs	r0, #15
    8f68:	4b3e      	ldr	r3, [pc, #248]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8f6a:	4798      	blx	r3
		break;
    8f6c:	e0c7      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_ABDACB);
    8f6e:	2010      	movs	r0, #16
    8f70:	4b3c      	ldr	r3, [pc, #240]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8f72:	4798      	blx	r3
		break;
    8f74:	e0c3      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TRNG);
    8f76:	2011      	movs	r0, #17
    8f78:	4b3a      	ldr	r3, [pc, #232]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8f7a:	4798      	blx	r3
		break;
    8f7c:	e0bf      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_PARC);
    8f7e:	2012      	movs	r0, #18
    8f80:	4b38      	ldr	r3, [pc, #224]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8f82:	4798      	blx	r3
		break;
    8f84:	e0bb      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_CATB);
    8f86:	2013      	movs	r0, #19
    8f88:	4b36      	ldr	r3, [pc, #216]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8f8a:	4798      	blx	r3
		break;
    8f8c:	e0b7      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TWIM2);
    8f8e:	2015      	movs	r0, #21
    8f90:	4b34      	ldr	r3, [pc, #208]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8f92:	4798      	blx	r3
		break;
    8f94:	e0b3      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_TWIM3);
    8f96:	2016      	movs	r0, #22
    8f98:	4b32      	ldr	r3, [pc, #200]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8f9a:	4798      	blx	r3
		break;
    8f9c:	e0af      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pba_module(SYSCLK_LCDCA);
    8f9e:	2017      	movs	r0, #23
    8fa0:	4b30      	ldr	r3, [pc, #192]	; (9064 <sysclk_disable_peripheral_clock+0x350>)
    8fa2:	4798      	blx	r3
		break;
    8fa4:	e0ab      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbb_module(SYSCLK_HFLASHC_REGS);
    8fa6:	2000      	movs	r0, #0
    8fa8:	4b2f      	ldr	r3, [pc, #188]	; (9068 <sysclk_disable_peripheral_clock+0x354>)
    8faa:	4798      	blx	r3
		break;
    8fac:	e0a7      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_hsb_module(SYSCLK_HRAMC1_DATA);
    8fae:	2002      	movs	r0, #2
    8fb0:	4b2b      	ldr	r3, [pc, #172]	; (9060 <sysclk_disable_peripheral_clock+0x34c>)
    8fb2:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_HRAMC1_REGS);
    8fb4:	2001      	movs	r0, #1
    8fb6:	4b2c      	ldr	r3, [pc, #176]	; (9068 <sysclk_disable_peripheral_clock+0x354>)
    8fb8:	4798      	blx	r3
		break;
    8fba:	e0a0      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
    8fbc:	40078000 	.word	0x40078000
    8fc0:	40028000 	.word	0x40028000
    8fc4:	40018000 	.word	0x40018000
    8fc8:	40008000 	.word	0x40008000
    8fcc:	40010000 	.word	0x40010000
    8fd0:	40014000 	.word	0x40014000
    8fd4:	4001c000 	.word	0x4001c000
    8fd8:	40018400 	.word	0x40018400
    8fdc:	4001c400 	.word	0x4001c400
    8fe0:	40024000 	.word	0x40024000
    8fe4:	40040000 	.word	0x40040000
    8fe8:	40030000 	.word	0x40030000
    8fec:	4002c000 	.word	0x4002c000
    8ff0:	40038000 	.word	0x40038000
    8ff4:	4003c000 	.word	0x4003c000
    8ff8:	40068000 	.word	0x40068000
    8ffc:	40060000 	.word	0x40060000
    9000:	40064000 	.word	0x40064000
    9004:	4006c000 	.word	0x4006c000
    9008:	40070000 	.word	0x40070000
    900c:	400e0000 	.word	0x400e0000
    9010:	400a1000 	.word	0x400a1000
    9014:	40080000 	.word	0x40080000
    9018:	4007c000 	.word	0x4007c000
    901c:	400a0000 	.word	0x400a0000
    9020:	400a0400 	.word	0x400a0400
    9024:	400a5000 	.word	0x400a5000
    9028:	400a2000 	.word	0x400a2000
    902c:	400a4000 	.word	0x400a4000
    9030:	400a6000 	.word	0x400a6000
    9034:	400b0000 	.word	0x400b0000
    9038:	400f0000 	.word	0x400f0000
    903c:	400e0800 	.word	0x400e0800
    9040:	400e0400 	.word	0x400e0400
    9044:	400e0c00 	.word	0x400e0c00
    9048:	400e1000 	.word	0x400e1000
    904c:	400f0c00 	.word	0x400f0c00
    9050:	400f0400 	.word	0x400f0400
    9054:	400f0800 	.word	0x400f0800
    9058:	400f1000 	.word	0x400f1000
    905c:	400f1400 	.word	0x400f1400
    9060:	000085fd 	.word	0x000085fd
    9064:	0000880d 	.word	0x0000880d
    9068:	0000889d 	.word	0x0000889d
		sysclk_disable_pbb_module(SYSCLK_HMATRIX);
    906c:	2002      	movs	r0, #2
    906e:	4b2a      	ldr	r3, [pc, #168]	; (9118 <sysclk_disable_peripheral_clock+0x404>)
    9070:	4798      	blx	r3
		break;
    9072:	e044      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_hsb_module(SYSCLK_PDCA_HSB);
    9074:	2000      	movs	r0, #0
    9076:	4b29      	ldr	r3, [pc, #164]	; (911c <sysclk_disable_peripheral_clock+0x408>)
    9078:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_PDCA_PB);
    907a:	2003      	movs	r0, #3
    907c:	4b26      	ldr	r3, [pc, #152]	; (9118 <sysclk_disable_peripheral_clock+0x404>)
    907e:	4798      	blx	r3
		break;
    9080:	e03d      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_hsb_module(SYSCLK_CRCCU_DATA);
    9082:	2004      	movs	r0, #4
    9084:	4b25      	ldr	r3, [pc, #148]	; (911c <sysclk_disable_peripheral_clock+0x408>)
    9086:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_CRCCU_REGS);
    9088:	2004      	movs	r0, #4
    908a:	4b23      	ldr	r3, [pc, #140]	; (9118 <sysclk_disable_peripheral_clock+0x404>)
    908c:	4798      	blx	r3
		break;
    908e:	e036      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_hsb_module(SYSCLK_USBC_DATA);
    9090:	2003      	movs	r0, #3
    9092:	4b22      	ldr	r3, [pc, #136]	; (911c <sysclk_disable_peripheral_clock+0x408>)
    9094:	4798      	blx	r3
		sysclk_disable_pbb_module(SYSCLK_USBC_REGS);
    9096:	2005      	movs	r0, #5
    9098:	4b1f      	ldr	r3, [pc, #124]	; (9118 <sysclk_disable_peripheral_clock+0x404>)
    909a:	4798      	blx	r3
		break;
    909c:	e02f      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbb_module(SYSCLK_PEVC);
    909e:	2006      	movs	r0, #6
    90a0:	4b1d      	ldr	r3, [pc, #116]	; (9118 <sysclk_disable_peripheral_clock+0x404>)
    90a2:	4798      	blx	r3
		break;
    90a4:	e02b      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbc_module(SYSCLK_PM);
    90a6:	2000      	movs	r0, #0
    90a8:	4b1d      	ldr	r3, [pc, #116]	; (9120 <sysclk_disable_peripheral_clock+0x40c>)
    90aa:	4798      	blx	r3
		break;
    90ac:	e027      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbc_module(SYSCLK_CHIPID);
    90ae:	2001      	movs	r0, #1
    90b0:	4b1b      	ldr	r3, [pc, #108]	; (9120 <sysclk_disable_peripheral_clock+0x40c>)
    90b2:	4798      	blx	r3
		break;
    90b4:	e023      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbc_module(SYSCLK_SCIF);
    90b6:	2002      	movs	r0, #2
    90b8:	4b19      	ldr	r3, [pc, #100]	; (9120 <sysclk_disable_peripheral_clock+0x40c>)
    90ba:	4798      	blx	r3
		break;
    90bc:	e01f      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbc_module(SYSCLK_FREQM);
    90be:	2003      	movs	r0, #3
    90c0:	4b17      	ldr	r3, [pc, #92]	; (9120 <sysclk_disable_peripheral_clock+0x40c>)
    90c2:	4798      	blx	r3
		break;
    90c4:	e01b      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbc_module(SYSCLK_GPIO);
    90c6:	2004      	movs	r0, #4
    90c8:	4b15      	ldr	r3, [pc, #84]	; (9120 <sysclk_disable_peripheral_clock+0x40c>)
    90ca:	4798      	blx	r3
		break;
    90cc:	e017      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbd_module(SYSCLK_BPM);
    90ce:	2000      	movs	r0, #0
    90d0:	4b14      	ldr	r3, [pc, #80]	; (9124 <sysclk_disable_peripheral_clock+0x410>)
    90d2:	4798      	blx	r3
		break;
    90d4:	e013      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbd_module(SYSCLK_BSCIF);
    90d6:	2001      	movs	r0, #1
    90d8:	4b12      	ldr	r3, [pc, #72]	; (9124 <sysclk_disable_peripheral_clock+0x410>)
    90da:	4798      	blx	r3
		break;
    90dc:	e00f      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbd_module(SYSCLK_AST);
    90de:	2002      	movs	r0, #2
    90e0:	4b10      	ldr	r3, [pc, #64]	; (9124 <sysclk_disable_peripheral_clock+0x410>)
    90e2:	4798      	blx	r3
		break;
    90e4:	e00b      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbd_module(SYSCLK_WDT);
    90e6:	2003      	movs	r0, #3
    90e8:	4b0e      	ldr	r3, [pc, #56]	; (9124 <sysclk_disable_peripheral_clock+0x410>)
    90ea:	4798      	blx	r3
		break;
    90ec:	e007      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbd_module(SYSCLK_EIC);
    90ee:	2004      	movs	r0, #4
    90f0:	4b0c      	ldr	r3, [pc, #48]	; (9124 <sysclk_disable_peripheral_clock+0x410>)
    90f2:	4798      	blx	r3
		break;
    90f4:	e003      	b.n	90fe <sysclk_disable_peripheral_clock+0x3ea>
		sysclk_disable_pbd_module(SYSCLK_PICOUART);
    90f6:	2005      	movs	r0, #5
    90f8:	4b0a      	ldr	r3, [pc, #40]	; (9124 <sysclk_disable_peripheral_clock+0x410>)
    90fa:	4798      	blx	r3
		break;
    90fc:	bf00      	nop
							(1 << SYSCLK_TC1) | \
							(1 << SYSCLK_USART0) | \
							(1 << SYSCLK_USART1) | \
							(1 << SYSCLK_USART2) | \
							(1 << SYSCLK_USART3))
	if ((PM->PM_PBAMASK & PBADIV_CLKSRC_MASK) == 0) {
    90fe:	4b0a      	ldr	r3, [pc, #40]	; (9128 <sysclk_disable_peripheral_clock+0x414>)
    9100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9102:	f640 730c 	movw	r3, #3852	; 0xf0c
    9106:	4013      	ands	r3, r2
    9108:	2b00      	cmp	r3, #0
    910a:	d102      	bne.n	9112 <sysclk_disable_peripheral_clock+0x3fe>
		sysclk_disable_pba_divmask(PBA_DIVMASK_Msk);
    910c:	207f      	movs	r0, #127	; 0x7f
    910e:	4b07      	ldr	r3, [pc, #28]	; (912c <sysclk_disable_peripheral_clock+0x418>)
    9110:	4798      	blx	r3
	}
}
    9112:	3708      	adds	r7, #8
    9114:	46bd      	mov	sp, r7
    9116:	bd80      	pop	{r7, pc}
    9118:	0000889d 	.word	0x0000889d
    911c:	000085fd 	.word	0x000085fd
    9120:	00008635 	.word	0x00008635
    9124:	0000866d 	.word	0x0000866d
    9128:	400e0000 	.word	0x400e0000
    912c:	000086bd 	.word	0x000086bd

00009130 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint32_t src)
{
    9130:	b580      	push	{r7, lr}
    9132:	b084      	sub	sp, #16
    9134:	af00      	add	r7, sp, #0
    9136:	6078      	str	r0, [r7, #4]
	irqflags_t flags;
	Assert(src <= SYSCLK_SRC_RC1M);

	flags = cpu_irq_save();
    9138:	4b08      	ldr	r3, [pc, #32]	; (915c <sysclk_set_source+0x2c>)
    913a:	4798      	blx	r3
    913c:	60f8      	str	r0, [r7, #12]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    913e:	4b08      	ldr	r3, [pc, #32]	; (9160 <sysclk_set_source+0x30>)
    9140:	f04f 422a 	mov.w	r2, #2852126720	; 0xaa000000
    9144:	659a      	str	r2, [r3, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_MCCTRL - (uint32_t)PM);
	PM->PM_MCCTRL = src;
    9146:	4a06      	ldr	r2, [pc, #24]	; (9160 <sysclk_set_source+0x30>)
    9148:	687b      	ldr	r3, [r7, #4]
    914a:	6013      	str	r3, [r2, #0]
	cpu_irq_restore(flags);
    914c:	68f8      	ldr	r0, [r7, #12]
    914e:	4b05      	ldr	r3, [pc, #20]	; (9164 <sysclk_set_source+0x34>)
    9150:	4798      	blx	r3
}
    9152:	bf00      	nop
    9154:	3710      	adds	r7, #16
    9156:	46bd      	mov	sp, r7
    9158:	bd80      	pop	{r7, pc}
    915a:	bf00      	nop
    915c:	000083c5 	.word	0x000083c5
    9160:	400e0000 	.word	0x400e0000
    9164:	0000841d 	.word	0x0000841d

00009168 <sysclk_init>:
   genclk_disable(7);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
    9168:	b580      	push	{r7, lr}
    916a:	b086      	sub	sp, #24
    916c:	af00      	add	r7, sp, #0
	uint32_t ps_value = 0;
    916e:	2300      	movs	r3, #0
    9170:	617b      	str	r3, [r7, #20]
	bool is_fwu_enabled = false;
    9172:	2300      	movs	r3, #0
    9174:	74fb      	strb	r3, [r7, #19]

#if CONFIG_HCACHE_ENABLE == 1
	/* Enable HCACHE */
	sysclk_enable_peripheral_clock(HCACHE);
    9176:	482c      	ldr	r0, [pc, #176]	; (9228 <sysclk_init+0xc0>)
    9178:	4b2c      	ldr	r3, [pc, #176]	; (922c <sysclk_init+0xc4>)
    917a:	4798      	blx	r3
	HCACHE->HCACHE_CTRL = HCACHE_CTRL_CEN_YES;
    917c:	4b2a      	ldr	r3, [pc, #168]	; (9228 <sysclk_init+0xc0>)
    917e:	2201      	movs	r2, #1
    9180:	609a      	str	r2, [r3, #8]
	while (!(HCACHE->HCACHE_SR & HCACHE_SR_CSTS_EN));
    9182:	bf00      	nop
    9184:	4b28      	ldr	r3, [pc, #160]	; (9228 <sysclk_init+0xc0>)
    9186:	68db      	ldr	r3, [r3, #12]
    9188:	f003 0301 	and.w	r3, r3, #1
    918c:	2b00      	cmp	r3, #0
    918e:	d0f9      	beq.n	9184 <sysclk_init+0x1c>
#elif (defined(CONFIG_PLL0_MUL) || defined(CONFIG_DFLL0_MUL) ||	defined(CONFIG_USBCLK_DIV))
	/* USB/DFLL/PLL are not available in PS1 (BPM.PMCON.PS=1) mode */
	ps_value = BPM_PS_0;
	is_fwu_enabled = false;
#else
	if (sysclk_get_cpu_hz() <= FLASH_FREQ_PS1_FWS_1_MAX_FREQ) {
    9190:	4b27      	ldr	r3, [pc, #156]	; (9230 <sysclk_init+0xc8>)
    9192:	4798      	blx	r3
    9194:	4602      	mov	r2, r0
    9196:	4b27      	ldr	r3, [pc, #156]	; (9234 <sysclk_init+0xcc>)
    9198:	429a      	cmp	r2, r3
    919a:	d80d      	bhi.n	91b8 <sysclk_init+0x50>
		ps_value = BPM_PS_1;
    919c:	2301      	movs	r3, #1
    919e:	617b      	str	r3, [r7, #20]
		if (sysclk_get_cpu_hz() > FLASH_FREQ_PS1_FWS_0_MAX_FREQ) {
    91a0:	4b23      	ldr	r3, [pc, #140]	; (9230 <sysclk_init+0xc8>)
    91a2:	4798      	blx	r3
    91a4:	4602      	mov	r2, r0
    91a6:	4b24      	ldr	r3, [pc, #144]	; (9238 <sysclk_init+0xd0>)
    91a8:	429a      	cmp	r2, r3
    91aa:	d907      	bls.n	91bc <sysclk_init+0x54>
			bpm_enable_fast_wakeup(BPM);
    91ac:	4823      	ldr	r0, [pc, #140]	; (923c <sysclk_init+0xd4>)
    91ae:	4b24      	ldr	r3, [pc, #144]	; (9240 <sysclk_init+0xd8>)
    91b0:	4798      	blx	r3
			is_fwu_enabled = true;
    91b2:	2301      	movs	r3, #1
    91b4:	74fb      	strb	r3, [r7, #19]
    91b6:	e001      	b.n	91bc <sysclk_init+0x54>
		}
	} else {
		ps_value = BPM_PS_0;
    91b8:	2300      	movs	r3, #0
    91ba:	617b      	str	r3, [r7, #20]
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz(), ps_value, is_fwu_enabled);
		sysclk_set_source(SYSCLK_SRC_RC80M);
	}
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_RCFAST) {
		osc_enable(OSC_ID_RCFAST);
    91bc:	2004      	movs	r0, #4
    91be:	4b21      	ldr	r3, [pc, #132]	; (9244 <sysclk_init+0xdc>)
    91c0:	4798      	blx	r3
		osc_wait_ready(OSC_ID_RCFAST);
    91c2:	2004      	movs	r0, #4
    91c4:	4b20      	ldr	r3, [pc, #128]	; (9248 <sysclk_init+0xe0>)
    91c6:	4798      	blx	r3
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz(), ps_value, is_fwu_enabled);
    91c8:	4b19      	ldr	r3, [pc, #100]	; (9230 <sysclk_init+0xc8>)
    91ca:	4798      	blx	r3
    91cc:	7cfb      	ldrb	r3, [r7, #19]
    91ce:	461a      	mov	r2, r3
    91d0:	6979      	ldr	r1, [r7, #20]
    91d2:	4b1e      	ldr	r3, [pc, #120]	; (924c <sysclk_init+0xe4>)
    91d4:	4798      	blx	r3
		sysclk_set_source(SYSCLK_SRC_RCFAST);
    91d6:	2005      	movs	r0, #5
    91d8:	4b1d      	ldr	r3, [pc, #116]	; (9250 <sysclk_init+0xe8>)
    91da:	4798      	blx	r3
    91dc:	4b17      	ldr	r3, [pc, #92]	; (923c <sysclk_init+0xd4>)
    91de:	60bb      	str	r3, [r7, #8]
    91e0:	697b      	ldr	r3, [r7, #20]
    91e2:	607b      	str	r3, [r7, #4]
    91e4:	2301      	movs	r3, #1
    91e6:	603b      	str	r3, [r7, #0]
 * \return true if no error.
 */
__always_inline static
bool bpm_configure_power_scaling(Bpm *bpm, uint32_t ps_value, uint32_t no_halt)
{
	if (!no_halt) {
    91e8:	683b      	ldr	r3, [r7, #0]
    91ea:	2b00      	cmp	r3, #0
    91ec:	d104      	bne.n	91f8 <sysclk_init+0x90>
		bpm_power_scaling_cpu(bpm, ps_value);
    91ee:	6879      	ldr	r1, [r7, #4]
    91f0:	68b8      	ldr	r0, [r7, #8]
    91f2:	4b18      	ldr	r3, [pc, #96]	; (9254 <sysclk_init+0xec>)
    91f4:	4798      	blx	r3
    91f6:	e004      	b.n	9202 <sysclk_init+0x9a>
		return true;
	}

	return bpm_power_scaling_cpu_failsafe(bpm, ps_value, 240000);
    91f8:	4a17      	ldr	r2, [pc, #92]	; (9258 <sysclk_init+0xf0>)
    91fa:	6879      	ldr	r1, [r7, #4]
    91fc:	68b8      	ldr	r0, [r7, #8]
    91fe:	4b17      	ldr	r3, [pc, #92]	; (925c <sysclk_init+0xf4>)
    9200:	4798      	blx	r3
		Assert(false);
	}

	/* Automatically switch to low power mode */
	bpm_configure_power_scaling(BPM, ps_value, BPM_PSCM_CPU_NOT_HALT);
	while ((bpm_get_status(BPM) & BPM_SR_PSOK) == 0);
    9202:	bf00      	nop
    9204:	480d      	ldr	r0, [pc, #52]	; (923c <sysclk_init+0xd4>)
    9206:	4b16      	ldr	r3, [pc, #88]	; (9260 <sysclk_init+0xf8>)
    9208:	4798      	blx	r3
    920a:	4603      	mov	r3, r0
    920c:	f003 0301 	and.w	r3, r3, #1
    9210:	2b00      	cmp	r3, #0
    9212:	d0f7      	beq.n	9204 <sysclk_init+0x9c>

	/* If the user has specified clock masks, enable only requested clocks */
	irqflags_t const flags = cpu_irq_save();
    9214:	4b13      	ldr	r3, [pc, #76]	; (9264 <sysclk_init+0xfc>)
    9216:	4798      	blx	r3
    9218:	60f8      	str	r0, [r7, #12]
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBDMASK - (uint32_t)PM);
	PM->PM_PBDMASK = SYSCLK_INIT_MINIMAL_PBDMASK | CONFIG_SYSCLK_INIT_PBDMASK;
#endif

	cpu_irq_restore(flags);
    921a:	68f8      	ldr	r0, [r7, #12]
    921c:	4b12      	ldr	r3, [pc, #72]	; (9268 <sysclk_init+0x100>)
    921e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
    9220:	bf00      	nop
    9222:	3718      	adds	r7, #24
    9224:	46bd      	mov	sp, r7
    9226:	bd80      	pop	{r7, pc}
    9228:	400a0400 	.word	0x400a0400
    922c:	000088e5 	.word	0x000088e5
    9230:	000085cd 	.word	0x000085cd
    9234:	00b71b00 	.word	0x00b71b00
    9238:	007a1200 	.word	0x007a1200
    923c:	400f0000 	.word	0x400f0000
    9240:	00009cfd 	.word	0x00009cfd
    9244:	0000844d 	.word	0x0000844d
    9248:	0000858d 	.word	0x0000858d
    924c:	00009dbd 	.word	0x00009dbd
    9250:	00009131 	.word	0x00009131
    9254:	00009ca5 	.word	0x00009ca5
    9258:	0003a980 	.word	0x0003a980
    925c:	00009c01 	.word	0x00009c01
    9260:	00009d75 	.word	0x00009d75
    9264:	000083c5 	.word	0x000083c5
    9268:	0000841d 	.word	0x0000841d

0000926c <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
    926c:	b580      	push	{r7, lr}
    926e:	af00      	add	r7, sp, #0
	return 1U << (pin & 0x1F);
}

__always_inline static void arch_ioport_init(void)
{
	sysclk_enable_peripheral_clock(GPIO);
    9270:	4802      	ldr	r0, [pc, #8]	; (927c <ioport_init+0x10>)
    9272:	4b03      	ldr	r3, [pc, #12]	; (9280 <ioport_init+0x14>)
    9274:	4798      	blx	r3
	arch_ioport_init();
}
    9276:	bf00      	nop
    9278:	bd80      	pop	{r7, pc}
    927a:	bf00      	nop
    927c:	400e1000 	.word	0x400e1000
    9280:	000088e5 	.word	0x000088e5

00009284 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
    9284:	b480      	push	{r7}
    9286:	b08d      	sub	sp, #52	; 0x34
    9288:	af00      	add	r7, sp, #0
    928a:	6078      	str	r0, [r7, #4]
    928c:	6039      	str	r1, [r7, #0]
    928e:	687b      	ldr	r3, [r7, #4]
    9290:	62fb      	str	r3, [r7, #44]	; 0x2c
    9292:	683b      	ldr	r3, [r7, #0]
    9294:	62bb      	str	r3, [r7, #40]	; 0x28
    9296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9298:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
    929a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    929c:	095a      	lsrs	r2, r3, #5
    929e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    92a0:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
    92a2:	6a3b      	ldr	r3, [r7, #32]
    92a4:	f003 031f 	and.w	r3, r3, #31
    92a8:	2101      	movs	r1, #1
    92aa:	fa01 f303 	lsl.w	r3, r1, r3
    92ae:	61fa      	str	r2, [r7, #28]
    92b0:	61bb      	str	r3, [r7, #24]
    92b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    92b4:	617b      	str	r3, [r7, #20]
    92b6:	69fb      	ldr	r3, [r7, #28]
    92b8:	613b      	str	r3, [r7, #16]
		+ port * sizeof(GpioPort));
    92ba:	693b      	ldr	r3, [r7, #16]
    92bc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    92c0:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    92c4:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);
    92c6:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
    92c8:	697b      	ldr	r3, [r7, #20]
    92ca:	f003 0308 	and.w	r3, r3, #8
    92ce:	2b00      	cmp	r3, #0
    92d0:	d003      	beq.n	92da <ioport_set_pin_mode+0x56>
		base->GPIO_PUERS = mask;
    92d2:	68fb      	ldr	r3, [r7, #12]
    92d4:	69ba      	ldr	r2, [r7, #24]
    92d6:	675a      	str	r2, [r3, #116]	; 0x74
    92d8:	e002      	b.n	92e0 <ioport_set_pin_mode+0x5c>
	} else {
		base->GPIO_PUERC = mask;
    92da:	68fb      	ldr	r3, [r7, #12]
    92dc:	69ba      	ldr	r2, [r7, #24]
    92de:	679a      	str	r2, [r3, #120]	; 0x78
	}

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
    92e0:	697b      	ldr	r3, [r7, #20]
    92e2:	f003 0310 	and.w	r3, r3, #16
    92e6:	2b00      	cmp	r3, #0
    92e8:	d004      	beq.n	92f4 <ioport_set_pin_mode+0x70>
		base->GPIO_PDERS = mask;
    92ea:	68fb      	ldr	r3, [r7, #12]
    92ec:	69ba      	ldr	r2, [r7, #24]
    92ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    92f2:	e003      	b.n	92fc <ioport_set_pin_mode+0x78>
	} else {
		base->GPIO_PDERC = mask;
    92f4:	68fb      	ldr	r3, [r7, #12]
    92f6:	69ba      	ldr	r2, [r7, #24]
    92f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
    92fc:	697b      	ldr	r3, [r7, #20]
    92fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9302:	2b00      	cmp	r3, #0
    9304:	d004      	beq.n	9310 <ioport_set_pin_mode+0x8c>
		base->GPIO_GFERS = mask;
    9306:	68fb      	ldr	r3, [r7, #12]
    9308:	69ba      	ldr	r2, [r7, #24]
    930a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    930e:	e003      	b.n	9318 <ioport_set_pin_mode+0x94>
	} else {
		base->GPIO_GFERC = mask;
    9310:	68fb      	ldr	r3, [r7, #12]
    9312:	69ba      	ldr	r2, [r7, #24]
    9314:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	}

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
    9318:	697b      	ldr	r3, [r7, #20]
    931a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    931e:	2b00      	cmp	r3, #0
    9320:	d004      	beq.n	932c <ioport_set_pin_mode+0xa8>
		base->GPIO_ODCR0S = mask;
    9322:	68fb      	ldr	r3, [r7, #12]
    9324:	69ba      	ldr	r2, [r7, #24]
    9326:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    932a:	e003      	b.n	9334 <ioport_set_pin_mode+0xb0>
	} else {
		base->GPIO_ODCR0C = mask;
    932c:	68fb      	ldr	r3, [r7, #12]
    932e:	69ba      	ldr	r2, [r7, #24]
    9330:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
    9334:	697b      	ldr	r3, [r7, #20]
    9336:	f003 0301 	and.w	r3, r3, #1
    933a:	2b00      	cmp	r3, #0
    933c:	d003      	beq.n	9346 <ioport_set_pin_mode+0xc2>
		base->GPIO_PMR0S = mask;
    933e:	68fb      	ldr	r3, [r7, #12]
    9340:	69ba      	ldr	r2, [r7, #24]
    9342:	615a      	str	r2, [r3, #20]
    9344:	e002      	b.n	934c <ioport_set_pin_mode+0xc8>
	} else {
		base->GPIO_PMR0C = mask;
    9346:	68fb      	ldr	r3, [r7, #12]
    9348:	69ba      	ldr	r2, [r7, #24]
    934a:	619a      	str	r2, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
    934c:	697b      	ldr	r3, [r7, #20]
    934e:	f003 0302 	and.w	r3, r3, #2
    9352:	2b00      	cmp	r3, #0
    9354:	d003      	beq.n	935e <ioport_set_pin_mode+0xda>
		base->GPIO_PMR1S = mask;
    9356:	68fb      	ldr	r3, [r7, #12]
    9358:	69ba      	ldr	r2, [r7, #24]
    935a:	625a      	str	r2, [r3, #36]	; 0x24
    935c:	e002      	b.n	9364 <ioport_set_pin_mode+0xe0>
	} else {
		base->GPIO_PMR1C = mask;
    935e:	68fb      	ldr	r3, [r7, #12]
    9360:	69ba      	ldr	r2, [r7, #24]
    9362:	629a      	str	r2, [r3, #40]	; 0x28
	}

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
    9364:	697b      	ldr	r3, [r7, #20]
    9366:	f003 0304 	and.w	r3, r3, #4
    936a:	2b00      	cmp	r3, #0
    936c:	d003      	beq.n	9376 <ioport_set_pin_mode+0xf2>
		base->GPIO_PMR2S = mask;
    936e:	68fb      	ldr	r3, [r7, #12]
    9370:	69ba      	ldr	r2, [r7, #24]
    9372:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_mode(pin, mode);
}
    9374:	e002      	b.n	937c <ioport_set_pin_mode+0xf8>
	} else {
		base->GPIO_PMR2C = mask;
    9376:	68fb      	ldr	r3, [r7, #12]
    9378:	69ba      	ldr	r2, [r7, #24]
    937a:	639a      	str	r2, [r3, #56]	; 0x38
    937c:	bf00      	nop
    937e:	3734      	adds	r7, #52	; 0x34
    9380:	46bd      	mov	sp, r7
    9382:	bc80      	pop	{r7}
    9384:	4770      	bx	lr

00009386 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
    9386:	b480      	push	{r7}
    9388:	b095      	sub	sp, #84	; 0x54
    938a:	af00      	add	r7, sp, #0
    938c:	6078      	str	r0, [r7, #4]
    938e:	460b      	mov	r3, r1
    9390:	70fb      	strb	r3, [r7, #3]
    9392:	687b      	ldr	r3, [r7, #4]
    9394:	64fb      	str	r3, [r7, #76]	; 0x4c
    9396:	78fb      	ldrb	r3, [r7, #3]
    9398:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
    939c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    93a0:	2b01      	cmp	r3, #1
    93a2:	d12f      	bne.n	9404 <ioport_set_pin_dir+0x7e>
    93a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    93a6:	647b      	str	r3, [r7, #68]	; 0x44
    93a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    93aa:	643b      	str	r3, [r7, #64]	; 0x40
	return pin >> 5;
    93ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    93ae:	095b      	lsrs	r3, r3, #5
    93b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		+ port * sizeof(GpioPort));
    93b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    93b4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    93b8:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    93bc:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    93be:	4619      	mov	r1, r3
    93c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    93c2:	63bb      	str	r3, [r7, #56]	; 0x38
	return 1U << (pin & 0x1F);
    93c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    93c6:	f003 031f 	and.w	r3, r3, #31
    93ca:	2201      	movs	r2, #1
    93cc:	fa02 f303 	lsl.w	r3, r2, r3
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    93d0:	644b      	str	r3, [r1, #68]	; 0x44
    93d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    93d4:	637b      	str	r3, [r7, #52]	; 0x34
    93d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    93d8:	633b      	str	r3, [r7, #48]	; 0x30
	return pin >> 5;
    93da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    93dc:	095b      	lsrs	r3, r3, #5
    93de:	62fb      	str	r3, [r7, #44]	; 0x2c
		+ port * sizeof(GpioPort));
    93e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    93e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    93e6:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    93ea:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    93ec:	4619      	mov	r1, r3
    93ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    93f0:	62bb      	str	r3, [r7, #40]	; 0x28
	return 1U << (pin & 0x1F);
    93f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    93f4:	f003 031f 	and.w	r3, r3, #31
    93f8:	2201      	movs	r2, #1
    93fa:	fa02 f303 	lsl.w	r3, r2, r3
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    93fe:	f8c1 3168 	str.w	r3, [r1, #360]	; 0x168
	arch_ioport_set_pin_dir(pin, dir);
}
    9402:	e032      	b.n	946a <ioport_set_pin_dir+0xe4>
	} else if (dir == IOPORT_DIR_INPUT) {
    9404:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    9408:	2b00      	cmp	r3, #0
    940a:	d12e      	bne.n	946a <ioport_set_pin_dir+0xe4>
    940c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    940e:	627b      	str	r3, [r7, #36]	; 0x24
    9410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9412:	623b      	str	r3, [r7, #32]
	return pin >> 5;
    9414:	6a3b      	ldr	r3, [r7, #32]
    9416:	095b      	lsrs	r3, r3, #5
    9418:	61fb      	str	r3, [r7, #28]
		+ port * sizeof(GpioPort));
    941a:	69fb      	ldr	r3, [r7, #28]
    941c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    9420:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    9424:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    9426:	4619      	mov	r1, r3
    9428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    942a:	61bb      	str	r3, [r7, #24]
	return 1U << (pin & 0x1F);
    942c:	69bb      	ldr	r3, [r7, #24]
    942e:	f003 031f 	and.w	r3, r3, #31
    9432:	2201      	movs	r2, #1
    9434:	fa02 f303 	lsl.w	r3, r2, r3
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    9438:	648b      	str	r3, [r1, #72]	; 0x48
    943a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    943c:	617b      	str	r3, [r7, #20]
    943e:	697b      	ldr	r3, [r7, #20]
    9440:	613b      	str	r3, [r7, #16]
	return pin >> 5;
    9442:	693b      	ldr	r3, [r7, #16]
    9444:	095b      	lsrs	r3, r3, #5
    9446:	60fb      	str	r3, [r7, #12]
		+ port * sizeof(GpioPort));
    9448:	68fb      	ldr	r3, [r7, #12]
    944a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    944e:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
    9452:	025b      	lsls	r3, r3, #9
	return (volatile GpioPort *)(GPIO_ADDR
    9454:	4619      	mov	r1, r3
    9456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9458:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
    945a:	68bb      	ldr	r3, [r7, #8]
    945c:	f003 031f 	and.w	r3, r3, #31
    9460:	2201      	movs	r2, #1
    9462:	fa02 f303 	lsl.w	r3, r2, r3
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    9466:	f8c1 3164 	str.w	r3, [r1, #356]	; 0x164
    946a:	bf00      	nop
    946c:	3754      	adds	r7, #84	; 0x54
    946e:	46bd      	mov	sp, r7
    9470:	bc80      	pop	{r7}
    9472:	4770      	bx	lr

00009474 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_disable_pin(pin);\
	} while (0)

void board_init(void)
{
    9474:	b580      	push	{r7, lr}
    9476:	b088      	sub	sp, #32
    9478:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	struct wdt_dev_inst wdt_inst;
	struct wdt_config   wdt_cfg;

	wdt_get_config_defaults(&wdt_cfg);
    947a:	463b      	mov	r3, r7
    947c:	4618      	mov	r0, r3
    947e:	4b15      	ldr	r3, [pc, #84]	; (94d4 <board_init+0x60>)
    9480:	4798      	blx	r3
	wdt_init(&wdt_inst, WDT, &wdt_cfg);
    9482:	463a      	mov	r2, r7
    9484:	f107 0314 	add.w	r3, r7, #20
    9488:	4913      	ldr	r1, [pc, #76]	; (94d8 <board_init+0x64>)
    948a:	4618      	mov	r0, r3
    948c:	4b13      	ldr	r3, [pc, #76]	; (94dc <board_init+0x68>)
    948e:	4798      	blx	r3
	wdt_disable(&wdt_inst);
    9490:	f107 0314 	add.w	r3, r7, #20
    9494:	4618      	mov	r0, r3
    9496:	4b12      	ldr	r3, [pc, #72]	; (94e0 <board_init+0x6c>)
    9498:	4798      	blx	r3
#endif

	// Initialize IOPORTs
	ioport_init();
    949a:	4b12      	ldr	r3, [pc, #72]	; (94e4 <board_init+0x70>)
    949c:	4798      	blx	r3

	// Put all pins to default state (input & pull-up)
	uint32_t pin;

	
	for (pin = PIN_PA00; pin <= PIN_PC31; pin ++) {
    949e:	2300      	movs	r3, #0
    94a0:	61fb      	str	r3, [r7, #28]
    94a2:	e00f      	b.n	94c4 <board_init+0x50>
		// Skip output pins to configure later
		if (pin == PIN_PA02) {
    94a4:	69fb      	ldr	r3, [r7, #28]
    94a6:	2b02      	cmp	r3, #2
    94a8:	d008      	beq.n	94bc <board_init+0x48>
			continue;
		}
		ioport_set_pin_dir(pin, IOPORT_DIR_INPUT);
    94aa:	2100      	movs	r1, #0
    94ac:	69f8      	ldr	r0, [r7, #28]
    94ae:	4b0e      	ldr	r3, [pc, #56]	; (94e8 <board_init+0x74>)
    94b0:	4798      	blx	r3
		ioport_set_pin_mode(pin, IOPORT_MODE_PULLUP);
    94b2:	2108      	movs	r1, #8
    94b4:	69f8      	ldr	r0, [r7, #28]
    94b6:	4b0d      	ldr	r3, [pc, #52]	; (94ec <board_init+0x78>)
    94b8:	4798      	blx	r3
    94ba:	e000      	b.n	94be <board_init+0x4a>
			continue;
    94bc:	bf00      	nop
	for (pin = PIN_PA00; pin <= PIN_PC31; pin ++) {
    94be:	69fb      	ldr	r3, [r7, #28]
    94c0:	3301      	adds	r3, #1
    94c2:	61fb      	str	r3, [r7, #28]
    94c4:	69fb      	ldr	r3, [r7, #28]
    94c6:	2b5f      	cmp	r3, #95	; 0x5f
    94c8:	d9ec      	bls.n	94a4 <board_init+0x30>

#ifdef CONF_BOARD_ABDACB_PORT
	ioport_set_pin_peripheral_mode(ABDACB_AUDIO0_PIN, ABDACB_AUDIO0_MUX);
	ioport_set_pin_peripheral_mode(ABDACB_AUDIO1_PIN, ABDACB_AUDIO1_MUX);
#endif
}
    94ca:	bf00      	nop
    94cc:	3720      	adds	r7, #32
    94ce:	46bd      	mov	sp, r7
    94d0:	bd80      	pop	{r7, pc}
    94d2:	bf00      	nop
    94d4:	0000a7f9 	.word	0x0000a7f9
    94d8:	400f0c00 	.word	0x400f0c00
    94dc:	0000a83d 	.word	0x0000a83d
    94e0:	0000a941 	.word	0x0000a941
    94e4:	0000926d 	.word	0x0000926d
    94e8:	00009387 	.word	0x00009387
    94ec:	00009285 	.word	0x00009285

000094f0 <adc_interrupt>:
 *
 * The optional callback used by the interrupt handler is set by the
 * adcife_set_callback() function.
 */
static void adc_interrupt(void)
{
    94f0:	b580      	push	{r7, lr}
    94f2:	af00      	add	r7, sp, #0
	if (adc_callback_pointer) {
    94f4:	4b04      	ldr	r3, [pc, #16]	; (9508 <adc_interrupt+0x18>)
    94f6:	681b      	ldr	r3, [r3, #0]
    94f8:	2b00      	cmp	r3, #0
    94fa:	d002      	beq.n	9502 <adc_interrupt+0x12>
		adc_callback_pointer();
    94fc:	4b02      	ldr	r3, [pc, #8]	; (9508 <adc_interrupt+0x18>)
    94fe:	681b      	ldr	r3, [r3, #0]
    9500:	4798      	blx	r3
	}
}
    9502:	bf00      	nop
    9504:	bd80      	pop	{r7, pc}
    9506:	bf00      	nop
    9508:	20003dcc 	.word	0x20003dcc

0000950c <ADCIFE_Handler>:

/**
 * \brief Interrupt handler for ADCIFE interrupt.
 */
void ADCIFE_Handler(void)
{
    950c:	b580      	push	{r7, lr}
    950e:	af00      	add	r7, sp, #0
	adc_interrupt();
    9510:	4b01      	ldr	r3, [pc, #4]	; (9518 <ADCIFE_Handler+0xc>)
    9512:	4798      	blx	r3
}
    9514:	bf00      	nop
    9516:	bd80      	pop	{r7, pc}
    9518:	000094f1 	.word	0x000094f1

0000951c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    951c:	b480      	push	{r7}
    951e:	b083      	sub	sp, #12
    9520:	af00      	add	r7, sp, #0
    9522:	4603      	mov	r3, r0
    9524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    9526:	f997 3007 	ldrsb.w	r3, [r7, #7]
    952a:	2b00      	cmp	r3, #0
    952c:	db0b      	blt.n	9546 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    952e:	4908      	ldr	r1, [pc, #32]	; (9550 <__NVIC_EnableIRQ+0x34>)
    9530:	f997 3007 	ldrsb.w	r3, [r7, #7]
    9534:	095b      	lsrs	r3, r3, #5
    9536:	79fa      	ldrb	r2, [r7, #7]
    9538:	f002 021f 	and.w	r2, r2, #31
    953c:	2001      	movs	r0, #1
    953e:	fa00 f202 	lsl.w	r2, r0, r2
    9542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    9546:	bf00      	nop
    9548:	370c      	adds	r7, #12
    954a:	46bd      	mov	sp, r7
    954c:	bc80      	pop	{r7}
    954e:	4770      	bx	lr
    9550:	e000e100 	.word	0xe000e100

00009554 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    9554:	b480      	push	{r7}
    9556:	b083      	sub	sp, #12
    9558:	af00      	add	r7, sp, #0
    955a:	4603      	mov	r3, r0
    955c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    955e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    9562:	2b00      	cmp	r3, #0
    9564:	db0c      	blt.n	9580 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9566:	4909      	ldr	r1, [pc, #36]	; (958c <__NVIC_ClearPendingIRQ+0x38>)
    9568:	f997 3007 	ldrsb.w	r3, [r7, #7]
    956c:	095b      	lsrs	r3, r3, #5
    956e:	79fa      	ldrb	r2, [r7, #7]
    9570:	f002 021f 	and.w	r2, r2, #31
    9574:	2001      	movs	r0, #1
    9576:	fa00 f202 	lsl.w	r2, r0, r2
    957a:	3360      	adds	r3, #96	; 0x60
    957c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    9580:	bf00      	nop
    9582:	370c      	adds	r7, #12
    9584:	46bd      	mov	sp, r7
    9586:	bc80      	pop	{r7}
    9588:	4770      	bx	lr
    958a:	bf00      	nop
    958c:	e000e100 	.word	0xe000e100

00009590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    9590:	b480      	push	{r7}
    9592:	b083      	sub	sp, #12
    9594:	af00      	add	r7, sp, #0
    9596:	4603      	mov	r3, r0
    9598:	6039      	str	r1, [r7, #0]
    959a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    959c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    95a0:	2b00      	cmp	r3, #0
    95a2:	db0a      	blt.n	95ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    95a4:	490d      	ldr	r1, [pc, #52]	; (95dc <__NVIC_SetPriority+0x4c>)
    95a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
    95aa:	683a      	ldr	r2, [r7, #0]
    95ac:	b2d2      	uxtb	r2, r2
    95ae:	0112      	lsls	r2, r2, #4
    95b0:	b2d2      	uxtb	r2, r2
    95b2:	440b      	add	r3, r1
    95b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    95b8:	e00a      	b.n	95d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    95ba:	4909      	ldr	r1, [pc, #36]	; (95e0 <__NVIC_SetPriority+0x50>)
    95bc:	79fb      	ldrb	r3, [r7, #7]
    95be:	f003 030f 	and.w	r3, r3, #15
    95c2:	3b04      	subs	r3, #4
    95c4:	683a      	ldr	r2, [r7, #0]
    95c6:	b2d2      	uxtb	r2, r2
    95c8:	0112      	lsls	r2, r2, #4
    95ca:	b2d2      	uxtb	r2, r2
    95cc:	440b      	add	r3, r1
    95ce:	761a      	strb	r2, [r3, #24]
}
    95d0:	bf00      	nop
    95d2:	370c      	adds	r7, #12
    95d4:	46bd      	mov	sp, r7
    95d6:	bc80      	pop	{r7}
    95d8:	4770      	bx	lr
    95da:	bf00      	nop
    95dc:	e000e100 	.word	0xe000e100
    95e0:	e000ed00 	.word	0xe000ed00

000095e4 <cpu_irq_save>:
{
    95e4:	b480      	push	{r7}
    95e6:	b083      	sub	sp, #12
    95e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    95ea:	f3ef 8310 	mrs	r3, PRIMASK
    95ee:	607b      	str	r3, [r7, #4]
  return(result);
    95f0:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    95f2:	2b00      	cmp	r3, #0
    95f4:	bf0c      	ite	eq
    95f6:	2301      	moveq	r3, #1
    95f8:	2300      	movne	r3, #0
    95fa:	b2db      	uxtb	r3, r3
    95fc:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    95fe:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    9600:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    9604:	4b04      	ldr	r3, [pc, #16]	; (9618 <cpu_irq_save+0x34>)
    9606:	2200      	movs	r2, #0
    9608:	701a      	strb	r2, [r3, #0]
	return flags;
    960a:	683b      	ldr	r3, [r7, #0]
}
    960c:	4618      	mov	r0, r3
    960e:	370c      	adds	r7, #12
    9610:	46bd      	mov	sp, r7
    9612:	bc80      	pop	{r7}
    9614:	4770      	bx	lr
    9616:	bf00      	nop
    9618:	20000074 	.word	0x20000074

0000961c <cpu_irq_is_enabled_flags>:
{
    961c:	b480      	push	{r7}
    961e:	b083      	sub	sp, #12
    9620:	af00      	add	r7, sp, #0
    9622:	6078      	str	r0, [r7, #4]
	return (flags);
    9624:	687b      	ldr	r3, [r7, #4]
    9626:	2b00      	cmp	r3, #0
    9628:	bf14      	ite	ne
    962a:	2301      	movne	r3, #1
    962c:	2300      	moveq	r3, #0
    962e:	b2db      	uxtb	r3, r3
}
    9630:	4618      	mov	r0, r3
    9632:	370c      	adds	r7, #12
    9634:	46bd      	mov	sp, r7
    9636:	bc80      	pop	{r7}
    9638:	4770      	bx	lr
	...

0000963c <cpu_irq_restore>:
{
    963c:	b580      	push	{r7, lr}
    963e:	b082      	sub	sp, #8
    9640:	af00      	add	r7, sp, #0
    9642:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    9644:	6878      	ldr	r0, [r7, #4]
    9646:	4b07      	ldr	r3, [pc, #28]	; (9664 <cpu_irq_restore+0x28>)
    9648:	4798      	blx	r3
    964a:	4603      	mov	r3, r0
    964c:	2b00      	cmp	r3, #0
    964e:	d005      	beq.n	965c <cpu_irq_restore+0x20>
		cpu_irq_enable();
    9650:	4b05      	ldr	r3, [pc, #20]	; (9668 <cpu_irq_restore+0x2c>)
    9652:	2201      	movs	r2, #1
    9654:	701a      	strb	r2, [r3, #0]
    9656:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    965a:	b662      	cpsie	i
}
    965c:	bf00      	nop
    965e:	3708      	adds	r7, #8
    9660:	46bd      	mov	sp, r7
    9662:	bd80      	pop	{r7, pc}
    9664:	0000961d 	.word	0x0000961d
    9668:	20000074 	.word	0x20000074

0000966c <ast_is_clkbusy>:
 * \retval false AST clock is not busy
 * \retval true  AST clock is busy
 */
static inline bool ast_is_clkbusy(
		Ast *ast)
{
    966c:	b480      	push	{r7}
    966e:	b083      	sub	sp, #12
    9670:	af00      	add	r7, sp, #0
    9672:	6078      	str	r0, [r7, #4]
	return (ast->AST_SR & AST_SR_CLKBUSY) != 0;
    9674:	687b      	ldr	r3, [r7, #4]
    9676:	689b      	ldr	r3, [r3, #8]
    9678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    967c:	2b00      	cmp	r3, #0
    967e:	bf14      	ite	ne
    9680:	2301      	movne	r3, #1
    9682:	2300      	moveq	r3, #0
    9684:	b2db      	uxtb	r3, r3
}
    9686:	4618      	mov	r0, r3
    9688:	370c      	adds	r7, #12
    968a:	46bd      	mov	sp, r7
    968c:	bc80      	pop	{r7}
    968e:	4770      	bx	lr

00009690 <ast_is_busy>:
 * \retval false AST is not busy
 * \retval true AST is busy
 */
static inline bool ast_is_busy(
		Ast *ast)
{
    9690:	b480      	push	{r7}
    9692:	b083      	sub	sp, #12
    9694:	af00      	add	r7, sp, #0
    9696:	6078      	str	r0, [r7, #4]
	return (ast->AST_SR & AST_SR_BUSY) != 0;
    9698:	687b      	ldr	r3, [r7, #4]
    969a:	689b      	ldr	r3, [r3, #8]
    969c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    96a0:	2b00      	cmp	r3, #0
    96a2:	bf14      	ite	ne
    96a4:	2301      	movne	r3, #1
    96a6:	2300      	moveq	r3, #0
    96a8:	b2db      	uxtb	r3, r3
}
    96aa:	4618      	mov	r0, r3
    96ac:	370c      	adds	r7, #12
    96ae:	46bd      	mov	sp, r7
    96b0:	bc80      	pop	{r7}
    96b2:	4770      	bx	lr

000096b4 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
    96b4:	b580      	push	{r7, lr}
    96b6:	b084      	sub	sp, #16
    96b8:	af00      	add	r7, sp, #0
    96ba:	4603      	mov	r3, r0
    96bc:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    96be:	79fb      	ldrb	r3, [r7, #7]
    96c0:	4a0a      	ldr	r2, [pc, #40]	; (96ec <sleepmgr_lock_mode+0x38>)
    96c2:	5cd3      	ldrb	r3, [r2, r3]
    96c4:	2bff      	cmp	r3, #255	; 0xff
    96c6:	d100      	bne.n	96ca <sleepmgr_lock_mode+0x16>
		while (true) {
    96c8:	e7fe      	b.n	96c8 <sleepmgr_lock_mode+0x14>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
    96ca:	4b09      	ldr	r3, [pc, #36]	; (96f0 <sleepmgr_lock_mode+0x3c>)
    96cc:	4798      	blx	r3
    96ce:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
    96d0:	79fb      	ldrb	r3, [r7, #7]
    96d2:	4a06      	ldr	r2, [pc, #24]	; (96ec <sleepmgr_lock_mode+0x38>)
    96d4:	5cd2      	ldrb	r2, [r2, r3]
    96d6:	3201      	adds	r2, #1
    96d8:	b2d1      	uxtb	r1, r2
    96da:	4a04      	ldr	r2, [pc, #16]	; (96ec <sleepmgr_lock_mode+0x38>)
    96dc:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    96de:	68f8      	ldr	r0, [r7, #12]
    96e0:	4b04      	ldr	r3, [pc, #16]	; (96f4 <sleepmgr_lock_mode+0x40>)
    96e2:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    96e4:	bf00      	nop
    96e6:	3710      	adds	r7, #16
    96e8:	46bd      	mov	sp, r7
    96ea:	bd80      	pop	{r7, pc}
    96ec:	20003dc4 	.word	0x20003dc4
    96f0:	000095e5 	.word	0x000095e5
    96f4:	0000963d 	.word	0x0000963d

000096f8 <ast_enable>:
 *
 * \param[in] ast Module hardware register base address pointer
 */
void ast_enable(
		Ast *ast)
{
    96f8:	b580      	push	{r7, lr}
    96fa:	b082      	sub	sp, #8
    96fc:	af00      	add	r7, sp, #0
    96fe:	6078      	str	r0, [r7, #4]
	sysclk_enable_peripheral_clock(ast);
    9700:	6878      	ldr	r0, [r7, #4]
    9702:	4b04      	ldr	r3, [pc, #16]	; (9714 <ast_enable+0x1c>)
    9704:	4798      	blx	r3
	sleepmgr_lock_mode(SLEEPMGR_BACKUP);
    9706:	2007      	movs	r0, #7
    9708:	4b03      	ldr	r3, [pc, #12]	; (9718 <ast_enable+0x20>)
    970a:	4798      	blx	r3
}
    970c:	bf00      	nop
    970e:	3708      	adds	r7, #8
    9710:	46bd      	mov	sp, r7
    9712:	bd80      	pop	{r7, pc}
    9714:	000088e5 	.word	0x000088e5
    9718:	000096b5 	.word	0x000096b5

0000971c <ast_set_config>:
 * \retval 1 Initialization succeeded
*/
uint32_t ast_set_config(
		Ast *ast,
		struct ast_config *ast_conf)
{
    971c:	b580      	push	{r7, lr}
    971e:	b084      	sub	sp, #16
    9720:	af00      	add	r7, sp, #0
    9722:	6078      	str	r0, [r7, #4]
    9724:	6039      	str	r1, [r7, #0]
	uint32_t time_out = AST_POLL_TIMEOUT;
    9726:	f242 7310 	movw	r3, #10000	; 0x2710
    972a:	60fb      	str	r3, [r7, #12]
	while (ast_is_clkbusy(ast)) {
    972c:	e007      	b.n	973e <ast_set_config+0x22>
		if (--time_out == 0) {
    972e:	68fb      	ldr	r3, [r7, #12]
    9730:	3b01      	subs	r3, #1
    9732:	60fb      	str	r3, [r7, #12]
    9734:	68fb      	ldr	r3, [r7, #12]
    9736:	2b00      	cmp	r3, #0
    9738:	d101      	bne.n	973e <ast_set_config+0x22>
			return 0;
    973a:	2300      	movs	r3, #0
    973c:	e079      	b.n	9832 <ast_set_config+0x116>
	while (ast_is_clkbusy(ast)) {
    973e:	6878      	ldr	r0, [r7, #4]
    9740:	4b3e      	ldr	r3, [pc, #248]	; (983c <ast_set_config+0x120>)
    9742:	4798      	blx	r3
    9744:	4603      	mov	r3, r0
    9746:	2b00      	cmp	r3, #0
    9748:	d1f1      	bne.n	972e <ast_set_config+0x12>
		}
	}
	ast->AST_CLOCK = ast_conf->osc_type << AST_CLOCK_CSSEL_Pos;
    974a:	683b      	ldr	r3, [r7, #0]
    974c:	785b      	ldrb	r3, [r3, #1]
    974e:	021b      	lsls	r3, r3, #8
    9750:	461a      	mov	r2, r3
    9752:	687b      	ldr	r3, [r7, #4]
    9754:	641a      	str	r2, [r3, #64]	; 0x40
	time_out = AST_POLL_TIMEOUT;
    9756:	f242 7310 	movw	r3, #10000	; 0x2710
    975a:	60fb      	str	r3, [r7, #12]
	while (ast_is_clkbusy(ast)) {
    975c:	e007      	b.n	976e <ast_set_config+0x52>
		if (--time_out == 0) {
    975e:	68fb      	ldr	r3, [r7, #12]
    9760:	3b01      	subs	r3, #1
    9762:	60fb      	str	r3, [r7, #12]
    9764:	68fb      	ldr	r3, [r7, #12]
    9766:	2b00      	cmp	r3, #0
    9768:	d101      	bne.n	976e <ast_set_config+0x52>
			return 0;
    976a:	2300      	movs	r3, #0
    976c:	e061      	b.n	9832 <ast_set_config+0x116>
	while (ast_is_clkbusy(ast)) {
    976e:	6878      	ldr	r0, [r7, #4]
    9770:	4b32      	ldr	r3, [pc, #200]	; (983c <ast_set_config+0x120>)
    9772:	4798      	blx	r3
    9774:	4603      	mov	r3, r0
    9776:	2b00      	cmp	r3, #0
    9778:	d1f1      	bne.n	975e <ast_set_config+0x42>
		}
	}
	ast->AST_CLOCK |= AST_CLOCK_CEN;
    977a:	687b      	ldr	r3, [r7, #4]
    977c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    977e:	f043 0201 	orr.w	r2, r3, #1
    9782:	687b      	ldr	r3, [r7, #4]
    9784:	641a      	str	r2, [r3, #64]	; 0x40
	time_out = AST_POLL_TIMEOUT;
    9786:	f242 7310 	movw	r3, #10000	; 0x2710
    978a:	60fb      	str	r3, [r7, #12]
	while (ast_is_clkbusy(ast)) {
    978c:	e007      	b.n	979e <ast_set_config+0x82>
		if (--time_out == 0) {
    978e:	68fb      	ldr	r3, [r7, #12]
    9790:	3b01      	subs	r3, #1
    9792:	60fb      	str	r3, [r7, #12]
    9794:	68fb      	ldr	r3, [r7, #12]
    9796:	2b00      	cmp	r3, #0
    9798:	d101      	bne.n	979e <ast_set_config+0x82>
			return 0;
    979a:	2300      	movs	r3, #0
    979c:	e049      	b.n	9832 <ast_set_config+0x116>
	while (ast_is_clkbusy(ast)) {
    979e:	6878      	ldr	r0, [r7, #4]
    97a0:	4b26      	ldr	r3, [pc, #152]	; (983c <ast_set_config+0x120>)
    97a2:	4798      	blx	r3
    97a4:	4603      	mov	r3, r0
    97a6:	2b00      	cmp	r3, #0
    97a8:	d1f1      	bne.n	978e <ast_set_config+0x72>
		}
	}
	/* Set the new AST configuration */
	if (ast_conf->mode == AST_CALENDAR_MODE) {
    97aa:	683b      	ldr	r3, [r7, #0]
    97ac:	781b      	ldrb	r3, [r3, #0]
    97ae:	2b01      	cmp	r3, #1
    97b0:	d106      	bne.n	97c0 <ast_set_config+0xa4>
		ast->AST_CR = AST_CR_CAL | ast_conf->psel << AST_CR_PSEL_Pos;
    97b2:	683b      	ldr	r3, [r7, #0]
    97b4:	789b      	ldrb	r3, [r3, #2]
    97b6:	041b      	lsls	r3, r3, #16
    97b8:	f043 0204 	orr.w	r2, r3, #4
    97bc:	687b      	ldr	r3, [r7, #4]
    97be:	601a      	str	r2, [r3, #0]
	}

	if (ast_conf->mode == AST_COUNTER_MODE) {
    97c0:	683b      	ldr	r3, [r7, #0]
    97c2:	781b      	ldrb	r3, [r3, #0]
    97c4:	2b00      	cmp	r3, #0
    97c6:	d105      	bne.n	97d4 <ast_set_config+0xb8>
		ast->AST_CR = ast_conf->psel << AST_CR_PSEL_Pos;
    97c8:	683b      	ldr	r3, [r7, #0]
    97ca:	789b      	ldrb	r3, [r3, #2]
    97cc:	041b      	lsls	r3, r3, #16
    97ce:	461a      	mov	r2, r3
    97d0:	687b      	ldr	r3, [r7, #4]
    97d2:	601a      	str	r2, [r3, #0]
	}

	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
    97d4:	bf00      	nop
    97d6:	6878      	ldr	r0, [r7, #4]
    97d8:	4b19      	ldr	r3, [pc, #100]	; (9840 <ast_set_config+0x124>)
    97da:	4798      	blx	r3
    97dc:	4603      	mov	r3, r0
    97de:	2b00      	cmp	r3, #0
    97e0:	d1f9      	bne.n	97d6 <ast_set_config+0xba>
	}

	/* Set the calendar */
	if (ast_conf->mode == AST_CALENDAR_MODE) {
    97e2:	683b      	ldr	r3, [r7, #0]
    97e4:	781b      	ldrb	r3, [r3, #0]
    97e6:	2b01      	cmp	r3, #1
    97e8:	d104      	bne.n	97f4 <ast_set_config+0xd8>
		ast_write_calendar_value(ast, ast_conf->calendar);
    97ea:	683b      	ldr	r3, [r7, #0]
    97ec:	6899      	ldr	r1, [r3, #8]
    97ee:	6878      	ldr	r0, [r7, #4]
    97f0:	4b14      	ldr	r3, [pc, #80]	; (9844 <ast_set_config+0x128>)
    97f2:	4798      	blx	r3
	}

	if (ast_conf->mode == AST_COUNTER_MODE) {
    97f4:	683b      	ldr	r3, [r7, #0]
    97f6:	781b      	ldrb	r3, [r3, #0]
    97f8:	2b00      	cmp	r3, #0
    97fa:	d105      	bne.n	9808 <ast_set_config+0xec>
		ast_write_counter_value(ast, ast_conf->counter);
    97fc:	683b      	ldr	r3, [r7, #0]
    97fe:	685b      	ldr	r3, [r3, #4]
    9800:	4619      	mov	r1, r3
    9802:	6878      	ldr	r0, [r7, #4]
    9804:	4b10      	ldr	r3, [pc, #64]	; (9848 <ast_set_config+0x12c>)
    9806:	4798      	blx	r3
	}

	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
    9808:	bf00      	nop
    980a:	6878      	ldr	r0, [r7, #4]
    980c:	4b0c      	ldr	r3, [pc, #48]	; (9840 <ast_set_config+0x124>)
    980e:	4798      	blx	r3
    9810:	4603      	mov	r3, r0
    9812:	2b00      	cmp	r3, #0
    9814:	d1f9      	bne.n	980a <ast_set_config+0xee>
	}
	/* Enable the AST */
	ast->AST_CR |= AST_CR_EN;
    9816:	687b      	ldr	r3, [r7, #4]
    9818:	681b      	ldr	r3, [r3, #0]
    981a:	f043 0201 	orr.w	r2, r3, #1
    981e:	687b      	ldr	r3, [r7, #4]
    9820:	601a      	str	r2, [r3, #0]
	/* Wait until write is done */
	while (ast_is_busy(ast)) {
    9822:	bf00      	nop
    9824:	6878      	ldr	r0, [r7, #4]
    9826:	4b06      	ldr	r3, [pc, #24]	; (9840 <ast_set_config+0x124>)
    9828:	4798      	blx	r3
    982a:	4603      	mov	r3, r0
    982c:	2b00      	cmp	r3, #0
    982e:	d1f9      	bne.n	9824 <ast_set_config+0x108>
	}

	return 1;
    9830:	2301      	movs	r3, #1
}
    9832:	4618      	mov	r0, r3
    9834:	3710      	adds	r7, #16
    9836:	46bd      	mov	sp, r7
    9838:	bd80      	pop	{r7, pc}
    983a:	bf00      	nop
    983c:	0000966d 	.word	0x0000966d
    9840:	00009691 	.word	0x00009691
    9844:	0000984d 	.word	0x0000984d
    9848:	00009885 	.word	0x00009885

0000984c <ast_write_calendar_value>:
 * \param[in] calendar Startup date structure
 */
void ast_write_calendar_value(
		Ast *ast,
		struct ast_calendar calendar)
{
    984c:	b580      	push	{r7, lr}
    984e:	b082      	sub	sp, #8
    9850:	af00      	add	r7, sp, #0
    9852:	6078      	str	r0, [r7, #4]
    9854:	6039      	str	r1, [r7, #0]
	/* Wait until we can write into the VAL register */
	while (ast_is_busy(ast)) {
    9856:	bf00      	nop
    9858:	6878      	ldr	r0, [r7, #4]
    985a:	4b09      	ldr	r3, [pc, #36]	; (9880 <ast_write_calendar_value+0x34>)
    985c:	4798      	blx	r3
    985e:	4603      	mov	r3, r0
    9860:	2b00      	cmp	r3, #0
    9862:	d1f9      	bne.n	9858 <ast_write_calendar_value+0xc>
	}
	/* Set the new value */
	ast->AST_CALV = calendar.field;
    9864:	683a      	ldr	r2, [r7, #0]
    9866:	687b      	ldr	r3, [r7, #4]
    9868:	655a      	str	r2, [r3, #84]	; 0x54
	/* Wait until write is done */
	while (ast_is_busy(ast)) {
    986a:	bf00      	nop
    986c:	6878      	ldr	r0, [r7, #4]
    986e:	4b04      	ldr	r3, [pc, #16]	; (9880 <ast_write_calendar_value+0x34>)
    9870:	4798      	blx	r3
    9872:	4603      	mov	r3, r0
    9874:	2b00      	cmp	r3, #0
    9876:	d1f9      	bne.n	986c <ast_write_calendar_value+0x20>
	}
}
    9878:	bf00      	nop
    987a:	3708      	adds	r7, #8
    987c:	46bd      	mov	sp, r7
    987e:	bd80      	pop	{r7, pc}
    9880:	00009691 	.word	0x00009691

00009884 <ast_write_counter_value>:
 * \param[in] ast_counter Startup counter value
 */
void ast_write_counter_value(
		Ast *ast,
		uint32_t ast_counter)
{
    9884:	b580      	push	{r7, lr}
    9886:	b082      	sub	sp, #8
    9888:	af00      	add	r7, sp, #0
    988a:	6078      	str	r0, [r7, #4]
    988c:	6039      	str	r1, [r7, #0]
	/* Wait until we can write into the VAL register */
	while (ast_is_busy(ast)) {
    988e:	bf00      	nop
    9890:	6878      	ldr	r0, [r7, #4]
    9892:	4b09      	ldr	r3, [pc, #36]	; (98b8 <ast_write_counter_value+0x34>)
    9894:	4798      	blx	r3
    9896:	4603      	mov	r3, r0
    9898:	2b00      	cmp	r3, #0
    989a:	d1f9      	bne.n	9890 <ast_write_counter_value+0xc>
	}
	/* Set the new val value */
	ast->AST_CV = ast_counter;
    989c:	687b      	ldr	r3, [r7, #4]
    989e:	683a      	ldr	r2, [r7, #0]
    98a0:	605a      	str	r2, [r3, #4]
	/* Wait until write is done */
	while (ast_is_busy(ast)) {
    98a2:	bf00      	nop
    98a4:	6878      	ldr	r0, [r7, #4]
    98a6:	4b04      	ldr	r3, [pc, #16]	; (98b8 <ast_write_counter_value+0x34>)
    98a8:	4798      	blx	r3
    98aa:	4603      	mov	r3, r0
    98ac:	2b00      	cmp	r3, #0
    98ae:	d1f9      	bne.n	98a4 <ast_write_counter_value+0x20>
	}
}
    98b0:	bf00      	nop
    98b2:	3708      	adds	r7, #8
    98b4:	46bd      	mov	sp, r7
    98b6:	bd80      	pop	{r7, pc}
    98b8:	00009691 	.word	0x00009691

000098bc <ast_write_alarm0_value>:
 * \param[in] alarm_value AST alarm0 value
 */
void ast_write_alarm0_value(
		Ast *ast,
		uint32_t alarm_value)
{
    98bc:	b580      	push	{r7, lr}
    98be:	b082      	sub	sp, #8
    98c0:	af00      	add	r7, sp, #0
    98c2:	6078      	str	r0, [r7, #4]
    98c4:	6039      	str	r1, [r7, #0]
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
    98c6:	bf00      	nop
    98c8:	6878      	ldr	r0, [r7, #4]
    98ca:	4b09      	ldr	r3, [pc, #36]	; (98f0 <ast_write_alarm0_value+0x34>)
    98cc:	4798      	blx	r3
    98ce:	4603      	mov	r3, r0
    98d0:	2b00      	cmp	r3, #0
    98d2:	d1f9      	bne.n	98c8 <ast_write_alarm0_value+0xc>
	}
	/* Set the new alarm0 compare value */
	ast->AST_AR0 = alarm_value;
    98d4:	687b      	ldr	r3, [r7, #4]
    98d6:	683a      	ldr	r2, [r7, #0]
    98d8:	621a      	str	r2, [r3, #32]
	/* Wait until write is done */
	while (ast_is_busy(ast)) {
    98da:	bf00      	nop
    98dc:	6878      	ldr	r0, [r7, #4]
    98de:	4b04      	ldr	r3, [pc, #16]	; (98f0 <ast_write_alarm0_value+0x34>)
    98e0:	4798      	blx	r3
    98e2:	4603      	mov	r3, r0
    98e4:	2b00      	cmp	r3, #0
    98e6:	d1f9      	bne.n	98dc <ast_write_alarm0_value+0x20>
	}
}
    98e8:	bf00      	nop
    98ea:	3708      	adds	r7, #8
    98ec:	46bd      	mov	sp, r7
    98ee:	bd80      	pop	{r7, pc}
    98f0:	00009691 	.word	0x00009691

000098f4 <ast_enable_interrupt>:
 * \param[in] source  AST interrupt source to be enabled
 */
void ast_enable_interrupt(
		Ast *ast,
		ast_interrupt_source_t source)
{
    98f4:	b580      	push	{r7, lr}
    98f6:	b082      	sub	sp, #8
    98f8:	af00      	add	r7, sp, #0
    98fa:	6078      	str	r0, [r7, #4]
    98fc:	460b      	mov	r3, r1
    98fe:	70fb      	strb	r3, [r7, #3]
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
    9900:	bf00      	nop
    9902:	6878      	ldr	r0, [r7, #4]
    9904:	4b1c      	ldr	r3, [pc, #112]	; (9978 <ast_enable_interrupt+0x84>)
    9906:	4798      	blx	r3
    9908:	4603      	mov	r3, r0
    990a:	2b00      	cmp	r3, #0
    990c:	d1f9      	bne.n	9902 <ast_enable_interrupt+0xe>
	}

	switch (source) {
    990e:	78fb      	ldrb	r3, [r7, #3]
    9910:	2b04      	cmp	r3, #4
    9912:	d825      	bhi.n	9960 <ast_enable_interrupt+0x6c>
    9914:	a201      	add	r2, pc, #4	; (adr r2, 991c <ast_enable_interrupt+0x28>)
    9916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    991a:	bf00      	nop
    991c:	00009931 	.word	0x00009931
    9920:	0000993b 	.word	0x0000993b
    9924:	00009945 	.word	0x00009945
    9928:	0000994d 	.word	0x0000994d
    992c:	00009957 	.word	0x00009957
	case AST_INTERRUPT_ALARM:
		ast->AST_IER = AST_IER_ALARM0_1;
    9930:	687b      	ldr	r3, [r7, #4]
    9932:	f44f 7280 	mov.w	r2, #256	; 0x100
    9936:	611a      	str	r2, [r3, #16]
		break;
    9938:	e013      	b.n	9962 <ast_enable_interrupt+0x6e>

	case AST_INTERRUPT_PER:
		ast->AST_IER = AST_IER_PER0_1;
    993a:	687b      	ldr	r3, [r7, #4]
    993c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    9940:	611a      	str	r2, [r3, #16]
		break;
    9942:	e00e      	b.n	9962 <ast_enable_interrupt+0x6e>

	case AST_INTERRUPT_OVF:
		ast->AST_IER = AST_IER_OVF_1;
    9944:	687b      	ldr	r3, [r7, #4]
    9946:	2201      	movs	r2, #1
    9948:	611a      	str	r2, [r3, #16]
		break;
    994a:	e00a      	b.n	9962 <ast_enable_interrupt+0x6e>

	case AST_INTERRUPT_READY:
		ast->AST_IER = AST_IER_READY_1;
    994c:	687b      	ldr	r3, [r7, #4]
    994e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    9952:	611a      	str	r2, [r3, #16]
		break;
    9954:	e005      	b.n	9962 <ast_enable_interrupt+0x6e>

	case AST_INTERRUPT_CLKREADY:
		ast->AST_IER = AST_IER_CLKRDY_1;
    9956:	687b      	ldr	r3, [r7, #4]
    9958:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    995c:	611a      	str	r2, [r3, #16]
		break;
    995e:	e000      	b.n	9962 <ast_enable_interrupt+0x6e>

	default:
		break;
    9960:	bf00      	nop
	}

	/* Wait until write is done */
	while (ast_is_busy(ast)) {
    9962:	bf00      	nop
    9964:	6878      	ldr	r0, [r7, #4]
    9966:	4b04      	ldr	r3, [pc, #16]	; (9978 <ast_enable_interrupt+0x84>)
    9968:	4798      	blx	r3
    996a:	4603      	mov	r3, r0
    996c:	2b00      	cmp	r3, #0
    996e:	d1f9      	bne.n	9964 <ast_enable_interrupt+0x70>
	}
}
    9970:	bf00      	nop
    9972:	3708      	adds	r7, #8
    9974:	46bd      	mov	sp, r7
    9976:	bd80      	pop	{r7, pc}
    9978:	00009691 	.word	0x00009691

0000997c <ast_disable_interrupt>:
 * \param[in] source  AST interrupt source to be disabled
 */
void ast_disable_interrupt(
		Ast *ast,
		ast_interrupt_source_t source)
{
    997c:	b580      	push	{r7, lr}
    997e:	b082      	sub	sp, #8
    9980:	af00      	add	r7, sp, #0
    9982:	6078      	str	r0, [r7, #4]
    9984:	460b      	mov	r3, r1
    9986:	70fb      	strb	r3, [r7, #3]
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
    9988:	bf00      	nop
    998a:	6878      	ldr	r0, [r7, #4]
    998c:	4b1c      	ldr	r3, [pc, #112]	; (9a00 <ast_disable_interrupt+0x84>)
    998e:	4798      	blx	r3
    9990:	4603      	mov	r3, r0
    9992:	2b00      	cmp	r3, #0
    9994:	d1f9      	bne.n	998a <ast_disable_interrupt+0xe>
	}

	switch (source) {
    9996:	78fb      	ldrb	r3, [r7, #3]
    9998:	2b04      	cmp	r3, #4
    999a:	d825      	bhi.n	99e8 <ast_disable_interrupt+0x6c>
    999c:	a201      	add	r2, pc, #4	; (adr r2, 99a4 <ast_disable_interrupt+0x28>)
    999e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    99a2:	bf00      	nop
    99a4:	000099b9 	.word	0x000099b9
    99a8:	000099c3 	.word	0x000099c3
    99ac:	000099cd 	.word	0x000099cd
    99b0:	000099d5 	.word	0x000099d5
    99b4:	000099df 	.word	0x000099df
	case AST_INTERRUPT_ALARM:
		ast->AST_IDR = AST_IDR_ALARM0_1;
    99b8:	687b      	ldr	r3, [r7, #4]
    99ba:	f44f 7280 	mov.w	r2, #256	; 0x100
    99be:	615a      	str	r2, [r3, #20]
		break;
    99c0:	e013      	b.n	99ea <ast_disable_interrupt+0x6e>

	case AST_INTERRUPT_PER:
		ast->AST_IDR = AST_IDR_PER0_1;
    99c2:	687b      	ldr	r3, [r7, #4]
    99c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    99c8:	615a      	str	r2, [r3, #20]
		break;
    99ca:	e00e      	b.n	99ea <ast_disable_interrupt+0x6e>

	case AST_INTERRUPT_OVF:
		ast->AST_IDR = AST_IDR_OVF_1;
    99cc:	687b      	ldr	r3, [r7, #4]
    99ce:	2201      	movs	r2, #1
    99d0:	615a      	str	r2, [r3, #20]
		break;
    99d2:	e00a      	b.n	99ea <ast_disable_interrupt+0x6e>

	case AST_INTERRUPT_READY:
		ast->AST_IDR = AST_IDR_READY_1;
    99d4:	687b      	ldr	r3, [r7, #4]
    99d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    99da:	615a      	str	r2, [r3, #20]
		break;
    99dc:	e005      	b.n	99ea <ast_disable_interrupt+0x6e>

	case AST_INTERRUPT_CLKREADY:
		ast->AST_IDR = AST_IDR_CLKRDY_1;
    99de:	687b      	ldr	r3, [r7, #4]
    99e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    99e4:	615a      	str	r2, [r3, #20]
		break;
    99e6:	e000      	b.n	99ea <ast_disable_interrupt+0x6e>

	default:
		break;
    99e8:	bf00      	nop
	}

	/* Wait until write is done */
	while (ast_is_busy(ast)) {
    99ea:	bf00      	nop
    99ec:	6878      	ldr	r0, [r7, #4]
    99ee:	4b04      	ldr	r3, [pc, #16]	; (9a00 <ast_disable_interrupt+0x84>)
    99f0:	4798      	blx	r3
    99f2:	4603      	mov	r3, r0
    99f4:	2b00      	cmp	r3, #0
    99f6:	d1f9      	bne.n	99ec <ast_disable_interrupt+0x70>
	}
}
    99f8:	bf00      	nop
    99fa:	3708      	adds	r7, #8
    99fc:	46bd      	mov	sp, r7
    99fe:	bd80      	pop	{r7, pc}
    9a00:	00009691 	.word	0x00009691

00009a04 <ast_clear_interrupt_flag>:
 * \param[in] source  AST interrupt source for which the status is to be cleared
 */
void ast_clear_interrupt_flag(
		Ast *ast,
		ast_interrupt_source_t source)
{
    9a04:	b580      	push	{r7, lr}
    9a06:	b082      	sub	sp, #8
    9a08:	af00      	add	r7, sp, #0
    9a0a:	6078      	str	r0, [r7, #4]
    9a0c:	460b      	mov	r3, r1
    9a0e:	70fb      	strb	r3, [r7, #3]
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
    9a10:	bf00      	nop
    9a12:	6878      	ldr	r0, [r7, #4]
    9a14:	4b1c      	ldr	r3, [pc, #112]	; (9a88 <ast_clear_interrupt_flag+0x84>)
    9a16:	4798      	blx	r3
    9a18:	4603      	mov	r3, r0
    9a1a:	2b00      	cmp	r3, #0
    9a1c:	d1f9      	bne.n	9a12 <ast_clear_interrupt_flag+0xe>
	}

	switch (source) {
    9a1e:	78fb      	ldrb	r3, [r7, #3]
    9a20:	2b04      	cmp	r3, #4
    9a22:	d825      	bhi.n	9a70 <ast_clear_interrupt_flag+0x6c>
    9a24:	a201      	add	r2, pc, #4	; (adr r2, 9a2c <ast_clear_interrupt_flag+0x28>)
    9a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9a2a:	bf00      	nop
    9a2c:	00009a41 	.word	0x00009a41
    9a30:	00009a4b 	.word	0x00009a4b
    9a34:	00009a55 	.word	0x00009a55
    9a38:	00009a5d 	.word	0x00009a5d
    9a3c:	00009a67 	.word	0x00009a67
	case AST_INTERRUPT_ALARM:
		ast->AST_SCR = AST_SCR_ALARM0;
    9a40:	687b      	ldr	r3, [r7, #4]
    9a42:	f44f 7280 	mov.w	r2, #256	; 0x100
    9a46:	60da      	str	r2, [r3, #12]
		break;
    9a48:	e013      	b.n	9a72 <ast_clear_interrupt_flag+0x6e>

	case AST_INTERRUPT_PER:
		ast->AST_SCR = AST_SCR_PER0;
    9a4a:	687b      	ldr	r3, [r7, #4]
    9a4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    9a50:	60da      	str	r2, [r3, #12]
		break;
    9a52:	e00e      	b.n	9a72 <ast_clear_interrupt_flag+0x6e>

	case AST_INTERRUPT_OVF:
		ast->AST_SCR = AST_SCR_OVF;
    9a54:	687b      	ldr	r3, [r7, #4]
    9a56:	2201      	movs	r2, #1
    9a58:	60da      	str	r2, [r3, #12]
		break;
    9a5a:	e00a      	b.n	9a72 <ast_clear_interrupt_flag+0x6e>

	case AST_INTERRUPT_READY:
		ast->AST_SCR = AST_SCR_READY;
    9a5c:	687b      	ldr	r3, [r7, #4]
    9a5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    9a62:	60da      	str	r2, [r3, #12]
		break;
    9a64:	e005      	b.n	9a72 <ast_clear_interrupt_flag+0x6e>

	case AST_INTERRUPT_CLKREADY:
		ast->AST_SCR = AST_SCR_CLKRDY;
    9a66:	687b      	ldr	r3, [r7, #4]
    9a68:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    9a6c:	60da      	str	r2, [r3, #12]
		break;
    9a6e:	e000      	b.n	9a72 <ast_clear_interrupt_flag+0x6e>

	default:
		break;
    9a70:	bf00      	nop
	}

	/* Wait until write is done */
	while (ast_is_busy(ast)) {
    9a72:	bf00      	nop
    9a74:	6878      	ldr	r0, [r7, #4]
    9a76:	4b04      	ldr	r3, [pc, #16]	; (9a88 <ast_clear_interrupt_flag+0x84>)
    9a78:	4798      	blx	r3
    9a7a:	4603      	mov	r3, r0
    9a7c:	2b00      	cmp	r3, #0
    9a7e:	d1f9      	bne.n	9a74 <ast_clear_interrupt_flag+0x70>
	}
}
    9a80:	bf00      	nop
    9a82:	3708      	adds	r7, #8
    9a84:	46bd      	mov	sp, r7
    9a86:	bd80      	pop	{r7, pc}
    9a88:	00009691 	.word	0x00009691

00009a8c <ast_set_callback>:
		Ast *ast,
		ast_interrupt_source_t source,
		ast_callback_t callback,
		uint8_t irq_line,
		uint8_t irq_level)
{
    9a8c:	b580      	push	{r7, lr}
    9a8e:	b084      	sub	sp, #16
    9a90:	af00      	add	r7, sp, #0
    9a92:	60f8      	str	r0, [r7, #12]
    9a94:	607a      	str	r2, [r7, #4]
    9a96:	461a      	mov	r2, r3
    9a98:	460b      	mov	r3, r1
    9a9a:	72fb      	strb	r3, [r7, #11]
    9a9c:	4613      	mov	r3, r2
    9a9e:	72bb      	strb	r3, [r7, #10]
	ast_callback_pointer[source] = callback;
    9aa0:	7afb      	ldrb	r3, [r7, #11]
    9aa2:	490f      	ldr	r1, [pc, #60]	; (9ae0 <ast_set_callback+0x54>)
    9aa4:	687a      	ldr	r2, [r7, #4]
    9aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)irq_line);
    9aaa:	f997 300a 	ldrsb.w	r3, [r7, #10]
    9aae:	4618      	mov	r0, r3
    9ab0:	4b0c      	ldr	r3, [pc, #48]	; (9ae4 <ast_set_callback+0x58>)
    9ab2:	4798      	blx	r3
	NVIC_SetPriority((IRQn_Type)irq_line, irq_level);
    9ab4:	f997 300a 	ldrsb.w	r3, [r7, #10]
    9ab8:	7e3a      	ldrb	r2, [r7, #24]
    9aba:	4611      	mov	r1, r2
    9abc:	4618      	mov	r0, r3
    9abe:	4b0a      	ldr	r3, [pc, #40]	; (9ae8 <ast_set_callback+0x5c>)
    9ac0:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)irq_line);
    9ac2:	f997 300a 	ldrsb.w	r3, [r7, #10]
    9ac6:	4618      	mov	r0, r3
    9ac8:	4b08      	ldr	r3, [pc, #32]	; (9aec <ast_set_callback+0x60>)
    9aca:	4798      	blx	r3
	ast_enable_interrupt(ast, source);
    9acc:	7afb      	ldrb	r3, [r7, #11]
    9ace:	4619      	mov	r1, r3
    9ad0:	68f8      	ldr	r0, [r7, #12]
    9ad2:	4b07      	ldr	r3, [pc, #28]	; (9af0 <ast_set_callback+0x64>)
    9ad4:	4798      	blx	r3
}
    9ad6:	bf00      	nop
    9ad8:	3710      	adds	r7, #16
    9ada:	46bd      	mov	sp, r7
    9adc:	bd80      	pop	{r7, pc}
    9ade:	bf00      	nop
    9ae0:	20003dd0 	.word	0x20003dd0
    9ae4:	00009555 	.word	0x00009555
    9ae8:	00009591 	.word	0x00009591
    9aec:	0000951d 	.word	0x0000951d
    9af0:	000098f5 	.word	0x000098f5

00009af4 <AST_ALARM_Handler>:
/**
 * \brief Interrupt handler for AST alarm.
 */
#if defined(AST_ALARM_ENABLE) || defined(__DOXYGEN__)
void AST_ALARM_Handler(void)
{
    9af4:	b580      	push	{r7, lr}
    9af6:	af00      	add	r7, sp, #0
	ast_callback_pointer[AST_INTERRUPT_ALARM]();
    9af8:	4b02      	ldr	r3, [pc, #8]	; (9b04 <AST_ALARM_Handler+0x10>)
    9afa:	681b      	ldr	r3, [r3, #0]
    9afc:	4798      	blx	r3
}
    9afe:	bf00      	nop
    9b00:	bd80      	pop	{r7, pc}
    9b02:	bf00      	nop
    9b04:	20003dd0 	.word	0x20003dd0

00009b08 <ast_enable_wakeup>:
 * \param[in] source  AST wake-up source to be enabled
 */
void ast_enable_wakeup(
		Ast *ast,
		ast_wakeup_source_t source)
{
    9b08:	b580      	push	{r7, lr}
    9b0a:	b082      	sub	sp, #8
    9b0c:	af00      	add	r7, sp, #0
    9b0e:	6078      	str	r0, [r7, #4]
    9b10:	460b      	mov	r3, r1
    9b12:	70fb      	strb	r3, [r7, #3]
	/* Wait until the ast CTRL register is up-to-date */
	while (ast_is_busy(ast)) {
    9b14:	bf00      	nop
    9b16:	6878      	ldr	r0, [r7, #4]
    9b18:	4b16      	ldr	r3, [pc, #88]	; (9b74 <ast_enable_wakeup+0x6c>)
    9b1a:	4798      	blx	r3
    9b1c:	4603      	mov	r3, r0
    9b1e:	2b00      	cmp	r3, #0
    9b20:	d1f9      	bne.n	9b16 <ast_enable_wakeup+0xe>
	}

	switch (source) {
    9b22:	78fb      	ldrb	r3, [r7, #3]
    9b24:	2b01      	cmp	r3, #1
    9b26:	d00b      	beq.n	9b40 <ast_enable_wakeup+0x38>
    9b28:	2b02      	cmp	r3, #2
    9b2a:	d010      	beq.n	9b4e <ast_enable_wakeup+0x46>
    9b2c:	2b00      	cmp	r3, #0
    9b2e:	d000      	beq.n	9b32 <ast_enable_wakeup+0x2a>
	case AST_WAKEUP_OVF:
		ast->AST_WER |= AST_WER_OVF_1;
		break;

	default:
		break;
    9b30:	e014      	b.n	9b5c <ast_enable_wakeup+0x54>
		ast->AST_WER |= AST_WER_ALARM0_1;
    9b32:	687b      	ldr	r3, [r7, #4]
    9b34:	69db      	ldr	r3, [r3, #28]
    9b36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    9b3a:	687b      	ldr	r3, [r7, #4]
    9b3c:	61da      	str	r2, [r3, #28]
		break;
    9b3e:	e00d      	b.n	9b5c <ast_enable_wakeup+0x54>
		ast->AST_WER |= AST_WER_PER0_1;
    9b40:	687b      	ldr	r3, [r7, #4]
    9b42:	69db      	ldr	r3, [r3, #28]
    9b44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    9b48:	687b      	ldr	r3, [r7, #4]
    9b4a:	61da      	str	r2, [r3, #28]
		break;
    9b4c:	e006      	b.n	9b5c <ast_enable_wakeup+0x54>
		ast->AST_WER |= AST_WER_OVF_1;
    9b4e:	687b      	ldr	r3, [r7, #4]
    9b50:	69db      	ldr	r3, [r3, #28]
    9b52:	f043 0201 	orr.w	r2, r3, #1
    9b56:	687b      	ldr	r3, [r7, #4]
    9b58:	61da      	str	r2, [r3, #28]
		break;
    9b5a:	bf00      	nop
	}

	/* Wait until write is done */
	while (ast_is_busy(ast)) {
    9b5c:	bf00      	nop
    9b5e:	6878      	ldr	r0, [r7, #4]
    9b60:	4b04      	ldr	r3, [pc, #16]	; (9b74 <ast_enable_wakeup+0x6c>)
    9b62:	4798      	blx	r3
    9b64:	4603      	mov	r3, r0
    9b66:	2b00      	cmp	r3, #0
    9b68:	d1f9      	bne.n	9b5e <ast_enable_wakeup+0x56>
	}
}
    9b6a:	bf00      	nop
    9b6c:	3708      	adds	r7, #8
    9b6e:	46bd      	mov	sp, r7
    9b70:	bd80      	pop	{r7, pc}
    9b72:	bf00      	nop
    9b74:	00009691 	.word	0x00009691

00009b78 <cpu_irq_save>:
{
    9b78:	b480      	push	{r7}
    9b7a:	b083      	sub	sp, #12
    9b7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    9b7e:	f3ef 8310 	mrs	r3, PRIMASK
    9b82:	607b      	str	r3, [r7, #4]
  return(result);
    9b84:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    9b86:	2b00      	cmp	r3, #0
    9b88:	bf0c      	ite	eq
    9b8a:	2301      	moveq	r3, #1
    9b8c:	2300      	movne	r3, #0
    9b8e:	b2db      	uxtb	r3, r3
    9b90:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    9b92:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    9b94:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    9b98:	4b04      	ldr	r3, [pc, #16]	; (9bac <cpu_irq_save+0x34>)
    9b9a:	2200      	movs	r2, #0
    9b9c:	701a      	strb	r2, [r3, #0]
	return flags;
    9b9e:	683b      	ldr	r3, [r7, #0]
}
    9ba0:	4618      	mov	r0, r3
    9ba2:	370c      	adds	r7, #12
    9ba4:	46bd      	mov	sp, r7
    9ba6:	bc80      	pop	{r7}
    9ba8:	4770      	bx	lr
    9baa:	bf00      	nop
    9bac:	20000074 	.word	0x20000074

00009bb0 <cpu_irq_is_enabled_flags>:
{
    9bb0:	b480      	push	{r7}
    9bb2:	b083      	sub	sp, #12
    9bb4:	af00      	add	r7, sp, #0
    9bb6:	6078      	str	r0, [r7, #4]
	return (flags);
    9bb8:	687b      	ldr	r3, [r7, #4]
    9bba:	2b00      	cmp	r3, #0
    9bbc:	bf14      	ite	ne
    9bbe:	2301      	movne	r3, #1
    9bc0:	2300      	moveq	r3, #0
    9bc2:	b2db      	uxtb	r3, r3
}
    9bc4:	4618      	mov	r0, r3
    9bc6:	370c      	adds	r7, #12
    9bc8:	46bd      	mov	sp, r7
    9bca:	bc80      	pop	{r7}
    9bcc:	4770      	bx	lr
	...

00009bd0 <cpu_irq_restore>:
{
    9bd0:	b580      	push	{r7, lr}
    9bd2:	b082      	sub	sp, #8
    9bd4:	af00      	add	r7, sp, #0
    9bd6:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    9bd8:	6878      	ldr	r0, [r7, #4]
    9bda:	4b07      	ldr	r3, [pc, #28]	; (9bf8 <cpu_irq_restore+0x28>)
    9bdc:	4798      	blx	r3
    9bde:	4603      	mov	r3, r0
    9be0:	2b00      	cmp	r3, #0
    9be2:	d005      	beq.n	9bf0 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    9be4:	4b05      	ldr	r3, [pc, #20]	; (9bfc <cpu_irq_restore+0x2c>)
    9be6:	2201      	movs	r2, #1
    9be8:	701a      	strb	r2, [r3, #0]
    9bea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    9bee:	b662      	cpsie	i
}
    9bf0:	bf00      	nop
    9bf2:	3708      	adds	r7, #8
    9bf4:	46bd      	mov	sp, r7
    9bf6:	bd80      	pop	{r7, pc}
    9bf8:	00009bb1 	.word	0x00009bb1
    9bfc:	20000074 	.word	0x20000074

00009c00 <bpm_power_scaling_cpu_failsafe>:
}


bool bpm_power_scaling_cpu_failsafe(Bpm *bpm, uint32_t ps_value,
	uint32_t timeout)
{
    9c00:	b580      	push	{r7, lr}
    9c02:	b08a      	sub	sp, #40	; 0x28
    9c04:	af00      	add	r7, sp, #0
    9c06:	60f8      	str	r0, [r7, #12]
    9c08:	60b9      	str	r1, [r7, #8]
    9c0a:	607a      	str	r2, [r7, #4]
	uint32_t pmcon = 0;
    9c0c:	2300      	movs	r3, #0
    9c0e:	627b      	str	r3, [r7, #36]	; 0x24

	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    9c10:	68fb      	ldr	r3, [r7, #12]
    9c12:	69db      	ldr	r3, [r3, #28]
    9c14:	627b      	str	r3, [r7, #36]	; 0x24

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
    9c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9c18:	f023 0303 	bic.w	r3, r3, #3
    9c1c:	627b      	str	r3, [r7, #36]	; 0x24
	pmcon |= BPM_PMCON_PS(ps_value);
    9c1e:	68bb      	ldr	r3, [r7, #8]
    9c20:	f003 0303 	and.w	r3, r3, #3
    9c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9c26:	4313      	orrs	r3, r2
    9c28:	627b      	str	r3, [r7, #36]	; 0x24

	/* Set PSCM Value: PS change no halt */
	pmcon |= BPM_PMCON_PSCM;
    9c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9c2c:	f043 0308 	orr.w	r3, r3, #8
    9c30:	627b      	str	r3, [r7, #36]	; 0x24

	/* Power Scaling Change Request */
	pmcon |= BPM_PMCON_PSCREQ;
    9c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9c34:	f043 0304 	orr.w	r3, r3, #4
    9c38:	627b      	str	r3, [r7, #36]	; 0x24
	/* Execute power scaling no halt in RAM */
	irqflags_t flags;
	bool b_psok;
	uint32_t ctrl, load, val;
	/* Avoid interrupt while flash halt */
	flags = cpu_irq_save();
    9c3a:	4b16      	ldr	r3, [pc, #88]	; (9c94 <bpm_power_scaling_cpu_failsafe+0x94>)
    9c3c:	4798      	blx	r3
    9c3e:	6238      	str	r0, [r7, #32]

	/* Save SysTick */
	val = SysTick->VAL;
    9c40:	4b15      	ldr	r3, [pc, #84]	; (9c98 <bpm_power_scaling_cpu_failsafe+0x98>)
    9c42:	689b      	ldr	r3, [r3, #8]
    9c44:	61fb      	str	r3, [r7, #28]
	ctrl = SysTick->CTRL;
    9c46:	4b14      	ldr	r3, [pc, #80]	; (9c98 <bpm_power_scaling_cpu_failsafe+0x98>)
    9c48:	681b      	ldr	r3, [r3, #0]
    9c4a:	61bb      	str	r3, [r7, #24]
	load = SysTick->LOAD;
    9c4c:	4b12      	ldr	r3, [pc, #72]	; (9c98 <bpm_power_scaling_cpu_failsafe+0x98>)
    9c4e:	685b      	ldr	r3, [r3, #4]
    9c50:	617b      	str	r3, [r7, #20]
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
    9c52:	4a11      	ldr	r2, [pc, #68]	; (9c98 <bpm_power_scaling_cpu_failsafe+0x98>)
    9c54:	687b      	ldr	r3, [r7, #4]
    9c56:	6053      	str	r3, [r2, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    9c58:	4b0f      	ldr	r3, [pc, #60]	; (9c98 <bpm_power_scaling_cpu_failsafe+0x98>)
    9c5a:	2205      	movs	r2, #5
    9c5c:	601a      	str	r2, [r3, #0]

	b_psok = bpm_ps_no_halt_exec(bpm, pmcon);
    9c5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    9c60:	68f8      	ldr	r0, [r7, #12]
    9c62:	4b0e      	ldr	r3, [pc, #56]	; (9c9c <bpm_power_scaling_cpu_failsafe+0x9c>)
    9c64:	4798      	blx	r3
    9c66:	4603      	mov	r3, r0
    9c68:	74fb      	strb	r3, [r7, #19]

	/* Restore SysTick */
	SysTick->CTRL = 0;
    9c6a:	4b0b      	ldr	r3, [pc, #44]	; (9c98 <bpm_power_scaling_cpu_failsafe+0x98>)
    9c6c:	2200      	movs	r2, #0
    9c6e:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = load;
    9c70:	4a09      	ldr	r2, [pc, #36]	; (9c98 <bpm_power_scaling_cpu_failsafe+0x98>)
    9c72:	697b      	ldr	r3, [r7, #20]
    9c74:	6053      	str	r3, [r2, #4]
	SysTick->VAL = val;
    9c76:	4a08      	ldr	r2, [pc, #32]	; (9c98 <bpm_power_scaling_cpu_failsafe+0x98>)
    9c78:	69fb      	ldr	r3, [r7, #28]
    9c7a:	6093      	str	r3, [r2, #8]
	SysTick->CTRL = ctrl;
    9c7c:	4a06      	ldr	r2, [pc, #24]	; (9c98 <bpm_power_scaling_cpu_failsafe+0x98>)
    9c7e:	69bb      	ldr	r3, [r7, #24]
    9c80:	6013      	str	r3, [r2, #0]

	cpu_irq_restore(flags);
    9c82:	6a38      	ldr	r0, [r7, #32]
    9c84:	4b06      	ldr	r3, [pc, #24]	; (9ca0 <bpm_power_scaling_cpu_failsafe+0xa0>)
    9c86:	4798      	blx	r3
	return b_psok;
    9c88:	7cfb      	ldrb	r3, [r7, #19]
}
    9c8a:	4618      	mov	r0, r3
    9c8c:	3728      	adds	r7, #40	; 0x28
    9c8e:	46bd      	mov	sp, r7
    9c90:	bd80      	pop	{r7, pc}
    9c92:	bf00      	nop
    9c94:	00009b79 	.word	0x00009b79
    9c98:	e000e010 	.word	0xe000e010
    9c9c:	20000001 	.word	0x20000001
    9ca0:	00009bd1 	.word	0x00009bd1

00009ca4 <bpm_power_scaling_cpu>:

void bpm_power_scaling_cpu(Bpm *bpm, uint32_t ps_value)
{
    9ca4:	b480      	push	{r7}
    9ca6:	b085      	sub	sp, #20
    9ca8:	af00      	add	r7, sp, #0
    9caa:	6078      	str	r0, [r7, #4]
    9cac:	6039      	str	r1, [r7, #0]
	uint32_t pmcon = 0;
    9cae:	2300      	movs	r3, #0
    9cb0:	60fb      	str	r3, [r7, #12]
	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    9cb2:	687b      	ldr	r3, [r7, #4]
    9cb4:	69db      	ldr	r3, [r3, #28]
    9cb6:	60fb      	str	r3, [r7, #12]
	/* Clear last PS Value */
	pmcon &= ~BPM_PMCON_PS_Msk;
    9cb8:	68fb      	ldr	r3, [r7, #12]
    9cba:	f023 0303 	bic.w	r3, r3, #3
    9cbe:	60fb      	str	r3, [r7, #12]
	/* Write new PS Value */
	pmcon |= BPM_PMCON_PS(ps_value);
    9cc0:	683b      	ldr	r3, [r7, #0]
    9cc2:	f003 0303 	and.w	r3, r3, #3
    9cc6:	68fa      	ldr	r2, [r7, #12]
    9cc8:	4313      	orrs	r3, r2
    9cca:	60fb      	str	r3, [r7, #12]
	/* PSCM: without CPU halt */
	pmcon |= BPM_PMCON_PSCM;
    9ccc:	68fb      	ldr	r3, [r7, #12]
    9cce:	f043 0308 	orr.w	r3, r3, #8
    9cd2:	60fb      	str	r3, [r7, #12]
	/* Power Scaling Change Request */
	pmcon |= BPM_PMCON_PSCREQ;
    9cd4:	68fb      	ldr	r3, [r7, #12]
    9cd6:	f043 0304 	orr.w	r3, r3, #4
    9cda:	60fb      	str	r3, [r7, #12]
	/* Unlock PMCON register */
	BPM_UNLOCK(PMCON);
    9cdc:	4b05      	ldr	r3, [pc, #20]	; (9cf4 <bpm_power_scaling_cpu+0x50>)
    9cde:	4a06      	ldr	r2, [pc, #24]	; (9cf8 <bpm_power_scaling_cpu+0x54>)
    9ce0:	619a      	str	r2, [r3, #24]
	/* Write back PM_CON value */
	bpm->BPM_PMCON = pmcon;
    9ce2:	687b      	ldr	r3, [r7, #4]
    9ce4:	68fa      	ldr	r2, [r7, #12]
    9ce6:	61da      	str	r2, [r3, #28]
}
    9ce8:	bf00      	nop
    9cea:	3714      	adds	r7, #20
    9cec:	46bd      	mov	sp, r7
    9cee:	bc80      	pop	{r7}
    9cf0:	4770      	bx	lr
    9cf2:	bf00      	nop
    9cf4:	400f0000 	.word	0x400f0000
    9cf8:	aa00001c 	.word	0xaa00001c

00009cfc <bpm_enable_fast_wakeup>:

void bpm_enable_fast_wakeup(Bpm *bpm)
{
    9cfc:	b480      	push	{r7}
    9cfe:	b085      	sub	sp, #20
    9d00:	af00      	add	r7, sp, #0
    9d02:	6078      	str	r0, [r7, #4]
	uint32_t pmcon = bpm->BPM_PMCON | BPM_PMCON_FASTWKUP;
    9d04:	687b      	ldr	r3, [r7, #4]
    9d06:	69db      	ldr	r3, [r3, #28]
    9d08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    9d0c:	60fb      	str	r3, [r7, #12]
	BPM_UNLOCK(PMCON);
    9d0e:	4b05      	ldr	r3, [pc, #20]	; (9d24 <bpm_enable_fast_wakeup+0x28>)
    9d10:	4a05      	ldr	r2, [pc, #20]	; (9d28 <bpm_enable_fast_wakeup+0x2c>)
    9d12:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
    9d14:	687b      	ldr	r3, [r7, #4]
    9d16:	68fa      	ldr	r2, [r7, #12]
    9d18:	61da      	str	r2, [r3, #28]
}
    9d1a:	bf00      	nop
    9d1c:	3714      	adds	r7, #20
    9d1e:	46bd      	mov	sp, r7
    9d20:	bc80      	pop	{r7}
    9d22:	4770      	bx	lr
    9d24:	400f0000 	.word	0x400f0000
    9d28:	aa00001c 	.word	0xaa00001c

00009d2c <bpm_set_clk32_source>:
	BPM_UNLOCK(PMCON);
	bpm->BPM_PMCON = pmcon;
}

void bpm_set_clk32_source(Bpm *bpm, uint32_t source)
{
    9d2c:	b480      	push	{r7}
    9d2e:	b085      	sub	sp, #20
    9d30:	af00      	add	r7, sp, #0
    9d32:	6078      	str	r0, [r7, #4]
    9d34:	6039      	str	r1, [r7, #0]
	uint32_t pmcon;

	/* Read PMCON first */
	pmcon = bpm->BPM_PMCON;
    9d36:	687b      	ldr	r3, [r7, #4]
    9d38:	69db      	ldr	r3, [r3, #28]
    9d3a:	60fb      	str	r3, [r7, #12]
	if (source == BPM_CLK32_SOURCE_OSC32K) {
    9d3c:	683b      	ldr	r3, [r7, #0]
    9d3e:	2b00      	cmp	r3, #0
    9d40:	d104      	bne.n	9d4c <bpm_set_clk32_source+0x20>
		/* Clear CK32S for OSC32K */
		pmcon &= ~BPM_PMCON_CK32S;
    9d42:	68fb      	ldr	r3, [r7, #12]
    9d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    9d48:	60fb      	str	r3, [r7, #12]
    9d4a:	e003      	b.n	9d54 <bpm_set_clk32_source+0x28>
	} else {
		/* Set CK32S for RC32K */
		pmcon |= BPM_PMCON_CK32S;
    9d4c:	68fb      	ldr	r3, [r7, #12]
    9d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9d52:	60fb      	str	r3, [r7, #12]
	}

	/* Unlock PMCON register */
	BPM_UNLOCK(PMCON);
    9d54:	4b05      	ldr	r3, [pc, #20]	; (9d6c <bpm_set_clk32_source+0x40>)
    9d56:	4a06      	ldr	r2, [pc, #24]	; (9d70 <bpm_set_clk32_source+0x44>)
    9d58:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
    9d5a:	687b      	ldr	r3, [r7, #4]
    9d5c:	68fa      	ldr	r2, [r7, #12]
    9d5e:	61da      	str	r2, [r3, #28]
}
    9d60:	bf00      	nop
    9d62:	3714      	adds	r7, #20
    9d64:	46bd      	mov	sp, r7
    9d66:	bc80      	pop	{r7}
    9d68:	4770      	bx	lr
    9d6a:	bf00      	nop
    9d6c:	400f0000 	.word	0x400f0000
    9d70:	aa00001c 	.word	0xaa00001c

00009d74 <bpm_get_status>:
{
	bpm->BPM_ICR = sources;
}

uint32_t bpm_get_status(Bpm *bpm)
{
    9d74:	b480      	push	{r7}
    9d76:	b083      	sub	sp, #12
    9d78:	af00      	add	r7, sp, #0
    9d7a:	6078      	str	r0, [r7, #4]
	return bpm->BPM_SR;
    9d7c:	687b      	ldr	r3, [r7, #4]
    9d7e:	695b      	ldr	r3, [r3, #20]
}
    9d80:	4618      	mov	r0, r3
    9d82:	370c      	adds	r7, #12
    9d84:	46bd      	mov	sp, r7
    9d86:	bc80      	pop	{r7}
    9d88:	4770      	bx	lr
	...

00009d8c <flashcalw_set_wait_state>:
 *
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
    9d8c:	b480      	push	{r7}
    9d8e:	b083      	sub	sp, #12
    9d90:	af00      	add	r7, sp, #0
    9d92:	6078      	str	r0, [r7, #4]
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    9d94:	4908      	ldr	r1, [pc, #32]	; (9db8 <flashcalw_set_wait_state+0x2c>)
    9d96:	4b08      	ldr	r3, [pc, #32]	; (9db8 <flashcalw_set_wait_state+0x2c>)
    9d98:	681b      	ldr	r3, [r3, #0]
    9d9a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
			| (wait_state ? FLASHCALW_FCR_FWS_1 :
    9d9e:	687b      	ldr	r3, [r7, #4]
    9da0:	2b00      	cmp	r3, #0
    9da2:	d001      	beq.n	9da8 <flashcalw_set_wait_state+0x1c>
    9da4:	2340      	movs	r3, #64	; 0x40
    9da6:	e000      	b.n	9daa <flashcalw_set_wait_state+0x1e>
    9da8:	2300      	movs	r3, #0
    9daa:	4313      	orrs	r3, r2
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    9dac:	600b      	str	r3, [r1, #0]
			FLASHCALW_FCR_FWS_0);
}
    9dae:	bf00      	nop
    9db0:	370c      	adds	r7, #12
    9db2:	46bd      	mov	sp, r7
    9db4:	bc80      	pop	{r7}
    9db6:	4770      	bx	lr
    9db8:	400a0000 	.word	0x400a0000

00009dbc <flashcalw_set_flash_waitstate_and_readmode>:
 * \param ps_value Power Scaling mode value (0, 1)
 * \param is_fwu_enabled (boolean), Is fast wakeup mode enabled or not
 */
void flashcalw_set_flash_waitstate_and_readmode(uint32_t cpu_f_hz,
		uint32_t ps_value, bool is_fwu_enabled)
{
    9dbc:	b580      	push	{r7, lr}
    9dbe:	b084      	sub	sp, #16
    9dc0:	af00      	add	r7, sp, #0
    9dc2:	60f8      	str	r0, [r7, #12]
    9dc4:	60b9      	str	r1, [r7, #8]
    9dc6:	4613      	mov	r3, r2
    9dc8:	71fb      	strb	r3, [r7, #7]
	}

	/* Enable the high-speed read mode. */
	flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN, -1);
#else
	if (ps_value == 0) {
    9dca:	68bb      	ldr	r3, [r7, #8]
    9dcc:	2b00      	cmp	r3, #0
    9dce:	d132      	bne.n	9e36 <flashcalw_set_flash_waitstate_and_readmode+0x7a>
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) {
    9dd0:	68fb      	ldr	r3, [r7, #12]
    9dd2:	4a23      	ldr	r2, [pc, #140]	; (9e60 <flashcalw_set_flash_waitstate_and_readmode+0xa4>)
    9dd4:	4293      	cmp	r3, r2
    9dd6:	d915      	bls.n	9e04 <flashcalw_set_flash_waitstate_and_readmode+0x48>
			// > 18MHz
			if (cpu_f_hz <= FLASH_FREQ_PS0_FWS_1_MAX_FREQ) {
    9dd8:	68fb      	ldr	r3, [r7, #12]
    9dda:	4a22      	ldr	r2, [pc, #136]	; (9e64 <flashcalw_set_flash_waitstate_and_readmode+0xa8>)
    9ddc:	4293      	cmp	r3, r2
    9dde:	d808      	bhi.n	9df2 <flashcalw_set_flash_waitstate_and_readmode+0x36>
				// <= 36MHz
				/* Set a wait-state, disable the high-speed read
				 * mode. */
				flashcalw_set_wait_state(1);
    9de0:	2001      	movs	r0, #1
    9de2:	4b21      	ldr	r3, [pc, #132]	; (9e68 <flashcalw_set_flash_waitstate_and_readmode+0xac>)
    9de4:	4798      	blx	r3
				flashcalw_issue_command(
    9de6:	f04f 31ff 	mov.w	r1, #4294967295
    9dea:	2011      	movs	r0, #17
    9dec:	4b1f      	ldr	r3, [pc, #124]	; (9e6c <flashcalw_set_flash_waitstate_and_readmode+0xb0>)
    9dee:	4798      	blx	r3

		/* Disable the high-speed read mode. */
		flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSDIS, -1);
	}
#endif
}
    9df0:	e031      	b.n	9e56 <flashcalw_set_flash_waitstate_and_readmode+0x9a>
				flashcalw_set_wait_state(1);
    9df2:	2001      	movs	r0, #1
    9df4:	4b1c      	ldr	r3, [pc, #112]	; (9e68 <flashcalw_set_flash_waitstate_and_readmode+0xac>)
    9df6:	4798      	blx	r3
				flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN,
    9df8:	f04f 31ff 	mov.w	r1, #4294967295
    9dfc:	2010      	movs	r0, #16
    9dfe:	4b1b      	ldr	r3, [pc, #108]	; (9e6c <flashcalw_set_flash_waitstate_and_readmode+0xb0>)
    9e00:	4798      	blx	r3
}
    9e02:	e028      	b.n	9e56 <flashcalw_set_flash_waitstate_and_readmode+0x9a>
			if((is_fwu_enabled == true) &&
    9e04:	79fb      	ldrb	r3, [r7, #7]
    9e06:	2b00      	cmp	r3, #0
    9e08:	d00c      	beq.n	9e24 <flashcalw_set_flash_waitstate_and_readmode+0x68>
    9e0a:	68fb      	ldr	r3, [r7, #12]
    9e0c:	4a18      	ldr	r2, [pc, #96]	; (9e70 <flashcalw_set_flash_waitstate_and_readmode+0xb4>)
    9e0e:	4293      	cmp	r3, r2
    9e10:	d808      	bhi.n	9e24 <flashcalw_set_flash_waitstate_and_readmode+0x68>
				flashcalw_set_wait_state(1);
    9e12:	2001      	movs	r0, #1
    9e14:	4b14      	ldr	r3, [pc, #80]	; (9e68 <flashcalw_set_flash_waitstate_and_readmode+0xac>)
    9e16:	4798      	blx	r3
				flashcalw_issue_command(
    9e18:	f04f 31ff 	mov.w	r1, #4294967295
    9e1c:	2011      	movs	r0, #17
    9e1e:	4b13      	ldr	r3, [pc, #76]	; (9e6c <flashcalw_set_flash_waitstate_and_readmode+0xb0>)
    9e20:	4798      	blx	r3
}
    9e22:	e018      	b.n	9e56 <flashcalw_set_flash_waitstate_and_readmode+0x9a>
				flashcalw_set_wait_state(0);
    9e24:	2000      	movs	r0, #0
    9e26:	4b10      	ldr	r3, [pc, #64]	; (9e68 <flashcalw_set_flash_waitstate_and_readmode+0xac>)
    9e28:	4798      	blx	r3
				flashcalw_issue_command(
    9e2a:	f04f 31ff 	mov.w	r1, #4294967295
    9e2e:	2011      	movs	r0, #17
    9e30:	4b0e      	ldr	r3, [pc, #56]	; (9e6c <flashcalw_set_flash_waitstate_and_readmode+0xb0>)
    9e32:	4798      	blx	r3
}
    9e34:	e00f      	b.n	9e56 <flashcalw_set_flash_waitstate_and_readmode+0x9a>
		if (cpu_f_hz > FLASH_FREQ_PS1_FWS_0_MAX_FREQ) { /* > 8MHz */
    9e36:	68fb      	ldr	r3, [r7, #12]
    9e38:	4a0e      	ldr	r2, [pc, #56]	; (9e74 <flashcalw_set_flash_waitstate_and_readmode+0xb8>)
    9e3a:	4293      	cmp	r3, r2
    9e3c:	d903      	bls.n	9e46 <flashcalw_set_flash_waitstate_and_readmode+0x8a>
			flashcalw_set_wait_state(1);
    9e3e:	2001      	movs	r0, #1
    9e40:	4b09      	ldr	r3, [pc, #36]	; (9e68 <flashcalw_set_flash_waitstate_and_readmode+0xac>)
    9e42:	4798      	blx	r3
    9e44:	e002      	b.n	9e4c <flashcalw_set_flash_waitstate_and_readmode+0x90>
			flashcalw_set_wait_state(0);
    9e46:	2000      	movs	r0, #0
    9e48:	4b07      	ldr	r3, [pc, #28]	; (9e68 <flashcalw_set_flash_waitstate_and_readmode+0xac>)
    9e4a:	4798      	blx	r3
		flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSDIS, -1);
    9e4c:	f04f 31ff 	mov.w	r1, #4294967295
    9e50:	2011      	movs	r0, #17
    9e52:	4b06      	ldr	r3, [pc, #24]	; (9e6c <flashcalw_set_flash_waitstate_and_readmode+0xb0>)
    9e54:	4798      	blx	r3
}
    9e56:	bf00      	nop
    9e58:	3710      	adds	r7, #16
    9e5a:	46bd      	mov	sp, r7
    9e5c:	bd80      	pop	{r7, pc}
    9e5e:	bf00      	nop
    9e60:	0112a880 	.word	0x0112a880
    9e64:	02255100 	.word	0x02255100
    9e68:	00009d8d 	.word	0x00009d8d
    9e6c:	00009ed5 	.word	0x00009ed5
    9e70:	00b71b00 	.word	0x00b71b00
    9e74:	007a1200 	.word	0x007a1200

00009e78 <flashcalw_is_ready>:
/*! \brief Tells whether the FLASHCALW is ready to run a new command.
 *
 * \return Whether the FLASHCALW is ready to run a new command.
 */
bool flashcalw_is_ready(void)
{
    9e78:	b480      	push	{r7}
    9e7a:	af00      	add	r7, sp, #0
	return ((HFLASHC->FLASHCALW_FSR & FLASHCALW_FSR_FRDY) != 0);
    9e7c:	4b06      	ldr	r3, [pc, #24]	; (9e98 <flashcalw_is_ready+0x20>)
    9e7e:	689b      	ldr	r3, [r3, #8]
    9e80:	f003 0301 	and.w	r3, r3, #1
    9e84:	2b00      	cmp	r3, #0
    9e86:	bf14      	ite	ne
    9e88:	2301      	movne	r3, #1
    9e8a:	2300      	moveq	r3, #0
    9e8c:	b2db      	uxtb	r3, r3
}
    9e8e:	4618      	mov	r0, r3
    9e90:	46bd      	mov	sp, r7
    9e92:	bc80      	pop	{r7}
    9e94:	4770      	bx	lr
    9e96:	bf00      	nop
    9e98:	400a0000 	.word	0x400a0000

00009e9c <flashcalw_default_wait_until_ready>:
/*! \brief Waits actively until the FLASHCALW is ready to run a new command.
 *
 * This is the default function assigned to \ref flashcalw_wait_until_ready.
 */
void flashcalw_default_wait_until_ready(void)
{
    9e9c:	b580      	push	{r7, lr}
    9e9e:	af00      	add	r7, sp, #0
	while (!flashcalw_is_ready()) {
    9ea0:	bf00      	nop
    9ea2:	4b05      	ldr	r3, [pc, #20]	; (9eb8 <flashcalw_default_wait_until_ready+0x1c>)
    9ea4:	4798      	blx	r3
    9ea6:	4603      	mov	r3, r0
    9ea8:	f083 0301 	eor.w	r3, r3, #1
    9eac:	b2db      	uxtb	r3, r3
    9eae:	2b00      	cmp	r3, #0
    9eb0:	d1f7      	bne.n	9ea2 <flashcalw_default_wait_until_ready+0x6>
	}
}
    9eb2:	bf00      	nop
    9eb4:	bd80      	pop	{r7, pc}
    9eb6:	bf00      	nop
    9eb8:	00009e79 	.word	0x00009e79

00009ebc <flashcalw_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashcalw_is_lock_error
 *          and \ref flashcalw_is_programming_error.
 */
static uint32_t flashcalw_get_error_status(void)
{
    9ebc:	b480      	push	{r7}
    9ebe:	af00      	add	r7, sp, #0
	return HFLASHC->FLASHCALW_FSR &
    9ec0:	4b03      	ldr	r3, [pc, #12]	; (9ed0 <flashcalw_get_error_status+0x14>)
    9ec2:	689b      	ldr	r3, [r3, #8]
    9ec4:	f003 030c 	and.w	r3, r3, #12
	       (FLASHCALW_FSR_LOCKE | FLASHCALW_FSR_PROGE);
}
    9ec8:	4618      	mov	r0, r3
    9eca:	46bd      	mov	sp, r7
    9ecc:	bc80      	pop	{r7}
    9ece:	4770      	bx	lr
    9ed0:	400a0000 	.word	0x400a0000

00009ed4 <flashcalw_issue_command>:
 *
 * \note The FLASHCALW error status returned by \ref flashcalw_is_lock_error and
 *       \ref flashcalw_is_programming_error is updated.
 */
void flashcalw_issue_command(uint32_t command, int page_number)
{
    9ed4:	b580      	push	{r7, lr}
    9ed6:	b084      	sub	sp, #16
    9ed8:	af00      	add	r7, sp, #0
    9eda:	6078      	str	r0, [r7, #4]
    9edc:	6039      	str	r1, [r7, #0]
	uint32_t tempo;

	flashcalw_wait_until_ready();
    9ede:	4b17      	ldr	r3, [pc, #92]	; (9f3c <flashcalw_issue_command+0x68>)
    9ee0:	681b      	ldr	r3, [r3, #0]
    9ee2:	4798      	blx	r3
	tempo = HFLASHC->FLASHCALW_FCMD;
    9ee4:	4b16      	ldr	r3, [pc, #88]	; (9f40 <flashcalw_issue_command+0x6c>)
    9ee6:	685b      	ldr	r3, [r3, #4]
    9ee8:	60fb      	str	r3, [r7, #12]
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
    9eea:	68fb      	ldr	r3, [r7, #12]
    9eec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    9ef0:	60fb      	str	r3, [r7, #12]
	if (page_number >= 0) {
    9ef2:	683b      	ldr	r3, [r7, #0]
    9ef4:	2b00      	cmp	r3, #0
    9ef6:	db0b      	blt.n	9f10 <flashcalw_issue_command+0x3c>
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
    9ef8:	683b      	ldr	r3, [r7, #0]
    9efa:	021b      	lsls	r3, r3, #8
    9efc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9f00:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    9f04:	687a      	ldr	r2, [r7, #4]
    9f06:	4313      	orrs	r3, r2
		tempo = (FLASHCALW_FCMD_KEY_KEY
    9f08:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
    9f0c:	60fb      	str	r3, [r7, #12]
    9f0e:	e005      	b.n	9f1c <flashcalw_issue_command+0x48>
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
    9f10:	687a      	ldr	r2, [r7, #4]
    9f12:	68fb      	ldr	r3, [r7, #12]
    9f14:	4313      	orrs	r3, r2
    9f16:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
    9f1a:	60fb      	str	r3, [r7, #12]
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
    9f1c:	4a08      	ldr	r2, [pc, #32]	; (9f40 <flashcalw_issue_command+0x6c>)
    9f1e:	68fb      	ldr	r3, [r7, #12]
    9f20:	6053      	str	r3, [r2, #4]
	flashcalw_error_status = flashcalw_get_error_status();
    9f22:	4b08      	ldr	r3, [pc, #32]	; (9f44 <flashcalw_issue_command+0x70>)
    9f24:	4798      	blx	r3
    9f26:	4602      	mov	r2, r0
    9f28:	4b07      	ldr	r3, [pc, #28]	; (9f48 <flashcalw_issue_command+0x74>)
    9f2a:	601a      	str	r2, [r3, #0]
	flashcalw_wait_until_ready();
    9f2c:	4b03      	ldr	r3, [pc, #12]	; (9f3c <flashcalw_issue_command+0x68>)
    9f2e:	681b      	ldr	r3, [r3, #0]
    9f30:	4798      	blx	r3
}
    9f32:	bf00      	nop
    9f34:	3710      	adds	r7, #16
    9f36:	46bd      	mov	sp, r7
    9f38:	bd80      	pop	{r7, pc}
    9f3a:	bf00      	nop
    9f3c:	20000078 	.word	0x20000078
    9f40:	400a0000 	.word	0x400a0000
    9f44:	00009ebd 	.word	0x00009ebd
    9f48:	200004c8 	.word	0x200004c8

00009f4c <ioport_pin_to_port_id>:
 *
 * \param pin IOPORT pin ID to convert
 * \retval Port ID for the given pin ID
 */
static inline ioport_port_t ioport_pin_to_port_id(ioport_pin_t pin)
{
    9f4c:	b480      	push	{r7}
    9f4e:	b085      	sub	sp, #20
    9f50:	af00      	add	r7, sp, #0
    9f52:	6078      	str	r0, [r7, #4]
    9f54:	687b      	ldr	r3, [r7, #4]
    9f56:	60fb      	str	r3, [r7, #12]
	return pin >> 5;
    9f58:	68fb      	ldr	r3, [r7, #12]
    9f5a:	095b      	lsrs	r3, r3, #5
	return arch_ioport_pin_to_port_id(pin);
    9f5c:	bf00      	nop
}
    9f5e:	4618      	mov	r0, r3
    9f60:	3714      	adds	r7, #20
    9f62:	46bd      	mov	sp, r7
    9f64:	bc80      	pop	{r7}
    9f66:	4770      	bx	lr

00009f68 <ioport_pin_to_mask>:
 *
 * \param pin IOPORT pin ID to convert
 * \retval Bitmask with a bit set that corresponds to the given pin ID in its port
 */
static inline ioport_port_mask_t ioport_pin_to_mask(ioport_pin_t pin)
{
    9f68:	b480      	push	{r7}
    9f6a:	b085      	sub	sp, #20
    9f6c:	af00      	add	r7, sp, #0
    9f6e:	6078      	str	r0, [r7, #4]
    9f70:	687b      	ldr	r3, [r7, #4]
    9f72:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
    9f74:	68fb      	ldr	r3, [r7, #12]
    9f76:	f003 031f 	and.w	r3, r3, #31
    9f7a:	2201      	movs	r2, #1
    9f7c:	fa02 f303 	lsl.w	r3, r2, r3
	return arch_ioport_pin_to_mask(pin);
    9f80:	bf00      	nop
}
    9f82:	4618      	mov	r0, r3
    9f84:	3714      	adds	r7, #20
    9f86:	46bd      	mov	sp, r7
    9f88:	bc80      	pop	{r7}
    9f8a:	4770      	bx	lr

00009f8c <gpio_common_handler>:

/**
 * Common GPIO handler.
 */
static void gpio_common_handler(uint32_t port_id, uint32_t port_mask)
{
    9f8c:	b580      	push	{r7, lr}
    9f8e:	b086      	sub	sp, #24
    9f90:	af00      	add	r7, sp, #0
    9f92:	6078      	str	r0, [r7, #4]
    9f94:	6039      	str	r1, [r7, #0]
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[port_id]);
    9f96:	687b      	ldr	r3, [r7, #4]
    9f98:	025b      	lsls	r3, r3, #9
    9f9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9f9e:	f503 2361 	add.w	r3, r3, #921600	; 0xe1000
    9fa2:	613b      	str	r3, [r7, #16]
	uint32_t i;
	uint32_t int_flags;
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
    9fa4:	693b      	ldr	r3, [r7, #16]
    9fa6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    9faa:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < gpio_nb_sources; i++) {
    9fac:	2300      	movs	r3, #0
    9fae:	617b      	str	r3, [r7, #20]
    9fb0:	e023      	b.n	9ffa <gpio_common_handler+0x6e>
		pin = gpio_int_sources[i].pin;
    9fb2:	4a19      	ldr	r2, [pc, #100]	; (a018 <gpio_common_handler+0x8c>)
    9fb4:	697b      	ldr	r3, [r7, #20]
    9fb6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    9fba:	60bb      	str	r3, [r7, #8]
		if ((ioport_pin_to_port_id(pin) == port_id) &&
    9fbc:	68b8      	ldr	r0, [r7, #8]
    9fbe:	4b17      	ldr	r3, [pc, #92]	; (a01c <gpio_common_handler+0x90>)
    9fc0:	4798      	blx	r3
    9fc2:	4602      	mov	r2, r0
    9fc4:	687b      	ldr	r3, [r7, #4]
    9fc6:	429a      	cmp	r2, r3
    9fc8:	d114      	bne.n	9ff4 <gpio_common_handler+0x68>
				(ioport_pin_to_mask(pin) & int_flags)) {
    9fca:	68b8      	ldr	r0, [r7, #8]
    9fcc:	4b14      	ldr	r3, [pc, #80]	; (a020 <gpio_common_handler+0x94>)
    9fce:	4798      	blx	r3
    9fd0:	4602      	mov	r2, r0
    9fd2:	68fb      	ldr	r3, [r7, #12]
    9fd4:	4013      	ands	r3, r2
		if ((ioport_pin_to_port_id(pin) == port_id) &&
    9fd6:	2b00      	cmp	r3, #0
    9fd8:	d00c      	beq.n	9ff4 <gpio_common_handler+0x68>
			if (gpio_int_sources[i].callback != NULL) {
    9fda:	4a0f      	ldr	r2, [pc, #60]	; (a018 <gpio_common_handler+0x8c>)
    9fdc:	697b      	ldr	r3, [r7, #20]
    9fde:	00db      	lsls	r3, r3, #3
    9fe0:	4413      	add	r3, r2
    9fe2:	685b      	ldr	r3, [r3, #4]
    9fe4:	2b00      	cmp	r3, #0
    9fe6:	d005      	beq.n	9ff4 <gpio_common_handler+0x68>
				gpio_int_sources[i].callback();
    9fe8:	4a0b      	ldr	r2, [pc, #44]	; (a018 <gpio_common_handler+0x8c>)
    9fea:	697b      	ldr	r3, [r7, #20]
    9fec:	00db      	lsls	r3, r3, #3
    9fee:	4413      	add	r3, r2
    9ff0:	685b      	ldr	r3, [r3, #4]
    9ff2:	4798      	blx	r3
	for (i = 0; i < gpio_nb_sources; i++) {
    9ff4:	697b      	ldr	r3, [r7, #20]
    9ff6:	3301      	adds	r3, #1
    9ff8:	617b      	str	r3, [r7, #20]
    9ffa:	4b0a      	ldr	r3, [pc, #40]	; (a024 <gpio_common_handler+0x98>)
    9ffc:	681b      	ldr	r3, [r3, #0]
    9ffe:	697a      	ldr	r2, [r7, #20]
    a000:	429a      	cmp	r2, r3
    a002:	d3d6      	bcc.n	9fb2 <gpio_common_handler+0x26>
				Assert(false); /* Catch unexpected interrupt */
			}
		}
	}

	gpio_port->GPIO_IFRC = (int_flags & port_mask);
    a004:	68fa      	ldr	r2, [r7, #12]
    a006:	683b      	ldr	r3, [r7, #0]
    a008:	401a      	ands	r2, r3
    a00a:	693b      	ldr	r3, [r7, #16]
    a00c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
}
    a010:	bf00      	nop
    a012:	3718      	adds	r7, #24
    a014:	46bd      	mov	sp, r7
    a016:	bd80      	pop	{r7, pc}
    a018:	200004cc 	.word	0x200004cc
    a01c:	00009f4d 	.word	0x00009f4d
    a020:	00009f69 	.word	0x00009f69
    a024:	200004fc 	.word	0x200004fc

0000a028 <GPIO_0_Handler>:

/**
 * GPIO handler 0 (PA 0..7)
 */
void GPIO_0_Handler(void)
{
    a028:	b580      	push	{r7, lr}
    a02a:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOA, GPIO_INT_GROUP_MASK);
    a02c:	21ff      	movs	r1, #255	; 0xff
    a02e:	2000      	movs	r0, #0
    a030:	4b01      	ldr	r3, [pc, #4]	; (a038 <GPIO_0_Handler+0x10>)
    a032:	4798      	blx	r3
}
    a034:	bf00      	nop
    a036:	bd80      	pop	{r7, pc}
    a038:	00009f8d 	.word	0x00009f8d

0000a03c <GPIO_1_Handler>:

/**
 * GPIO handler 1 (PA 8..15)
 */
void GPIO_1_Handler(void)
{
    a03c:	b580      	push	{r7, lr}
    a03e:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 8));
    a040:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    a044:	2000      	movs	r0, #0
    a046:	4b02      	ldr	r3, [pc, #8]	; (a050 <GPIO_1_Handler+0x14>)
    a048:	4798      	blx	r3
}
    a04a:	bf00      	nop
    a04c:	bd80      	pop	{r7, pc}
    a04e:	bf00      	nop
    a050:	00009f8d 	.word	0x00009f8d

0000a054 <GPIO_2_Handler>:

/**
 * GPIO handler 2 (PA 16..23)
 */
void GPIO_2_Handler(void)
{
    a054:	b580      	push	{r7, lr}
    a056:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 16));
    a058:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    a05c:	2000      	movs	r0, #0
    a05e:	4b02      	ldr	r3, [pc, #8]	; (a068 <GPIO_2_Handler+0x14>)
    a060:	4798      	blx	r3
}
    a062:	bf00      	nop
    a064:	bd80      	pop	{r7, pc}
    a066:	bf00      	nop
    a068:	00009f8d 	.word	0x00009f8d

0000a06c <GPIO_3_Handler>:

/**
 * GPIO handler 3 (PA 24..31)
 */
void GPIO_3_Handler(void)
{
    a06c:	b580      	push	{r7, lr}
    a06e:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 24));
    a070:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    a074:	2000      	movs	r0, #0
    a076:	4b02      	ldr	r3, [pc, #8]	; (a080 <GPIO_3_Handler+0x14>)
    a078:	4798      	blx	r3
}
    a07a:	bf00      	nop
    a07c:	bd80      	pop	{r7, pc}
    a07e:	bf00      	nop
    a080:	00009f8d 	.word	0x00009f8d

0000a084 <GPIO_4_Handler>:

/**
 * GPIO handler 4 (PB 0..7)
 */
void GPIO_4_Handler(void)
{
    a084:	b580      	push	{r7, lr}
    a086:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOB, GPIO_INT_GROUP_MASK);
    a088:	21ff      	movs	r1, #255	; 0xff
    a08a:	2001      	movs	r0, #1
    a08c:	4b01      	ldr	r3, [pc, #4]	; (a094 <GPIO_4_Handler+0x10>)
    a08e:	4798      	blx	r3
}
    a090:	bf00      	nop
    a092:	bd80      	pop	{r7, pc}
    a094:	00009f8d 	.word	0x00009f8d

0000a098 <GPIO_5_Handler>:

/**
 * GPIO handler 5 (PB 8..15)
 */
void GPIO_5_Handler(void)
{
    a098:	b580      	push	{r7, lr}
    a09a:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 8));
    a09c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    a0a0:	2001      	movs	r0, #1
    a0a2:	4b02      	ldr	r3, [pc, #8]	; (a0ac <GPIO_5_Handler+0x14>)
    a0a4:	4798      	blx	r3
}
    a0a6:	bf00      	nop
    a0a8:	bd80      	pop	{r7, pc}
    a0aa:	bf00      	nop
    a0ac:	00009f8d 	.word	0x00009f8d

0000a0b0 <GPIO_6_Handler>:

/**
 * GPIO handler 6 (PB 16..23)
 */
void GPIO_6_Handler(void)
{
    a0b0:	b580      	push	{r7, lr}
    a0b2:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 16));
    a0b4:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    a0b8:	2001      	movs	r0, #1
    a0ba:	4b02      	ldr	r3, [pc, #8]	; (a0c4 <GPIO_6_Handler+0x14>)
    a0bc:	4798      	blx	r3
}
    a0be:	bf00      	nop
    a0c0:	bd80      	pop	{r7, pc}
    a0c2:	bf00      	nop
    a0c4:	00009f8d 	.word	0x00009f8d

0000a0c8 <GPIO_7_Handler>:

/**
 * GPIO handler 7 (PB 24..31)
 */
void GPIO_7_Handler(void)
{
    a0c8:	b580      	push	{r7, lr}
    a0ca:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 24));
    a0cc:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    a0d0:	2001      	movs	r0, #1
    a0d2:	4b02      	ldr	r3, [pc, #8]	; (a0dc <GPIO_7_Handler+0x14>)
    a0d4:	4798      	blx	r3
}
    a0d6:	bf00      	nop
    a0d8:	bd80      	pop	{r7, pc}
    a0da:	bf00      	nop
    a0dc:	00009f8d 	.word	0x00009f8d

0000a0e0 <GPIO_8_Handler>:

/**
 * GPIO handler 8 (PC 0..7)
 */
void GPIO_8_Handler(void)
{
    a0e0:	b580      	push	{r7, lr}
    a0e2:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOC, GPIO_INT_GROUP_MASK);
    a0e4:	21ff      	movs	r1, #255	; 0xff
    a0e6:	2002      	movs	r0, #2
    a0e8:	4b01      	ldr	r3, [pc, #4]	; (a0f0 <GPIO_8_Handler+0x10>)
    a0ea:	4798      	blx	r3
}
    a0ec:	bf00      	nop
    a0ee:	bd80      	pop	{r7, pc}
    a0f0:	00009f8d 	.word	0x00009f8d

0000a0f4 <GPIO_9_Handler>:

/**
 * GPIO handler 9 (PC 8..15)
 */
void GPIO_9_Handler(void)
{
    a0f4:	b580      	push	{r7, lr}
    a0f6:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 8));
    a0f8:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    a0fc:	2002      	movs	r0, #2
    a0fe:	4b02      	ldr	r3, [pc, #8]	; (a108 <GPIO_9_Handler+0x14>)
    a100:	4798      	blx	r3
}
    a102:	bf00      	nop
    a104:	bd80      	pop	{r7, pc}
    a106:	bf00      	nop
    a108:	00009f8d 	.word	0x00009f8d

0000a10c <GPIO_10_Handler>:

/**
 * GPIO handler 10 (PC 16..23)
 */
void GPIO_10_Handler(void)
{
    a10c:	b580      	push	{r7, lr}
    a10e:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 16));
    a110:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    a114:	2002      	movs	r0, #2
    a116:	4b02      	ldr	r3, [pc, #8]	; (a120 <GPIO_10_Handler+0x14>)
    a118:	4798      	blx	r3
}
    a11a:	bf00      	nop
    a11c:	bd80      	pop	{r7, pc}
    a11e:	bf00      	nop
    a120:	00009f8d 	.word	0x00009f8d

0000a124 <GPIO_11_Handler>:

/**
 * GPIO handler 11 (PC 24..31)
 */
void GPIO_11_Handler(void)
{
    a124:	b580      	push	{r7, lr}
    a126:	af00      	add	r7, sp, #0
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 24));
    a128:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    a12c:	2002      	movs	r0, #2
    a12e:	4b02      	ldr	r3, [pc, #8]	; (a138 <GPIO_11_Handler+0x14>)
    a130:	4798      	blx	r3
}
    a132:	bf00      	nop
    a134:	bd80      	pop	{r7, pc}
    a136:	bf00      	nop
    a138:	00009f8d 	.word	0x00009f8d

0000a13c <cpu_irq_save>:
{
    a13c:	b480      	push	{r7}
    a13e:	b083      	sub	sp, #12
    a140:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a142:	f3ef 8310 	mrs	r3, PRIMASK
    a146:	607b      	str	r3, [r7, #4]
  return(result);
    a148:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    a14a:	2b00      	cmp	r3, #0
    a14c:	bf0c      	ite	eq
    a14e:	2301      	moveq	r3, #1
    a150:	2300      	movne	r3, #0
    a152:	b2db      	uxtb	r3, r3
    a154:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    a156:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    a158:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    a15c:	4b04      	ldr	r3, [pc, #16]	; (a170 <cpu_irq_save+0x34>)
    a15e:	2200      	movs	r2, #0
    a160:	701a      	strb	r2, [r3, #0]
	return flags;
    a162:	683b      	ldr	r3, [r7, #0]
}
    a164:	4618      	mov	r0, r3
    a166:	370c      	adds	r7, #12
    a168:	46bd      	mov	sp, r7
    a16a:	bc80      	pop	{r7}
    a16c:	4770      	bx	lr
    a16e:	bf00      	nop
    a170:	20000074 	.word	0x20000074

0000a174 <cpu_irq_is_enabled_flags>:
{
    a174:	b480      	push	{r7}
    a176:	b083      	sub	sp, #12
    a178:	af00      	add	r7, sp, #0
    a17a:	6078      	str	r0, [r7, #4]
	return (flags);
    a17c:	687b      	ldr	r3, [r7, #4]
    a17e:	2b00      	cmp	r3, #0
    a180:	bf14      	ite	ne
    a182:	2301      	movne	r3, #1
    a184:	2300      	moveq	r3, #0
    a186:	b2db      	uxtb	r3, r3
}
    a188:	4618      	mov	r0, r3
    a18a:	370c      	adds	r7, #12
    a18c:	46bd      	mov	sp, r7
    a18e:	bc80      	pop	{r7}
    a190:	4770      	bx	lr
	...

0000a194 <cpu_irq_restore>:
{
    a194:	b580      	push	{r7, lr}
    a196:	b082      	sub	sp, #8
    a198:	af00      	add	r7, sp, #0
    a19a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    a19c:	6878      	ldr	r0, [r7, #4]
    a19e:	4b07      	ldr	r3, [pc, #28]	; (a1bc <cpu_irq_restore+0x28>)
    a1a0:	4798      	blx	r3
    a1a2:	4603      	mov	r3, r0
    a1a4:	2b00      	cmp	r3, #0
    a1a6:	d005      	beq.n	a1b4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    a1a8:	4b05      	ldr	r3, [pc, #20]	; (a1c0 <cpu_irq_restore+0x2c>)
    a1aa:	2201      	movs	r2, #1
    a1ac:	701a      	strb	r2, [r3, #0]
    a1ae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    a1b2:	b662      	cpsie	i
}
    a1b4:	bf00      	nop
    a1b6:	3708      	adds	r7, #8
    a1b8:	46bd      	mov	sp, r7
    a1ba:	bd80      	pop	{r7, pc}
    a1bc:	0000a175 	.word	0x0000a175
    a1c0:	20000074 	.word	0x20000074

0000a1c4 <osc_enable>:
{
    a1c4:	b580      	push	{r7, lr}
    a1c6:	b082      	sub	sp, #8
    a1c8:	af00      	add	r7, sp, #0
    a1ca:	4603      	mov	r3, r0
    a1cc:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    a1ce:	79fb      	ldrb	r3, [r7, #7]
    a1d0:	2b06      	cmp	r3, #6
    a1d2:	d823      	bhi.n	a21c <osc_enable+0x58>
    a1d4:	a201      	add	r2, pc, #4	; (adr r2, a1dc <osc_enable+0x18>)
    a1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a1da:	bf00      	nop
    a1dc:	0000a1f9 	.word	0x0000a1f9
    a1e0:	0000a1ff 	.word	0x0000a1ff
    a1e4:	0000a205 	.word	0x0000a205
    a1e8:	0000a20b 	.word	0x0000a20b
    a1ec:	0000a211 	.word	0x0000a211
    a1f0:	0000a217 	.word	0x0000a217
    a1f4:	0000a21d 	.word	0x0000a21d
		osc_priv_enable_osc0();
    a1f8:	4b0b      	ldr	r3, [pc, #44]	; (a228 <osc_enable+0x64>)
    a1fa:	4798      	blx	r3
		break;
    a1fc:	e00f      	b.n	a21e <osc_enable+0x5a>
		osc_priv_enable_osc32();
    a1fe:	4b0b      	ldr	r3, [pc, #44]	; (a22c <osc_enable+0x68>)
    a200:	4798      	blx	r3
		break;
    a202:	e00c      	b.n	a21e <osc_enable+0x5a>
		osc_priv_enable_rc32k();
    a204:	4b0a      	ldr	r3, [pc, #40]	; (a230 <osc_enable+0x6c>)
    a206:	4798      	blx	r3
		break;
    a208:	e009      	b.n	a21e <osc_enable+0x5a>
		osc_priv_enable_rc80m();
    a20a:	4b0a      	ldr	r3, [pc, #40]	; (a234 <osc_enable+0x70>)
    a20c:	4798      	blx	r3
		break;
    a20e:	e006      	b.n	a21e <osc_enable+0x5a>
		osc_priv_enable_rcfast();
    a210:	4b09      	ldr	r3, [pc, #36]	; (a238 <osc_enable+0x74>)
    a212:	4798      	blx	r3
		break;
    a214:	e003      	b.n	a21e <osc_enable+0x5a>
		osc_priv_enable_rc1m();
    a216:	4b09      	ldr	r3, [pc, #36]	; (a23c <osc_enable+0x78>)
    a218:	4798      	blx	r3
		break;
    a21a:	e000      	b.n	a21e <osc_enable+0x5a>
		break;
    a21c:	bf00      	nop
}
    a21e:	bf00      	nop
    a220:	3708      	adds	r7, #8
    a222:	46bd      	mov	sp, r7
    a224:	bd80      	pop	{r7, pc}
    a226:	bf00      	nop
    a228:	00008241 	.word	0x00008241
    a22c:	0000827d 	.word	0x0000827d
    a230:	000082b9 	.word	0x000082b9
    a234:	00008339 	.word	0x00008339
    a238:	00008379 	.word	0x00008379
    a23c:	000082f9 	.word	0x000082f9

0000a240 <osc_is_ready>:
{
    a240:	b480      	push	{r7}
    a242:	b083      	sub	sp, #12
    a244:	af00      	add	r7, sp, #0
    a246:	4603      	mov	r3, r0
    a248:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    a24a:	79fb      	ldrb	r3, [r7, #7]
    a24c:	2b06      	cmp	r3, #6
    a24e:	d84f      	bhi.n	a2f0 <osc_is_ready+0xb0>
    a250:	a201      	add	r2, pc, #4	; (adr r2, a258 <osc_is_ready+0x18>)
    a252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a256:	bf00      	nop
    a258:	0000a275 	.word	0x0000a275
    a25c:	0000a289 	.word	0x0000a289
    a260:	0000a29d 	.word	0x0000a29d
    a264:	0000a2b1 	.word	0x0000a2b1
    a268:	0000a2c5 	.word	0x0000a2c5
    a26c:	0000a2d9 	.word	0x0000a2d9
    a270:	0000a2ed 	.word	0x0000a2ed
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
    a274:	4b21      	ldr	r3, [pc, #132]	; (a2fc <osc_is_ready+0xbc>)
    a276:	695b      	ldr	r3, [r3, #20]
    a278:	f003 0301 	and.w	r3, r3, #1
    a27c:	2b00      	cmp	r3, #0
    a27e:	bf14      	ite	ne
    a280:	2301      	movne	r3, #1
    a282:	2300      	moveq	r3, #0
    a284:	b2db      	uxtb	r3, r3
    a286:	e034      	b.n	a2f2 <osc_is_ready+0xb2>
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    a288:	4b1d      	ldr	r3, [pc, #116]	; (a300 <osc_is_ready+0xc0>)
    a28a:	695b      	ldr	r3, [r3, #20]
    a28c:	f003 0301 	and.w	r3, r3, #1
    a290:	2b00      	cmp	r3, #0
    a292:	bf14      	ite	ne
    a294:	2301      	movne	r3, #1
    a296:	2300      	moveq	r3, #0
    a298:	b2db      	uxtb	r3, r3
    a29a:	e02a      	b.n	a2f2 <osc_is_ready+0xb2>
		return !!(BSCIF->BSCIF_RC32KCR & (BSCIF_RC32KCR_EN));
    a29c:	4b18      	ldr	r3, [pc, #96]	; (a300 <osc_is_ready+0xc0>)
    a29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a2a0:	f003 0301 	and.w	r3, r3, #1
    a2a4:	2b00      	cmp	r3, #0
    a2a6:	bf14      	ite	ne
    a2a8:	2301      	movne	r3, #1
    a2aa:	2300      	moveq	r3, #0
    a2ac:	b2db      	uxtb	r3, r3
    a2ae:	e020      	b.n	a2f2 <osc_is_ready+0xb2>
		return !!(SCIF->SCIF_RC80MCR & (SCIF_RC80MCR_EN));
    a2b0:	4b12      	ldr	r3, [pc, #72]	; (a2fc <osc_is_ready+0xbc>)
    a2b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    a2b4:	f003 0301 	and.w	r3, r3, #1
    a2b8:	2b00      	cmp	r3, #0
    a2ba:	bf14      	ite	ne
    a2bc:	2301      	movne	r3, #1
    a2be:	2300      	moveq	r3, #0
    a2c0:	b2db      	uxtb	r3, r3
    a2c2:	e016      	b.n	a2f2 <osc_is_ready+0xb2>
		return !!(SCIF->SCIF_RCFASTCFG & (SCIF_RCFASTCFG_EN));
    a2c4:	4b0d      	ldr	r3, [pc, #52]	; (a2fc <osc_is_ready+0xbc>)
    a2c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    a2c8:	f003 0301 	and.w	r3, r3, #1
    a2cc:	2b00      	cmp	r3, #0
    a2ce:	bf14      	ite	ne
    a2d0:	2301      	movne	r3, #1
    a2d2:	2300      	moveq	r3, #0
    a2d4:	b2db      	uxtb	r3, r3
    a2d6:	e00c      	b.n	a2f2 <osc_is_ready+0xb2>
		return !!(BSCIF->BSCIF_RC1MCR & (BSCIF_RC1MCR_CLKOE));
    a2d8:	4b09      	ldr	r3, [pc, #36]	; (a300 <osc_is_ready+0xc0>)
    a2da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a2dc:	f003 0301 	and.w	r3, r3, #1
    a2e0:	2b00      	cmp	r3, #0
    a2e2:	bf14      	ite	ne
    a2e4:	2301      	movne	r3, #1
    a2e6:	2300      	moveq	r3, #0
    a2e8:	b2db      	uxtb	r3, r3
    a2ea:	e002      	b.n	a2f2 <osc_is_ready+0xb2>
		return true;
    a2ec:	2301      	movs	r3, #1
    a2ee:	e000      	b.n	a2f2 <osc_is_ready+0xb2>
		return false;
    a2f0:	2300      	movs	r3, #0
}
    a2f2:	4618      	mov	r0, r3
    a2f4:	370c      	adds	r7, #12
    a2f6:	46bd      	mov	sp, r7
    a2f8:	bc80      	pop	{r7}
    a2fa:	4770      	bx	lr
    a2fc:	400e0800 	.word	0x400e0800
    a300:	400f0400 	.word	0x400f0400

0000a304 <osc_wait_ready>:
{
    a304:	b580      	push	{r7, lr}
    a306:	b082      	sub	sp, #8
    a308:	af00      	add	r7, sp, #0
    a30a:	4603      	mov	r3, r0
    a30c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
    a30e:	bf00      	nop
    a310:	79fb      	ldrb	r3, [r7, #7]
    a312:	4618      	mov	r0, r3
    a314:	4b05      	ldr	r3, [pc, #20]	; (a32c <osc_wait_ready+0x28>)
    a316:	4798      	blx	r3
    a318:	4603      	mov	r3, r0
    a31a:	f083 0301 	eor.w	r3, r3, #1
    a31e:	b2db      	uxtb	r3, r3
    a320:	2b00      	cmp	r3, #0
    a322:	d1f5      	bne.n	a310 <osc_wait_ready+0xc>
}
    a324:	bf00      	nop
    a326:	3708      	adds	r7, #8
    a328:	46bd      	mov	sp, r7
    a32a:	bd80      	pop	{r7, pc}
    a32c:	0000a241 	.word	0x0000a241

0000a330 <lcdca_clear_status>:

/**
 * \brief Clear the LCDCA beginning of frame interrupt status.
 */
static inline void lcdca_clear_status(void)
{
    a330:	b480      	push	{r7}
    a332:	af00      	add	r7, sp, #0
	LCDCA->LCDCA_SCR = LCDCA_SCR_FC0R;
    a334:	4b03      	ldr	r3, [pc, #12]	; (a344 <lcdca_clear_status+0x14>)
    a336:	2201      	movs	r2, #1
    a338:	611a      	str	r2, [r3, #16]
}
    a33a:	bf00      	nop
    a33c:	46bd      	mov	sp, r7
    a33e:	bc80      	pop	{r7}
    a340:	4770      	bx	lr
    a342:	bf00      	nop
    a344:	40080000 	.word	0x40080000

0000a348 <sleepmgr_lock_mode>:
{
    a348:	b580      	push	{r7, lr}
    a34a:	b084      	sub	sp, #16
    a34c:	af00      	add	r7, sp, #0
    a34e:	4603      	mov	r3, r0
    a350:	71fb      	strb	r3, [r7, #7]
	if(sleepmgr_locks[mode] >= 0xff) {
    a352:	79fb      	ldrb	r3, [r7, #7]
    a354:	4a0a      	ldr	r2, [pc, #40]	; (a380 <sleepmgr_lock_mode+0x38>)
    a356:	5cd3      	ldrb	r3, [r2, r3]
    a358:	2bff      	cmp	r3, #255	; 0xff
    a35a:	d100      	bne.n	a35e <sleepmgr_lock_mode+0x16>
		while (true) {
    a35c:	e7fe      	b.n	a35c <sleepmgr_lock_mode+0x14>
	flags = cpu_irq_save();
    a35e:	4b09      	ldr	r3, [pc, #36]	; (a384 <sleepmgr_lock_mode+0x3c>)
    a360:	4798      	blx	r3
    a362:	60f8      	str	r0, [r7, #12]
	++sleepmgr_locks[mode];
    a364:	79fb      	ldrb	r3, [r7, #7]
    a366:	4a06      	ldr	r2, [pc, #24]	; (a380 <sleepmgr_lock_mode+0x38>)
    a368:	5cd2      	ldrb	r2, [r2, r3]
    a36a:	3201      	adds	r2, #1
    a36c:	b2d1      	uxtb	r1, r2
    a36e:	4a04      	ldr	r2, [pc, #16]	; (a380 <sleepmgr_lock_mode+0x38>)
    a370:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
    a372:	68f8      	ldr	r0, [r7, #12]
    a374:	4b04      	ldr	r3, [pc, #16]	; (a388 <sleepmgr_lock_mode+0x40>)
    a376:	4798      	blx	r3
}
    a378:	bf00      	nop
    a37a:	3710      	adds	r7, #16
    a37c:	46bd      	mov	sp, r7
    a37e:	bd80      	pop	{r7, pc}
    a380:	20003dc4 	.word	0x20003dc4
    a384:	0000a13d 	.word	0x0000a13d
    a388:	0000a195 	.word	0x0000a195

0000a38c <lcdca_clk_init>:

/**
 * \brief LCDCA clock initialization.
 */
void lcdca_clk_init(void)
{
    a38c:	b580      	push	{r7, lr}
    a38e:	af00      	add	r7, sp, #0
	/* Enable APB clock for LCDCA */
	sysclk_enable_peripheral_clock(LCDCA);
    a390:	480b      	ldr	r0, [pc, #44]	; (a3c0 <lcdca_clk_init+0x34>)
    a392:	4b0c      	ldr	r3, [pc, #48]	; (a3c4 <lcdca_clk_init+0x38>)
    a394:	4798      	blx	r3

	/* Switch LCD input to selected source clock */

	if (!osc_is_ready(OSC_ID_RC32K)) {
    a396:	2002      	movs	r0, #2
    a398:	4b0b      	ldr	r3, [pc, #44]	; (a3c8 <lcdca_clk_init+0x3c>)
    a39a:	4798      	blx	r3
    a39c:	4603      	mov	r3, r0
    a39e:	f083 0301 	eor.w	r3, r3, #1
    a3a2:	b2db      	uxtb	r3, r3
    a3a4:	2b00      	cmp	r3, #0
    a3a6:	d005      	beq.n	a3b4 <lcdca_clk_init+0x28>
		osc_enable(OSC_ID_RC32K);
    a3a8:	2002      	movs	r0, #2
    a3aa:	4b08      	ldr	r3, [pc, #32]	; (a3cc <lcdca_clk_init+0x40>)
    a3ac:	4798      	blx	r3
		osc_wait_ready(OSC_ID_RC32K);
    a3ae:	2002      	movs	r0, #2
    a3b0:	4b07      	ldr	r3, [pc, #28]	; (a3d0 <lcdca_clk_init+0x44>)
    a3b2:	4798      	blx	r3
	}
	bpm_set_clk32_source(BPM, BPM_CLK32_SOURCE_RC32K);
    a3b4:	2101      	movs	r1, #1
    a3b6:	4807      	ldr	r0, [pc, #28]	; (a3d4 <lcdca_clk_init+0x48>)
    a3b8:	4b07      	ldr	r3, [pc, #28]	; (a3d8 <lcdca_clk_init+0x4c>)
    a3ba:	4798      	blx	r3
}
    a3bc:	bf00      	nop
    a3be:	bd80      	pop	{r7, pc}
    a3c0:	40080000 	.word	0x40080000
    a3c4:	000088e5 	.word	0x000088e5
    a3c8:	0000a241 	.word	0x0000a241
    a3cc:	0000a1c5 	.word	0x0000a1c5
    a3d0:	0000a305 	.word	0x0000a305
    a3d4:	400f0000 	.word	0x400f0000
    a3d8:	00009d2d 	.word	0x00009d2d

0000a3dc <lcdca_set_config>:
 *
 * \param[in] lcdca_cfg Pointer to an LCDCA configuration structure
 */
void lcdca_set_config(
		struct lcdca_config *lcdca_cfg)
{
    a3dc:	b580      	push	{r7, lr}
    a3de:	b082      	sub	sp, #8
    a3e0:	af00      	add	r7, sp, #0
    a3e2:	6078      	str	r0, [r7, #4]
	/* Validate parameters. */
	Assert(lcdca_cfg);
	
	/* Disable LCD controller and frame counter timer */
	LCDCA->LCDCA_CR = LCDCA_CR_DIS | LCDCA_CR_FC0DIS | LCDCA_CR_FC1DIS |
    a3e4:	4b22      	ldr	r3, [pc, #136]	; (a470 <lcdca_set_config+0x94>)
    a3e6:	2255      	movs	r2, #85	; 0x55
    a3e8:	601a      	str	r2, [r3, #0]
		LCDCA_CR_FC2DIS;
	/* Set new timer */
	LCDCA->LCDCA_TIM = LCDCA_TIM_FC2(lcdca_cfg->fc2) |
    a3ea:	4921      	ldr	r1, [pc, #132]	; (a470 <lcdca_set_config+0x94>)
    a3ec:	687b      	ldr	r3, [r7, #4]
    a3ee:	7a1b      	ldrb	r3, [r3, #8]
    a3f0:	061b      	lsls	r3, r3, #24
    a3f2:	f003 52f8 	and.w	r2, r3, #520093696	; 0x1f000000
			LCDCA_TIM_FC1(lcdca_cfg->fc1) |
    a3f6:	687b      	ldr	r3, [r7, #4]
    a3f8:	79db      	ldrb	r3, [r3, #7]
    a3fa:	041b      	lsls	r3, r3, #16
    a3fc:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
	LCDCA->LCDCA_TIM = LCDCA_TIM_FC2(lcdca_cfg->fc2) |
    a400:	431a      	orrs	r2, r3
			LCDCA_TIM_FC0(lcdca_cfg->fc0) |
    a402:	687b      	ldr	r3, [r7, #4]
    a404:	799b      	ldrb	r3, [r3, #6]
    a406:	021b      	lsls	r3, r3, #8
    a408:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
			LCDCA_TIM_FC1(lcdca_cfg->fc1) |
    a40c:	431a      	orrs	r2, r3
			LCDCA_TIM_CLKDIV(lcdca_cfg->lcd_clkdiv) |
    a40e:	687b      	ldr	r3, [r7, #4]
    a410:	795b      	ldrb	r3, [r3, #5]
    a412:	005b      	lsls	r3, r3, #1
    a414:	f003 030e 	and.w	r3, r3, #14
			LCDCA_TIM_FC0(lcdca_cfg->fc0) |
    a418:	4313      	orrs	r3, r2
			(uint32_t)lcdca_cfg->lcd_pres;
    a41a:	687a      	ldr	r2, [r7, #4]
    a41c:	7912      	ldrb	r2, [r2, #4]
			LCDCA_TIM_CLKDIV(lcdca_cfg->lcd_clkdiv) |
    a41e:	4313      	orrs	r3, r2
	LCDCA->LCDCA_TIM = LCDCA_TIM_FC2(lcdca_cfg->fc2) |
    a420:	608b      	str	r3, [r1, #8]

	/* Set basic configuration */
	LCDCA->LCDCA_CFG = LCDCA_CFG_NSU(lcdca_cfg->port_mask) |
    a422:	4913      	ldr	r1, [pc, #76]	; (a470 <lcdca_set_config+0x94>)
    a424:	687b      	ldr	r3, [r7, #4]
    a426:	781b      	ldrb	r3, [r3, #0]
    a428:	061b      	lsls	r3, r3, #24
    a42a:	f003 527c 	and.w	r2, r3, #1056964608	; 0x3f000000
			(lcdca_cfg->x_bias ? LCDCA_CFG_XBIAS : 0) |
    a42e:	687b      	ldr	r3, [r7, #4]
    a430:	785b      	ldrb	r3, [r3, #1]
    a432:	2b00      	cmp	r3, #0
    a434:	d001      	beq.n	a43a <lcdca_set_config+0x5e>
    a436:	2301      	movs	r3, #1
    a438:	e000      	b.n	a43c <lcdca_set_config+0x60>
    a43a:	2300      	movs	r3, #0
	LCDCA->LCDCA_CFG = LCDCA_CFG_NSU(lcdca_cfg->port_mask) |
    a43c:	431a      	orrs	r2, r3
			(lcdca_cfg->lp_wave ? 0 : LCDCA_CFG_WMOD) |
    a43e:	687b      	ldr	r3, [r7, #4]
    a440:	789b      	ldrb	r3, [r3, #2]
    a442:	2b00      	cmp	r3, #0
    a444:	d001      	beq.n	a44a <lcdca_set_config+0x6e>
    a446:	2300      	movs	r3, #0
    a448:	e000      	b.n	a44c <lcdca_set_config+0x70>
    a44a:	2302      	movs	r3, #2
			(lcdca_cfg->x_bias ? LCDCA_CFG_XBIAS : 0) |
    a44c:	431a      	orrs	r2, r3
			LCDCA_CFG_DUTY(lcdca_cfg->duty_type);
    a44e:	687b      	ldr	r3, [r7, #4]
    a450:	78db      	ldrb	r3, [r3, #3]
    a452:	021b      	lsls	r3, r3, #8
    a454:	f403 7340 	and.w	r3, r3, #768	; 0x300
			(lcdca_cfg->lp_wave ? 0 : LCDCA_CFG_WMOD) |
    a458:	4313      	orrs	r3, r2
	LCDCA->LCDCA_CFG = LCDCA_CFG_NSU(lcdca_cfg->port_mask) |
    a45a:	604b      	str	r3, [r1, #4]

	/* Set contrast */
	lcdca_set_contrast(lcdca_cfg->contrast);
    a45c:	687b      	ldr	r3, [r7, #4]
    a45e:	f993 3009 	ldrsb.w	r3, [r3, #9]
    a462:	4618      	mov	r0, r3
    a464:	4b03      	ldr	r3, [pc, #12]	; (a474 <lcdca_set_config+0x98>)
    a466:	4798      	blx	r3
}
    a468:	bf00      	nop
    a46a:	3708      	adds	r7, #8
    a46c:	46bd      	mov	sp, r7
    a46e:	bd80      	pop	{r7, pc}
    a470:	40080000 	.word	0x40080000
    a474:	0000a4b9 	.word	0x0000a4b9

0000a478 <lcdca_enable>:

/**
 * \brief Enable the LCDCA module.
 */
void lcdca_enable(void)
{
    a478:	b580      	push	{r7, lr}
    a47a:	af00      	add	r7, sp, #0
	sleepmgr_lock_mode(SLEEPMGR_RET);
    a47c:	2006      	movs	r0, #6
    a47e:	4b0c      	ldr	r3, [pc, #48]	; (a4b0 <lcdca_enable+0x38>)
    a480:	4798      	blx	r3
	/* Enable all display memory */
	LCDCA->LCDCA_CFG &= ~LCDCA_CFG_BLANK;
    a482:	4a0c      	ldr	r2, [pc, #48]	; (a4b4 <lcdca_enable+0x3c>)
    a484:	4b0b      	ldr	r3, [pc, #44]	; (a4b4 <lcdca_enable+0x3c>)
    a486:	685b      	ldr	r3, [r3, #4]
    a488:	f023 0304 	bic.w	r3, r3, #4
    a48c:	6053      	str	r3, [r2, #4]
	LCDCA->LCDCA_CR = LCDCA_CR_EN;
    a48e:	4b09      	ldr	r3, [pc, #36]	; (a4b4 <lcdca_enable+0x3c>)
    a490:	2202      	movs	r2, #2
    a492:	601a      	str	r2, [r3, #0]
	/* Clear all display memory */
	LCDCA->LCDCA_CR = LCDCA_CR_CDM;
    a494:	4b07      	ldr	r3, [pc, #28]	; (a4b4 <lcdca_enable+0x3c>)
    a496:	f44f 7280 	mov.w	r2, #256	; 0x100
    a49a:	601a      	str	r2, [r3, #0]
	/* Wait enable signal */
	while (!(LCDCA->LCDCA_SR & LCDCA_SR_EN)) {
    a49c:	bf00      	nop
    a49e:	4b05      	ldr	r3, [pc, #20]	; (a4b4 <lcdca_enable+0x3c>)
    a4a0:	68db      	ldr	r3, [r3, #12]
    a4a2:	f003 0310 	and.w	r3, r3, #16
    a4a6:	2b00      	cmp	r3, #0
    a4a8:	d0f9      	beq.n	a49e <lcdca_enable+0x26>
	}
}
    a4aa:	bf00      	nop
    a4ac:	bd80      	pop	{r7, pc}
    a4ae:	bf00      	nop
    a4b0:	0000a349 	.word	0x0000a349
    a4b4:	40080000 	.word	0x40080000

0000a4b8 <lcdca_set_contrast>:
 *
 * \param[in] contrast Contrast value (range -32 to 31 inclusive)
 */
void lcdca_set_contrast(
		int8_t contrast)
{
    a4b8:	b480      	push	{r7}
    a4ba:	b087      	sub	sp, #28
    a4bc:	af00      	add	r7, sp, #0
    a4be:	4603      	mov	r3, r0
    a4c0:	71fb      	strb	r3, [r7, #7]
	uint32_t cfg = LCDCA->LCDCA_CFG;
    a4c2:	4b13      	ldr	r3, [pc, #76]	; (a510 <lcdca_set_contrast+0x58>)
    a4c4:	685b      	ldr	r3, [r3, #4]
    a4c6:	613b      	str	r3, [r7, #16]
	uint32_t fcst_filed;
	int8_t fcst_val_msk = (LCDCA_CFG_FCST_Msk >> (LCDCA_CFG_FCST_Pos + 1));
    a4c8:	231f      	movs	r3, #31
    a4ca:	73fb      	strb	r3, [r7, #15]
	int8_t fcst_sign_msk = ((LCDCA_CFG_FCST_Msk >> LCDCA_CFG_FCST_Pos) + 1) >> 1;
    a4cc:	2320      	movs	r3, #32
    a4ce:	73bb      	strb	r3, [r7, #14]

	/* Clear previous contrast value */
	cfg &= ~LCDCA_CFG_FCST_Msk;
    a4d0:	693b      	ldr	r3, [r7, #16]
    a4d2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
    a4d6:	613b      	str	r3, [r7, #16]
	/*
	 * Convert contrast value to the value in FCST field:
	 * FCST is a signed number (two's complement).
	 */
	fcst_filed = (contrast & fcst_val_msk);
    a4d8:	79fa      	ldrb	r2, [r7, #7]
    a4da:	7bfb      	ldrb	r3, [r7, #15]
    a4dc:	4013      	ands	r3, r2
    a4de:	b25b      	sxtb	r3, r3
    a4e0:	617b      	str	r3, [r7, #20]
	if (contrast < 0) {
    a4e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    a4e6:	2b00      	cmp	r3, #0
    a4e8:	da04      	bge.n	a4f4 <lcdca_set_contrast+0x3c>
		fcst_filed |= fcst_sign_msk;
    a4ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
    a4ee:	697a      	ldr	r2, [r7, #20]
    a4f0:	4313      	orrs	r3, r2
    a4f2:	617b      	str	r3, [r7, #20]
	}
	/* Write new value */
	LCDCA->LCDCA_CFG = cfg | LCDCA_CFG_FCST(fcst_filed);
    a4f4:	4906      	ldr	r1, [pc, #24]	; (a510 <lcdca_set_contrast+0x58>)
    a4f6:	697b      	ldr	r3, [r7, #20]
    a4f8:	041b      	lsls	r3, r3, #16
    a4fa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
    a4fe:	693b      	ldr	r3, [r7, #16]
    a500:	4313      	orrs	r3, r2
    a502:	604b      	str	r3, [r1, #4]
}
    a504:	bf00      	nop
    a506:	371c      	adds	r7, #28
    a508:	46bd      	mov	sp, r7
    a50a:	bc80      	pop	{r7}
    a50c:	4770      	bx	lr
    a50e:	bf00      	nop
    a510:	40080000 	.word	0x40080000

0000a514 <LCDCA_Handler>:

/**
 * \internal LCDCA interrupt handler.
 */
void LCDCA_Handler(void)
{
    a514:	b580      	push	{r7, lr}
    a516:	af00      	add	r7, sp, #0
	/* Clear interrupt flags */
	lcdca_clear_status();
    a518:	4b05      	ldr	r3, [pc, #20]	; (a530 <LCDCA_Handler+0x1c>)
    a51a:	4798      	blx	r3

	/* Interrupt handler */
	if (lcdca_callback_pointer != NULL) {
    a51c:	4b05      	ldr	r3, [pc, #20]	; (a534 <LCDCA_Handler+0x20>)
    a51e:	681b      	ldr	r3, [r3, #0]
    a520:	2b00      	cmp	r3, #0
    a522:	d002      	beq.n	a52a <LCDCA_Handler+0x16>
		lcdca_callback_pointer();
    a524:	4b03      	ldr	r3, [pc, #12]	; (a534 <LCDCA_Handler+0x20>)
    a526:	681b      	ldr	r3, [r3, #0]
    a528:	4798      	blx	r3
	}
}
    a52a:	bf00      	nop
    a52c:	bd80      	pop	{r7, pc}
    a52e:	bf00      	nop
    a530:	0000a331 	.word	0x0000a331
    a534:	20000500 	.word	0x20000500

0000a538 <pdca_channel_get_handler>:
 *
 * \return channel handled or PDCA_INVALID_ARGUMENT
 */
volatile PdcaChannel *pdca_channel_get_handler(pdca_channel_num_t
		pdca_ch_number)
{
    a538:	b480      	push	{r7}
    a53a:	b085      	sub	sp, #20
    a53c:	af00      	add	r7, sp, #0
    a53e:	4603      	mov	r3, r0
    a540:	71fb      	strb	r3, [r7, #7]
	if (pdca_ch_number >= PDCA_NUMBER_OF_CHANNELS)
    a542:	79fb      	ldrb	r3, [r7, #7]
    a544:	2b0f      	cmp	r3, #15
    a546:	d901      	bls.n	a54c <pdca_channel_get_handler+0x14>
		pdca_ch_number = 0;
    a548:	2300      	movs	r3, #0
    a54a:	71fb      	strb	r3, [r7, #7]

	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
    a54c:	79fb      	ldrb	r3, [r7, #7]
    a54e:	019b      	lsls	r3, r3, #6
    a550:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a554:	f503 2322 	add.w	r3, r3, #663552	; 0xa2000
    a558:	60fb      	str	r3, [r7, #12]
			&(PDCA->PDCA_CHANNEL[pdca_ch_number]);

	return pdca_channel;
    a55a:	68fb      	ldr	r3, [r7, #12]
}
    a55c:	4618      	mov	r0, r3
    a55e:	3714      	adds	r7, #20
    a560:	46bd      	mov	sp, r7
    a562:	bc80      	pop	{r7}
    a564:	4770      	bx	lr
	...

0000a568 <pdca_get_channel_status>:
 *
 * \return 1 if channel transfer is enabled, else 0
 */
enum pdca_channel_status
		pdca_get_channel_status(pdca_channel_num_t pdca_ch_number)
{
    a568:	b580      	push	{r7, lr}
    a56a:	b086      	sub	sp, #24
    a56c:	af00      	add	r7, sp, #0
    a56e:	4603      	mov	r3, r0
    a570:	71fb      	strb	r3, [r7, #7]
	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
    a572:	79fb      	ldrb	r3, [r7, #7]
    a574:	4618      	mov	r0, r3
    a576:	4b15      	ldr	r3, [pc, #84]	; (a5cc <pdca_get_channel_status+0x64>)
    a578:	4798      	blx	r3
    a57a:	6178      	str	r0, [r7, #20]
			pdca_channel_get_handler(pdca_ch_number);
	uint32_t status = pdca_channel->PDCA_SR;
    a57c:	697b      	ldr	r3, [r7, #20]
    a57e:	69db      	ldr	r3, [r3, #28]
    a580:	613b      	str	r3, [r7, #16]
	uint32_t intflag = pdca_channel->PDCA_ISR;
    a582:	697b      	ldr	r3, [r7, #20]
    a584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a586:	60fb      	str	r3, [r7, #12]

	if ((status & PDCA_SR_TEN) == PDCA_SR_TEN) {
    a588:	693b      	ldr	r3, [r7, #16]
    a58a:	f003 0301 	and.w	r3, r3, #1
    a58e:	2b00      	cmp	r3, #0
    a590:	d016      	beq.n	a5c0 <pdca_get_channel_status+0x58>
		if ((intflag & PDCA_ISR_TERR) == PDCA_ISR_TERR) {
    a592:	68fb      	ldr	r3, [r7, #12]
    a594:	f003 0304 	and.w	r3, r3, #4
    a598:	2b00      	cmp	r3, #0
    a59a:	d001      	beq.n	a5a0 <pdca_get_channel_status+0x38>
			return PDCA_CH_TRANSFER_ERROR;
    a59c:	2304      	movs	r3, #4
    a59e:	e010      	b.n	a5c2 <pdca_get_channel_status+0x5a>
		} else if ((intflag & PDCA_ISR_TRC) == PDCA_ISR_TRC) {
    a5a0:	68fb      	ldr	r3, [r7, #12]
    a5a2:	f003 0302 	and.w	r3, r3, #2
    a5a6:	2b00      	cmp	r3, #0
    a5a8:	d001      	beq.n	a5ae <pdca_get_channel_status+0x46>
			return PDCA_CH_TRANSFER_COMPLETED;
    a5aa:	2303      	movs	r3, #3
    a5ac:	e009      	b.n	a5c2 <pdca_get_channel_status+0x5a>
		} else if ((intflag & PDCA_ISR_RCZ) == PDCA_ISR_RCZ) {
    a5ae:	68fb      	ldr	r3, [r7, #12]
    a5b0:	f003 0301 	and.w	r3, r3, #1
    a5b4:	2b00      	cmp	r3, #0
    a5b6:	d001      	beq.n	a5bc <pdca_get_channel_status+0x54>
			return PDCA_CH_COUNTER_RELOAD_IS_ZERO;
    a5b8:	2302      	movs	r3, #2
    a5ba:	e002      	b.n	a5c2 <pdca_get_channel_status+0x5a>
		}
		return PDCA_CH_BUSY;
    a5bc:	2301      	movs	r3, #1
    a5be:	e000      	b.n	a5c2 <pdca_get_channel_status+0x5a>
	} else {
		return PDCA_CH_FREE;
    a5c0:	2300      	movs	r3, #0
	}
}
    a5c2:	4618      	mov	r0, r3
    a5c4:	3718      	adds	r7, #24
    a5c6:	46bd      	mov	sp, r7
    a5c8:	bd80      	pop	{r7, pc}
    a5ca:	bf00      	nop
    a5cc:	0000a539 	.word	0x0000a539

0000a5d0 <pdca_channel_interrupt>:
 * pdca_channel_set_callback() function.
 *
 * \param pdca_ch_number PDCA channel number to handle interrupt for
 */
static void pdca_channel_interrupt(const pdca_channel_num_t pdca_ch_number)
{
    a5d0:	b580      	push	{r7, lr}
    a5d2:	b084      	sub	sp, #16
    a5d4:	af00      	add	r7, sp, #0
    a5d6:	4603      	mov	r3, r0
    a5d8:	71fb      	strb	r3, [r7, #7]
	enum pdca_channel_status status;

	status = pdca_get_channel_status(pdca_ch_number);
    a5da:	79fb      	ldrb	r3, [r7, #7]
    a5dc:	4618      	mov	r0, r3
    a5de:	4b0a      	ldr	r3, [pc, #40]	; (a608 <pdca_channel_interrupt+0x38>)
    a5e0:	4798      	blx	r3
    a5e2:	4603      	mov	r3, r0
    a5e4:	73fb      	strb	r3, [r7, #15]

	if (pdca_callback_pointer[pdca_ch_number]) {
    a5e6:	79fb      	ldrb	r3, [r7, #7]
    a5e8:	4a08      	ldr	r2, [pc, #32]	; (a60c <pdca_channel_interrupt+0x3c>)
    a5ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5ee:	2b00      	cmp	r3, #0
    a5f0:	d006      	beq.n	a600 <pdca_channel_interrupt+0x30>
		pdca_callback_pointer[pdca_ch_number] (status);
    a5f2:	79fb      	ldrb	r3, [r7, #7]
    a5f4:	4a05      	ldr	r2, [pc, #20]	; (a60c <pdca_channel_interrupt+0x3c>)
    a5f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5fa:	7bfa      	ldrb	r2, [r7, #15]
    a5fc:	4610      	mov	r0, r2
    a5fe:	4798      	blx	r3
	} else {
		Assert(false); /* Catch unexpected interrupt */
	}
}
    a600:	bf00      	nop
    a602:	3710      	adds	r7, #16
    a604:	46bd      	mov	sp, r7
    a606:	bd80      	pop	{r7, pc}
    a608:	0000a569 	.word	0x0000a569
    a60c:	20003de4 	.word	0x20003de4

0000a610 <PDCA_0_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 0.
 */
void PDCA_0_Handler(void)
{
    a610:	b580      	push	{r7, lr}
    a612:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(0);
    a614:	2000      	movs	r0, #0
    a616:	4b02      	ldr	r3, [pc, #8]	; (a620 <PDCA_0_Handler+0x10>)
    a618:	4798      	blx	r3
}
    a61a:	bf00      	nop
    a61c:	bd80      	pop	{r7, pc}
    a61e:	bf00      	nop
    a620:	0000a5d1 	.word	0x0000a5d1

0000a624 <PDCA_1_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 1.
 */
void PDCA_1_Handler(void)
{
    a624:	b580      	push	{r7, lr}
    a626:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(1);
    a628:	2001      	movs	r0, #1
    a62a:	4b02      	ldr	r3, [pc, #8]	; (a634 <PDCA_1_Handler+0x10>)
    a62c:	4798      	blx	r3
}
    a62e:	bf00      	nop
    a630:	bd80      	pop	{r7, pc}
    a632:	bf00      	nop
    a634:	0000a5d1 	.word	0x0000a5d1

0000a638 <PDCA_2_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 2.
 */
void PDCA_2_Handler(void)
{
    a638:	b580      	push	{r7, lr}
    a63a:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(2);
    a63c:	2002      	movs	r0, #2
    a63e:	4b02      	ldr	r3, [pc, #8]	; (a648 <PDCA_2_Handler+0x10>)
    a640:	4798      	blx	r3
}
    a642:	bf00      	nop
    a644:	bd80      	pop	{r7, pc}
    a646:	bf00      	nop
    a648:	0000a5d1 	.word	0x0000a5d1

0000a64c <PDCA_3_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 3.
 */
void PDCA_3_Handler(void)
{
    a64c:	b580      	push	{r7, lr}
    a64e:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(3);
    a650:	2003      	movs	r0, #3
    a652:	4b02      	ldr	r3, [pc, #8]	; (a65c <PDCA_3_Handler+0x10>)
    a654:	4798      	blx	r3
}
    a656:	bf00      	nop
    a658:	bd80      	pop	{r7, pc}
    a65a:	bf00      	nop
    a65c:	0000a5d1 	.word	0x0000a5d1

0000a660 <PDCA_4_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 4.
 */
void PDCA_4_Handler(void)
{
    a660:	b580      	push	{r7, lr}
    a662:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(4);
    a664:	2004      	movs	r0, #4
    a666:	4b02      	ldr	r3, [pc, #8]	; (a670 <PDCA_4_Handler+0x10>)
    a668:	4798      	blx	r3
}
    a66a:	bf00      	nop
    a66c:	bd80      	pop	{r7, pc}
    a66e:	bf00      	nop
    a670:	0000a5d1 	.word	0x0000a5d1

0000a674 <PDCA_5_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 5.
 */
void PDCA_5_Handler(void)
{
    a674:	b580      	push	{r7, lr}
    a676:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(5);
    a678:	2005      	movs	r0, #5
    a67a:	4b02      	ldr	r3, [pc, #8]	; (a684 <PDCA_5_Handler+0x10>)
    a67c:	4798      	blx	r3
}
    a67e:	bf00      	nop
    a680:	bd80      	pop	{r7, pc}
    a682:	bf00      	nop
    a684:	0000a5d1 	.word	0x0000a5d1

0000a688 <PDCA_6_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 6.
 */
void PDCA_6_Handler(void)
{
    a688:	b580      	push	{r7, lr}
    a68a:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(6);
    a68c:	2006      	movs	r0, #6
    a68e:	4b02      	ldr	r3, [pc, #8]	; (a698 <PDCA_6_Handler+0x10>)
    a690:	4798      	blx	r3
}
    a692:	bf00      	nop
    a694:	bd80      	pop	{r7, pc}
    a696:	bf00      	nop
    a698:	0000a5d1 	.word	0x0000a5d1

0000a69c <PDCA_7_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 7.
 */
void PDCA_7_Handler(void)
{
    a69c:	b580      	push	{r7, lr}
    a69e:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(7);
    a6a0:	2007      	movs	r0, #7
    a6a2:	4b02      	ldr	r3, [pc, #8]	; (a6ac <PDCA_7_Handler+0x10>)
    a6a4:	4798      	blx	r3
}
    a6a6:	bf00      	nop
    a6a8:	bd80      	pop	{r7, pc}
    a6aa:	bf00      	nop
    a6ac:	0000a5d1 	.word	0x0000a5d1

0000a6b0 <PDCA_8_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 8.
 */
void PDCA_8_Handler(void)
{
    a6b0:	b580      	push	{r7, lr}
    a6b2:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(8);
    a6b4:	2008      	movs	r0, #8
    a6b6:	4b02      	ldr	r3, [pc, #8]	; (a6c0 <PDCA_8_Handler+0x10>)
    a6b8:	4798      	blx	r3
}
    a6ba:	bf00      	nop
    a6bc:	bd80      	pop	{r7, pc}
    a6be:	bf00      	nop
    a6c0:	0000a5d1 	.word	0x0000a5d1

0000a6c4 <PDCA_9_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 9.
 */
void PDCA_9_Handler(void)
{
    a6c4:	b580      	push	{r7, lr}
    a6c6:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(9);
    a6c8:	2009      	movs	r0, #9
    a6ca:	4b02      	ldr	r3, [pc, #8]	; (a6d4 <PDCA_9_Handler+0x10>)
    a6cc:	4798      	blx	r3
}
    a6ce:	bf00      	nop
    a6d0:	bd80      	pop	{r7, pc}
    a6d2:	bf00      	nop
    a6d4:	0000a5d1 	.word	0x0000a5d1

0000a6d8 <PDCA_10_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 10.
 */
void PDCA_10_Handler(void)
{
    a6d8:	b580      	push	{r7, lr}
    a6da:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(10);
    a6dc:	200a      	movs	r0, #10
    a6de:	4b02      	ldr	r3, [pc, #8]	; (a6e8 <PDCA_10_Handler+0x10>)
    a6e0:	4798      	blx	r3
}
    a6e2:	bf00      	nop
    a6e4:	bd80      	pop	{r7, pc}
    a6e6:	bf00      	nop
    a6e8:	0000a5d1 	.word	0x0000a5d1

0000a6ec <PDCA_11_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 11.
 */
void PDCA_11_Handler(void)
{
    a6ec:	b580      	push	{r7, lr}
    a6ee:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(11);
    a6f0:	200b      	movs	r0, #11
    a6f2:	4b02      	ldr	r3, [pc, #8]	; (a6fc <PDCA_11_Handler+0x10>)
    a6f4:	4798      	blx	r3
}
    a6f6:	bf00      	nop
    a6f8:	bd80      	pop	{r7, pc}
    a6fa:	bf00      	nop
    a6fc:	0000a5d1 	.word	0x0000a5d1

0000a700 <PDCA_12_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 12.
 */
void PDCA_12_Handler(void)
{
    a700:	b580      	push	{r7, lr}
    a702:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(12);
    a704:	200c      	movs	r0, #12
    a706:	4b02      	ldr	r3, [pc, #8]	; (a710 <PDCA_12_Handler+0x10>)
    a708:	4798      	blx	r3
}
    a70a:	bf00      	nop
    a70c:	bd80      	pop	{r7, pc}
    a70e:	bf00      	nop
    a710:	0000a5d1 	.word	0x0000a5d1

0000a714 <PDCA_13_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 13.
 */
void PDCA_13_Handler(void)
{
    a714:	b580      	push	{r7, lr}
    a716:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(13);
    a718:	200d      	movs	r0, #13
    a71a:	4b02      	ldr	r3, [pc, #8]	; (a724 <PDCA_13_Handler+0x10>)
    a71c:	4798      	blx	r3
}
    a71e:	bf00      	nop
    a720:	bd80      	pop	{r7, pc}
    a722:	bf00      	nop
    a724:	0000a5d1 	.word	0x0000a5d1

0000a728 <PDCA_14_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 14.
 */
void PDCA_14_Handler(void)
{
    a728:	b580      	push	{r7, lr}
    a72a:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(14);
    a72c:	200e      	movs	r0, #14
    a72e:	4b02      	ldr	r3, [pc, #8]	; (a738 <PDCA_14_Handler+0x10>)
    a730:	4798      	blx	r3
}
    a732:	bf00      	nop
    a734:	bd80      	pop	{r7, pc}
    a736:	bf00      	nop
    a738:	0000a5d1 	.word	0x0000a5d1

0000a73c <PDCA_15_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 15.
 */
void PDCA_15_Handler(void)
{
    a73c:	b580      	push	{r7, lr}
    a73e:	af00      	add	r7, sp, #0
	pdca_channel_interrupt(15);
    a740:	200f      	movs	r0, #15
    a742:	4b02      	ldr	r3, [pc, #8]	; (a74c <PDCA_15_Handler+0x10>)
    a744:	4798      	blx	r3
}
    a746:	bf00      	nop
    a748:	bd80      	pop	{r7, pc}
    a74a:	bf00      	nop
    a74c:	0000a5d1 	.word	0x0000a5d1

0000a750 <sysclk_get_main_hz>:
{
    a750:	b480      	push	{r7}
    a752:	af00      	add	r7, sp, #0
			return OSC_RCFAST12M_NOMINAL_HZ;
    a754:	4b02      	ldr	r3, [pc, #8]	; (a760 <sysclk_get_main_hz+0x10>)
}
    a756:	4618      	mov	r0, r3
    a758:	46bd      	mov	sp, r7
    a75a:	bc80      	pop	{r7}
    a75c:	4770      	bx	lr
    a75e:	bf00      	nop
    a760:	00b71b00 	.word	0x00b71b00

0000a764 <sysclk_get_cpu_hz>:
{
    a764:	b580      	push	{r7, lr}
    a766:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
    a768:	4b02      	ldr	r3, [pc, #8]	; (a774 <sysclk_get_cpu_hz+0x10>)
    a76a:	4798      	blx	r3
    a76c:	4603      	mov	r3, r0
}
    a76e:	4618      	mov	r0, r3
    a770:	bd80      	pop	{r7, pc}
    a772:	bf00      	nop
    a774:	0000a751 	.word	0x0000a751

0000a778 <wdt_set_ctrl>:
 *        to the WatchDog Timer key.
 *
 * \param ctrl  Value to set the WatchDog Timer Control register to.
 */
static void wdt_set_ctrl(uint32_t ctrl)
{
    a778:	b580      	push	{r7, lr}
    a77a:	b084      	sub	sp, #16
    a77c:	af00      	add	r7, sp, #0
    a77e:	6078      	str	r0, [r7, #4]
	volatile uint32_t dly;

	/* Calculate delay for internal synchronization, see 44.1.2 WDT errata */
	if ((WDT->WDT_CTRL & WDT_CTRL_CSSEL) == WDT_CLK_SRC_RCSYS) {
    a780:	4b1a      	ldr	r3, [pc, #104]	; (a7ec <wdt_set_ctrl+0x74>)
    a782:	681b      	ldr	r3, [r3, #0]
    a784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    a788:	2b00      	cmp	r3, #0
    a78a:	d10e      	bne.n	a7aa <wdt_set_ctrl+0x32>
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RCSYS_NOMINAL_HZ);
    a78c:	4b18      	ldr	r3, [pc, #96]	; (a7f0 <wdt_set_ctrl+0x78>)
    a78e:	4798      	blx	r3
    a790:	4603      	mov	r3, r0
    a792:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    a796:	339c      	adds	r3, #156	; 0x9c
    a798:	005b      	lsls	r3, r3, #1
    a79a:	3b01      	subs	r3, #1
    a79c:	08db      	lsrs	r3, r3, #3
    a79e:	4a15      	ldr	r2, [pc, #84]	; (a7f4 <wdt_set_ctrl+0x7c>)
    a7a0:	fba2 2303 	umull	r2, r3, r2, r3
    a7a4:	0a5b      	lsrs	r3, r3, #9
    a7a6:	60fb      	str	r3, [r7, #12]
    a7a8:	e008      	b.n	a7bc <wdt_set_ctrl+0x44>
	} else { /* WDT_CLK_SRC_32K */
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RC32K_NOMINAL_HZ);
    a7aa:	4b11      	ldr	r3, [pc, #68]	; (a7f0 <wdt_set_ctrl+0x78>)
    a7ac:	4798      	blx	r3
    a7ae:	4603      	mov	r3, r0
    a7b0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    a7b4:	005b      	lsls	r3, r3, #1
    a7b6:	3b01      	subs	r3, #1
    a7b8:	0bdb      	lsrs	r3, r3, #15
    a7ba:	60fb      	str	r3, [r7, #12]
	}
	dly >>= 3; /* ~8 cycles for one while loop */
    a7bc:	68fb      	ldr	r3, [r7, #12]
    a7be:	08db      	lsrs	r3, r3, #3
    a7c0:	60fb      	str	r3, [r7, #12]
	while(dly--);
    a7c2:	bf00      	nop
    a7c4:	68fb      	ldr	r3, [r7, #12]
    a7c6:	1e5a      	subs	r2, r3, #1
    a7c8:	60fa      	str	r2, [r7, #12]
    a7ca:	2b00      	cmp	r3, #0
    a7cc:	d1fa      	bne.n	a7c4 <wdt_set_ctrl+0x4c>
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_FIRST_KEY);
    a7ce:	4a07      	ldr	r2, [pc, #28]	; (a7ec <wdt_set_ctrl+0x74>)
    a7d0:	687b      	ldr	r3, [r7, #4]
    a7d2:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
    a7d6:	6013      	str	r3, [r2, #0]
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_SECOND_KEY);
    a7d8:	4a04      	ldr	r2, [pc, #16]	; (a7ec <wdt_set_ctrl+0x74>)
    a7da:	687b      	ldr	r3, [r7, #4]
    a7dc:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
    a7e0:	6013      	str	r3, [r2, #0]
}
    a7e2:	bf00      	nop
    a7e4:	3710      	adds	r7, #16
    a7e6:	46bd      	mov	sp, r7
    a7e8:	bd80      	pop	{r7, pc}
    a7ea:	bf00      	nop
    a7ec:	400f0c00 	.word	0x400f0c00
    a7f0:	0000a765 	.word	0x0000a765
    a7f4:	091e38ab 	.word	0x091e38ab

0000a7f8 <wdt_get_config_defaults>:
 *  - No window period, so that the watchdog count can be reset at any time.
 *
 *  \param cfg    Configuration structure to initialize to default values.
 */
void wdt_get_config_defaults(struct wdt_config *const cfg)
{
    a7f8:	b480      	push	{r7}
    a7fa:	b083      	sub	sp, #12
    a7fc:	af00      	add	r7, sp, #0
    a7fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(cfg);

	/* Default configuration values */
	cfg->clk_src = WDT_CLK_SRC_RCSYS;
    a800:	687b      	ldr	r3, [r7, #4]
    a802:	2200      	movs	r2, #0
    a804:	601a      	str	r2, [r3, #0]
	cfg->wdt_mode = WDT_MODE_BASIC;
    a806:	687b      	ldr	r3, [r7, #4]
    a808:	2200      	movs	r2, #0
    a80a:	605a      	str	r2, [r3, #4]
	cfg->wdt_int = WDT_INT_DIS;
    a80c:	687b      	ldr	r3, [r7, #4]
    a80e:	2200      	movs	r2, #0
    a810:	609a      	str	r2, [r3, #8]
	cfg->timeout_period = WDT_PERIOD_131072_CLK;
    a812:	687b      	ldr	r3, [r7, #4]
    a814:	2210      	movs	r2, #16
    a816:	731a      	strb	r2, [r3, #12]
	cfg->window_period = WDT_PERIOD_NONE;
    a818:	687b      	ldr	r3, [r7, #4]
    a81a:	2200      	movs	r2, #0
    a81c:	735a      	strb	r2, [r3, #13]
	cfg->disable_flash_cali = true;
    a81e:	687b      	ldr	r3, [r7, #4]
    a820:	2201      	movs	r2, #1
    a822:	739a      	strb	r2, [r3, #14]
	cfg->disable_wdt_after_reset = true;
    a824:	687b      	ldr	r3, [r7, #4]
    a826:	2201      	movs	r2, #1
    a828:	73da      	strb	r2, [r3, #15]
	cfg->always_on = false;
    a82a:	687b      	ldr	r3, [r7, #4]
    a82c:	2200      	movs	r2, #0
    a82e:	741a      	strb	r2, [r3, #16]
}
    a830:	bf00      	nop
    a832:	370c      	adds	r7, #12
    a834:	46bd      	mov	sp, r7
    a836:	bc80      	pop	{r7}
    a838:	4770      	bx	lr
	...

0000a83c <wdt_init>:
 */
bool wdt_init(
		struct wdt_dev_inst *const dev_inst,
		Wdt *const wdt,
		struct wdt_config *const cfg)
{
    a83c:	b580      	push	{r7, lr}
    a83e:	b084      	sub	sp, #16
    a840:	af00      	add	r7, sp, #0
    a842:	60f8      	str	r0, [r7, #12]
    a844:	60b9      	str	r1, [r7, #8]
    a846:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(dev_inst);
	Assert(wdt);
	Assert(cfg);

	dev_inst->hw_dev = wdt;
    a848:	68fb      	ldr	r3, [r7, #12]
    a84a:	68ba      	ldr	r2, [r7, #8]
    a84c:	601a      	str	r2, [r3, #0]
	dev_inst->wdt_cfg = cfg;
    a84e:	68fb      	ldr	r3, [r7, #12]
    a850:	687a      	ldr	r2, [r7, #4]
    a852:	605a      	str	r2, [r3, #4]

	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);
    a854:	68b8      	ldr	r0, [r7, #8]
    a856:	4b37      	ldr	r3, [pc, #220]	; (a934 <wdt_init+0xf8>)
    a858:	4798      	blx	r3

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
    a85a:	68bb      	ldr	r3, [r7, #8]
    a85c:	681b      	ldr	r3, [r3, #0]
    a85e:	f003 0308 	and.w	r3, r3, #8
    a862:	2b00      	cmp	r3, #0
    a864:	d001      	beq.n	a86a <wdt_init+0x2e>
		return false;
    a866:	2300      	movs	r3, #0
    a868:	e060      	b.n	a92c <wdt_init+0xf0>
	}

	/* Disable the WDT */
	if (wdt->WDT_CTRL & WDT_CTRL_EN) {
    a86a:	68bb      	ldr	r3, [r7, #8]
    a86c:	681b      	ldr	r3, [r3, #0]
    a86e:	f003 0301 	and.w	r3, r3, #1
    a872:	2b00      	cmp	r3, #0
    a874:	d00d      	beq.n	a892 <wdt_init+0x56>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    a876:	68bb      	ldr	r3, [r7, #8]
    a878:	681b      	ldr	r3, [r3, #0]
    a87a:	f023 0301 	bic.w	r3, r3, #1
    a87e:	4618      	mov	r0, r3
    a880:	4b2d      	ldr	r3, [pc, #180]	; (a938 <wdt_init+0xfc>)
    a882:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    a884:	bf00      	nop
    a886:	68bb      	ldr	r3, [r7, #8]
    a888:	681b      	ldr	r3, [r3, #0]
    a88a:	f003 0301 	and.w	r3, r3, #1
    a88e:	2b00      	cmp	r3, #0
    a890:	d1f9      	bne.n	a886 <wdt_init+0x4a>
		}
	}
	/* Disable the WDT clock */
	if (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    a892:	68bb      	ldr	r3, [r7, #8]
    a894:	681b      	ldr	r3, [r3, #0]
    a896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    a89a:	2b00      	cmp	r3, #0
    a89c:	d00d      	beq.n	a8ba <wdt_init+0x7e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_CEN);
    a89e:	68bb      	ldr	r3, [r7, #8]
    a8a0:	681b      	ldr	r3, [r3, #0]
    a8a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    a8a6:	4618      	mov	r0, r3
    a8a8:	4b23      	ldr	r3, [pc, #140]	; (a938 <wdt_init+0xfc>)
    a8aa:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    a8ac:	bf00      	nop
    a8ae:	68bb      	ldr	r3, [r7, #8]
    a8b0:	681b      	ldr	r3, [r3, #0]
    a8b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    a8b6:	2b00      	cmp	r3, #0
    a8b8:	d1f9      	bne.n	a8ae <wdt_init+0x72>
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    a8ba:	687b      	ldr	r3, [r7, #4]
    a8bc:	681a      	ldr	r2, [r3, #0]
			cfg->wdt_mode |
    a8be:	687b      	ldr	r3, [r7, #4]
    a8c0:	685b      	ldr	r3, [r3, #4]
	wdt_set_ctrl(cfg->clk_src |
    a8c2:	431a      	orrs	r2, r3
			cfg->wdt_int |
    a8c4:	687b      	ldr	r3, [r7, #4]
    a8c6:	689b      	ldr	r3, [r3, #8]
			cfg->wdt_mode |
    a8c8:	431a      	orrs	r2, r3
			WDT_CTRL_PSEL(cfg->timeout_period) |
    a8ca:	687b      	ldr	r3, [r7, #4]
    a8cc:	7b1b      	ldrb	r3, [r3, #12]
    a8ce:	021b      	lsls	r3, r3, #8
    a8d0:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
			cfg->wdt_int |
    a8d4:	431a      	orrs	r2, r3
			WDT_CTRL_TBAN(cfg->window_period) |
    a8d6:	687b      	ldr	r3, [r7, #4]
    a8d8:	7b5b      	ldrb	r3, [r3, #13]
    a8da:	049b      	lsls	r3, r3, #18
    a8dc:	f403 03f8 	and.w	r3, r3, #8126464	; 0x7c0000
			WDT_CTRL_PSEL(cfg->timeout_period) |
    a8e0:	431a      	orrs	r2, r3
			(cfg->disable_flash_cali ? WDT_CTRL_FCD : 0) |
    a8e2:	687b      	ldr	r3, [r7, #4]
    a8e4:	7b9b      	ldrb	r3, [r3, #14]
    a8e6:	2b00      	cmp	r3, #0
    a8e8:	d001      	beq.n	a8ee <wdt_init+0xb2>
    a8ea:	2380      	movs	r3, #128	; 0x80
    a8ec:	e000      	b.n	a8f0 <wdt_init+0xb4>
    a8ee:	2300      	movs	r3, #0
			WDT_CTRL_TBAN(cfg->window_period) |
    a8f0:	431a      	orrs	r2, r3
			(cfg->disable_wdt_after_reset ? WDT_CTRL_DAR : 0)
    a8f2:	687b      	ldr	r3, [r7, #4]
    a8f4:	7bdb      	ldrb	r3, [r3, #15]
    a8f6:	2b00      	cmp	r3, #0
    a8f8:	d001      	beq.n	a8fe <wdt_init+0xc2>
    a8fa:	2302      	movs	r3, #2
    a8fc:	e000      	b.n	a900 <wdt_init+0xc4>
    a8fe:	2300      	movs	r3, #0
	wdt_set_ctrl(cfg->clk_src |
    a900:	4313      	orrs	r3, r2
    a902:	4618      	mov	r0, r3
    a904:	4b0c      	ldr	r3, [pc, #48]	; (a938 <wdt_init+0xfc>)
    a906:	4798      	blx	r3
	);
	wdt_set_ctrl(wdt->WDT_CTRL | WDT_CTRL_CEN);
    a908:	68bb      	ldr	r3, [r7, #8]
    a90a:	681b      	ldr	r3, [r3, #0]
    a90c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a910:	4618      	mov	r0, r3
    a912:	4b09      	ldr	r3, [pc, #36]	; (a938 <wdt_init+0xfc>)
    a914:	4798      	blx	r3
	while (!(wdt->WDT_CTRL & WDT_CTRL_CEN)) {
    a916:	bf00      	nop
    a918:	68bb      	ldr	r3, [r7, #8]
    a91a:	681b      	ldr	r3, [r3, #0]
    a91c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    a920:	2b00      	cmp	r3, #0
    a922:	d0f9      	beq.n	a918 <wdt_init+0xdc>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    a924:	68b8      	ldr	r0, [r7, #8]
    a926:	4b05      	ldr	r3, [pc, #20]	; (a93c <wdt_init+0x100>)
    a928:	4798      	blx	r3

	return true;
    a92a:	2301      	movs	r3, #1
}
    a92c:	4618      	mov	r0, r3
    a92e:	3710      	adds	r7, #16
    a930:	46bd      	mov	sp, r7
    a932:	bd80      	pop	{r7, pc}
    a934:	000088e5 	.word	0x000088e5
    a938:	0000a779 	.word	0x0000a779
    a93c:	00008d15 	.word	0x00008d15

0000a940 <wdt_disable>:
 * \brief Disable the WDT module.
 *
 * \param dev_inst    Device structure pointer.
 */
void wdt_disable(struct wdt_dev_inst *const dev_inst)
{
    a940:	b580      	push	{r7, lr}
    a942:	b084      	sub	sp, #16
    a944:	af00      	add	r7, sp, #0
    a946:	6078      	str	r0, [r7, #4]
	Wdt *wdt = dev_inst->hw_dev;
    a948:	687b      	ldr	r3, [r7, #4]
    a94a:	681b      	ldr	r3, [r3, #0]
    a94c:	60fb      	str	r3, [r7, #12]

	/* Disable the WDT */
	wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    a94e:	68fb      	ldr	r3, [r7, #12]
    a950:	681b      	ldr	r3, [r3, #0]
    a952:	f023 0301 	bic.w	r3, r3, #1
    a956:	4618      	mov	r0, r3
    a958:	4b07      	ldr	r3, [pc, #28]	; (a978 <wdt_disable+0x38>)
    a95a:	4798      	blx	r3
	while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    a95c:	bf00      	nop
    a95e:	68fb      	ldr	r3, [r7, #12]
    a960:	681b      	ldr	r3, [r3, #0]
    a962:	f003 0301 	and.w	r3, r3, #1
    a966:	2b00      	cmp	r3, #0
    a968:	d1f9      	bne.n	a95e <wdt_disable+0x1e>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    a96a:	68f8      	ldr	r0, [r7, #12]
    a96c:	4b03      	ldr	r3, [pc, #12]	; (a97c <wdt_disable+0x3c>)
    a96e:	4798      	blx	r3
}
    a970:	bf00      	nop
    a972:	3710      	adds	r7, #16
    a974:	46bd      	mov	sp, r7
    a976:	bd80      	pop	{r7, pc}
    a978:	0000a779 	.word	0x0000a779
    a97c:	00008d15 	.word	0x00008d15

0000a980 <Dummy_Handler>:


/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void){ while (1) {} }
    a980:	b480      	push	{r7}
    a982:	af00      	add	r7, sp, #0
    a984:	e7fe      	b.n	a984 <Dummy_Handler+0x4>

0000a986 <DH_NMI>:



/* Cortex-M3 core handlers */
void DH_Reset				(void){ while (1) {} }
void DH_NMI					(void){ while (1) {} }
    a986:	b480      	push	{r7}
    a988:	af00      	add	r7, sp, #0
    a98a:	e7fe      	b.n	a98a <DH_NMI+0x4>

0000a98c <DH_HardFault>:
void DH_HardFault			(void){ while (1) {} }
    a98c:	b480      	push	{r7}
    a98e:	af00      	add	r7, sp, #0
    a990:	e7fe      	b.n	a990 <DH_HardFault+0x4>

0000a992 <DH_MemManage>:
void DH_MemManage			(void){ while (1) {} }
    a992:	b480      	push	{r7}
    a994:	af00      	add	r7, sp, #0
    a996:	e7fe      	b.n	a996 <DH_MemManage+0x4>

0000a998 <DH_BusFault>:
void DH_BusFault			(void){ while (1) {} }
    a998:	b480      	push	{r7}
    a99a:	af00      	add	r7, sp, #0
    a99c:	e7fe      	b.n	a99c <DH_BusFault+0x4>

0000a99e <DH_UsageFault_Handler>:
void DH_UsageFault_Handler	(void){ while (1) {} }
    a99e:	b480      	push	{r7}
    a9a0:	af00      	add	r7, sp, #0
    a9a2:	e7fe      	b.n	a9a2 <DH_UsageFault_Handler+0x4>

0000a9a4 <DH_SVC>:
void DH_SVC					(void){ while (1) {} }
    a9a4:	b480      	push	{r7}
    a9a6:	af00      	add	r7, sp, #0
    a9a8:	e7fe      	b.n	a9a8 <DH_SVC+0x4>

0000a9aa <DH_DebugMon>:
void DH_DebugMon			(void){ while (1) {} }
    a9aa:	b480      	push	{r7}
    a9ac:	af00      	add	r7, sp, #0
    a9ae:	e7fe      	b.n	a9ae <DH_DebugMon+0x4>

0000a9b0 <DH_PendSV>:
void DH_PendSV				(void){ while (1) {} }
    a9b0:	b480      	push	{r7}
    a9b2:	af00      	add	r7, sp, #0
    a9b4:	e7fe      	b.n	a9b4 <DH_PendSV+0x4>

0000a9b6 <DH_SysTick>:
void DH_SysTick				(void){ while (1) {} }
    a9b6:	b480      	push	{r7}
    a9b8:	af00      	add	r7, sp, #0
    a9ba:	e7fe      	b.n	a9ba <DH_SysTick+0x4>

0000a9bc <DH_ABDACB>:

/* Peripherals handlers */
void DH_ABDACB 				(void){ while (1) {} }
    a9bc:	b480      	push	{r7}
    a9be:	af00      	add	r7, sp, #0
    a9c0:	e7fe      	b.n	a9c0 <DH_ABDACB+0x4>

0000a9c2 <DH_ACIFC>:
void DH_ACIFC 				(void){ while (1) {} }
    a9c2:	b480      	push	{r7}
    a9c4:	af00      	add	r7, sp, #0
    a9c6:	e7fe      	b.n	a9c6 <DH_ACIFC+0x4>

0000a9c8 <DH_AESA>:
void DH_ADCIFE 				(void){ while (1) {} }
void DH_AESA 				(void){ while (1) {} }
    a9c8:	b480      	push	{r7}
    a9ca:	af00      	add	r7, sp, #0
    a9cc:	e7fe      	b.n	a9cc <DH_AESA+0x4>

0000a9ce <DH_AST_CLKREADY>:
void DH_AST_ALARM 			(void){ while (1) {} }
void DH_AST_CLKREADY 		(void){ while (1) {} }
    a9ce:	b480      	push	{r7}
    a9d0:	af00      	add	r7, sp, #0
    a9d2:	e7fe      	b.n	a9d2 <DH_AST_CLKREADY+0x4>

0000a9d4 <DH_AST_OVF>:
void DH_AST_OVF 			(void){ while (1) {} }
    a9d4:	b480      	push	{r7}
    a9d6:	af00      	add	r7, sp, #0
    a9d8:	e7fe      	b.n	a9d8 <DH_AST_OVF+0x4>

0000a9da <DH_AST_PER>:
void DH_AST_PER 			(void){ while (1) {} }
    a9da:	b480      	push	{r7}
    a9dc:	af00      	add	r7, sp, #0
    a9de:	e7fe      	b.n	a9de <DH_AST_PER+0x4>

0000a9e0 <DH_AST_READY>:
void DH_AST_READY 			(void){ while (1) {} }
    a9e0:	b480      	push	{r7}
    a9e2:	af00      	add	r7, sp, #0
    a9e4:	e7fe      	b.n	a9e4 <DH_AST_READY+0x4>

0000a9e6 <DH_BPM>:
void DH_BPM 				(void){ while (1) {} }
    a9e6:	b480      	push	{r7}
    a9e8:	af00      	add	r7, sp, #0
    a9ea:	e7fe      	b.n	a9ea <DH_BPM+0x4>

0000a9ec <DH_BSCIF>:
void DH_BSCIF 				(void){ while (1) {} }
    a9ec:	b480      	push	{r7}
    a9ee:	af00      	add	r7, sp, #0
    a9f0:	e7fe      	b.n	a9f0 <DH_BSCIF+0x4>

0000a9f2 <DH_CATB>:
void DH_CATB 				(void){ while (1) {} }
    a9f2:	b480      	push	{r7}
    a9f4:	af00      	add	r7, sp, #0
    a9f6:	e7fe      	b.n	a9f6 <DH_CATB+0x4>

0000a9f8 <DH_CRCCU>:
void DH_CRCCU 				(void){ while (1) {} }
    a9f8:	b480      	push	{r7}
    a9fa:	af00      	add	r7, sp, #0
    a9fc:	e7fe      	b.n	a9fc <DH_CRCCU+0x4>

0000a9fe <DH_DACC>:
void DH_DACC 				(void){ while (1) {} }
    a9fe:	b480      	push	{r7}
    aa00:	af00      	add	r7, sp, #0
    aa02:	e7fe      	b.n	aa02 <DH_DACC+0x4>

0000aa04 <DH_EIC_1>:
void DH_EIC_1 				(void){ while (1) {} }
    aa04:	b480      	push	{r7}
    aa06:	af00      	add	r7, sp, #0
    aa08:	e7fe      	b.n	aa08 <DH_EIC_1+0x4>

0000aa0a <DH_EIC_2>:
void DH_EIC_2 				(void){ while (1) {} }
    aa0a:	b480      	push	{r7}
    aa0c:	af00      	add	r7, sp, #0
    aa0e:	e7fe      	b.n	aa0e <DH_EIC_2+0x4>

0000aa10 <DH_EIC_3>:
void DH_EIC_3 				(void){ while (1) {} }
    aa10:	b480      	push	{r7}
    aa12:	af00      	add	r7, sp, #0
    aa14:	e7fe      	b.n	aa14 <DH_EIC_3+0x4>

0000aa16 <DH_EIC_4>:
void DH_EIC_4 				(void){ while (1) {} }
    aa16:	b480      	push	{r7}
    aa18:	af00      	add	r7, sp, #0
    aa1a:	e7fe      	b.n	aa1a <DH_EIC_4+0x4>

0000aa1c <DH_EIC_5>:
void DH_EIC_5 				(void){ while (1) {} }
    aa1c:	b480      	push	{r7}
    aa1e:	af00      	add	r7, sp, #0
    aa20:	e7fe      	b.n	aa20 <DH_EIC_5+0x4>

0000aa22 <DH_EIC_6>:
void DH_EIC_6 				(void){ while (1) {} }
    aa22:	b480      	push	{r7}
    aa24:	af00      	add	r7, sp, #0
    aa26:	e7fe      	b.n	aa26 <DH_EIC_6+0x4>

0000aa28 <DH_EIC_7>:
void DH_EIC_7 				(void){ while (1) {} }
    aa28:	b480      	push	{r7}
    aa2a:	af00      	add	r7, sp, #0
    aa2c:	e7fe      	b.n	aa2c <DH_EIC_7+0x4>

0000aa2e <DH_EIC_8>:
void DH_EIC_8 				(void){ while (1) {} }
    aa2e:	b480      	push	{r7}
    aa30:	af00      	add	r7, sp, #0
    aa32:	e7fe      	b.n	aa32 <DH_EIC_8+0x4>

0000aa34 <DH_FREQM>:
void DH_FREQM 				(void){ while (1) {} }
    aa34:	b480      	push	{r7}
    aa36:	af00      	add	r7, sp, #0
    aa38:	e7fe      	b.n	aa38 <DH_FREQM+0x4>

0000aa3a <DH_HFLASHC>:
void DH_GPIO_5 				(void){ while (1) {} }
void DH_GPIO_6 				(void){ while (1) {} }
void DH_GPIO_7 				(void){ while (1) {} }
void DH_GPIO_8 				(void){ while (1) {} }
void DH_GPIO_9 				(void){ while (1) {} }
void DH_HFLASHC 			(void){ while (1) {} }
    aa3a:	b480      	push	{r7}
    aa3c:	af00      	add	r7, sp, #0
    aa3e:	e7fe      	b.n	aa3e <DH_HFLASHC+0x4>

0000aa40 <DH_IISC>:
void DH_IISC 				(void){ while (1) {} }
    aa40:	b480      	push	{r7}
    aa42:	af00      	add	r7, sp, #0
    aa44:	e7fe      	b.n	aa44 <DH_IISC+0x4>

0000aa46 <DH_PARC>:
void DH_LCDCA 				(void){ while (1) {} }
void DH_PARC 				(void){ while (1) {} }
    aa46:	b480      	push	{r7}
    aa48:	af00      	add	r7, sp, #0
    aa4a:	e7fe      	b.n	aa4a <DH_PARC+0x4>

0000aa4c <DH_PEVC_OV>:
void DH_PDCA_5 				(void){ while (1) {} }
void DH_PDCA_6 				(void){ while (1) {} }
void DH_PDCA_7 				(void){ while (1) {} }
void DH_PDCA_8 				(void){ while (1) {} }
void DH_PDCA_9 				(void){ while (1) {} }
void DH_PEVC_OV 			(void){ while (1) {} }
    aa4c:	b480      	push	{r7}
    aa4e:	af00      	add	r7, sp, #0
    aa50:	e7fe      	b.n	aa50 <DH_PEVC_OV+0x4>

0000aa52 <DH_PEVC_TR>:
void DH_PEVC_TR 			(void){ while (1) {} }
    aa52:	b480      	push	{r7}
    aa54:	af00      	add	r7, sp, #0
    aa56:	e7fe      	b.n	aa56 <DH_PEVC_TR+0x4>

0000aa58 <DH_PM>:
void DH_PM 					(void){ while (1) {} }
    aa58:	b480      	push	{r7}
    aa5a:	af00      	add	r7, sp, #0
    aa5c:	e7fe      	b.n	aa5c <DH_PM+0x4>

0000aa5e <DH_SCIF>:
void DH_SCIF 				(void){ while (1) {} }
    aa5e:	b480      	push	{r7}
    aa60:	af00      	add	r7, sp, #0
    aa62:	e7fe      	b.n	aa62 <DH_SCIF+0x4>

0000aa64 <DH_SPI>:
void DH_SPI 				(void){ while (1) {} }
    aa64:	b480      	push	{r7}
    aa66:	af00      	add	r7, sp, #0
    aa68:	e7fe      	b.n	aa68 <DH_SPI+0x4>

0000aa6a <DH_TC00>:
void DH_TC00 				(void){ while (1) {} }
    aa6a:	b480      	push	{r7}
    aa6c:	af00      	add	r7, sp, #0
    aa6e:	e7fe      	b.n	aa6e <DH_TC00+0x4>

0000aa70 <DH_TC01>:
void DH_TC01 				(void){ while (1) {} }
    aa70:	b480      	push	{r7}
    aa72:	af00      	add	r7, sp, #0
    aa74:	e7fe      	b.n	aa74 <DH_TC01+0x4>

0000aa76 <DH_TC02>:
void DH_TC02 				(void){ while (1) {} }
    aa76:	b480      	push	{r7}
    aa78:	af00      	add	r7, sp, #0
    aa7a:	e7fe      	b.n	aa7a <DH_TC02+0x4>

0000aa7c <DH_TC10>:
void DH_TC10 				(void){ while (1) {} }
    aa7c:	b480      	push	{r7}
    aa7e:	af00      	add	r7, sp, #0
    aa80:	e7fe      	b.n	aa80 <DH_TC10+0x4>

0000aa82 <DH_TC11>:
void DH_TC11 				(void){ while (1) {} }
    aa82:	b480      	push	{r7}
    aa84:	af00      	add	r7, sp, #0
    aa86:	e7fe      	b.n	aa86 <DH_TC11+0x4>

0000aa88 <DH_TC12>:
void DH_TC12 				(void){ while (1) {} }
    aa88:	b480      	push	{r7}
    aa8a:	af00      	add	r7, sp, #0
    aa8c:	e7fe      	b.n	aa8c <DH_TC12+0x4>

0000aa8e <DH_TRNG>:
void DH_TRNG 				(void){ while (1) {} }
    aa8e:	b480      	push	{r7}
    aa90:	af00      	add	r7, sp, #0
    aa92:	e7fe      	b.n	aa92 <DH_TRNG+0x4>

0000aa94 <DH_TWIM0>:
void DH_TWIM0 				(void){ while (1) {} }
    aa94:	b480      	push	{r7}
    aa96:	af00      	add	r7, sp, #0
    aa98:	e7fe      	b.n	aa98 <DH_TWIM0+0x4>

0000aa9a <DH_TWIM1>:
void DH_TWIM1 				(void){ while (1) {} }
    aa9a:	b480      	push	{r7}
    aa9c:	af00      	add	r7, sp, #0
    aa9e:	e7fe      	b.n	aa9e <DH_TWIM1+0x4>

0000aaa0 <DH_TWIM2>:
void DH_TWIM2 				(void){ while (1) {} }
    aaa0:	b480      	push	{r7}
    aaa2:	af00      	add	r7, sp, #0
    aaa4:	e7fe      	b.n	aaa4 <DH_TWIM2+0x4>

0000aaa6 <DH_TWIM3>:
void DH_TWIM3 				(void){ while (1) {} }
    aaa6:	b480      	push	{r7}
    aaa8:	af00      	add	r7, sp, #0
    aaaa:	e7fe      	b.n	aaaa <DH_TWIM3+0x4>

0000aaac <DH_TWIS0>:
void DH_TWIS0 				(void){ while (1) {} }
    aaac:	b480      	push	{r7}
    aaae:	af00      	add	r7, sp, #0
    aab0:	e7fe      	b.n	aab0 <DH_TWIS0+0x4>

0000aab2 <DH_TWIS1>:
void DH_TWIS1 				(void){ while (1) {} }
    aab2:	b480      	push	{r7}
    aab4:	af00      	add	r7, sp, #0
    aab6:	e7fe      	b.n	aab6 <DH_TWIS1+0x4>

0000aab8 <DH_USART0>:
void DH_USART0 				(void){ while (1) {} }
    aab8:	b480      	push	{r7}
    aaba:	af00      	add	r7, sp, #0
    aabc:	e7fe      	b.n	aabc <DH_USART0+0x4>

0000aabe <DH_USART1>:
void DH_USART1 				(void){ while (1) {} }
    aabe:	b480      	push	{r7}
    aac0:	af00      	add	r7, sp, #0
    aac2:	e7fe      	b.n	aac2 <DH_USART1+0x4>

0000aac4 <DH_USART2>:
void DH_USART2 				(void){ while (1) {} }
    aac4:	b480      	push	{r7}
    aac6:	af00      	add	r7, sp, #0
    aac8:	e7fe      	b.n	aac8 <DH_USART2+0x4>

0000aaca <DH_USART3>:
void DH_USART3 				(void){ while (1) {} }
    aaca:	b480      	push	{r7}
    aacc:	af00      	add	r7, sp, #0
    aace:	e7fe      	b.n	aace <DH_USART3+0x4>

0000aad0 <DH_USBC>:
void DH_USBC 				(void){ while (1) {} }
    aad0:	b480      	push	{r7}
    aad2:	af00      	add	r7, sp, #0
    aad4:	e7fe      	b.n	aad4 <DH_USBC+0x4>

0000aad6 <DH_WDT>:
void DH_WDT 				(void){ while (1) {} }
    aad6:	b480      	push	{r7}
    aad8:	af00      	add	r7, sp, #0
    aada:	e7fe      	b.n	aada <DH_WDT+0x4>

0000aadc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    aadc:	b580      	push	{r7, lr}
    aade:	b082      	sub	sp, #8
    aae0:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
    aae2:	4b16      	ldr	r3, [pc, #88]	; (ab3c <Reset_Handler+0x60>)
    aae4:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
    aae6:	4b16      	ldr	r3, [pc, #88]	; (ab40 <Reset_Handler+0x64>)
    aae8:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
    aaea:	687a      	ldr	r2, [r7, #4]
    aaec:	683b      	ldr	r3, [r7, #0]
    aaee:	429a      	cmp	r2, r3
    aaf0:	d00c      	beq.n	ab0c <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
    aaf2:	e007      	b.n	ab04 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
    aaf4:	683b      	ldr	r3, [r7, #0]
    aaf6:	1d1a      	adds	r2, r3, #4
    aaf8:	603a      	str	r2, [r7, #0]
    aafa:	687a      	ldr	r2, [r7, #4]
    aafc:	1d11      	adds	r1, r2, #4
    aafe:	6079      	str	r1, [r7, #4]
    ab00:	6812      	ldr	r2, [r2, #0]
    ab02:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
    ab04:	683b      	ldr	r3, [r7, #0]
    ab06:	4a0f      	ldr	r2, [pc, #60]	; (ab44 <Reset_Handler+0x68>)
    ab08:	4293      	cmp	r3, r2
    ab0a:	d3f3      	bcc.n	aaf4 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    ab0c:	4b0e      	ldr	r3, [pc, #56]	; (ab48 <Reset_Handler+0x6c>)
    ab0e:	603b      	str	r3, [r7, #0]
    ab10:	e004      	b.n	ab1c <Reset_Handler+0x40>
		*pDest++ = 0;
    ab12:	683b      	ldr	r3, [r7, #0]
    ab14:	1d1a      	adds	r2, r3, #4
    ab16:	603a      	str	r2, [r7, #0]
    ab18:	2200      	movs	r2, #0
    ab1a:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
    ab1c:	683b      	ldr	r3, [r7, #0]
    ab1e:	4a0b      	ldr	r2, [pc, #44]	; (ab4c <Reset_Handler+0x70>)
    ab20:	4293      	cmp	r3, r2
    ab22:	d3f6      	bcc.n	ab12 <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) &_sfixed;
    ab24:	4b0a      	ldr	r3, [pc, #40]	; (ab50 <Reset_Handler+0x74>)
    ab26:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    ab28:	4a0a      	ldr	r2, [pc, #40]	; (ab54 <Reset_Handler+0x78>)
    ab2a:	687b      	ldr	r3, [r7, #4]
    ab2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    ab30:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
    ab32:	4b09      	ldr	r3, [pc, #36]	; (ab58 <Reset_Handler+0x7c>)
    ab34:	4798      	blx	r3

	/* Branch to main function */
	main();
    ab36:	4b09      	ldr	r3, [pc, #36]	; (ab5c <Reset_Handler+0x80>)
    ab38:	4798      	blx	r3

	/* Infinite loop */
	while (1);
    ab3a:	e7fe      	b.n	ab3a <Reset_Handler+0x5e>
    ab3c:	00011480 	.word	0x00011480
    ab40:	20000000 	.word	0x20000000
    ab44:	200004ac 	.word	0x200004ac
    ab48:	200004ac 	.word	0x200004ac
    ab4c:	20003e5c 	.word	0x20003e5c
    ab50:	00008000 	.word	0x00008000
    ab54:	e000ed00 	.word	0xe000ed00
    ab58:	0000b285 	.word	0x0000b285
    ab5c:	0000b02d 	.word	0x0000b02d

0000ab60 <LCD_drawDigit>:
const uint8_t lcdSegBase[] = {
	1,4,6,9,11,14,16,19,21,24
};


void LCD_drawDigit(uint8_t pos, uint8_t segments) {
    ab60:	b480      	push	{r7}
    ab62:	b085      	sub	sp, #20
    ab64:	af00      	add	r7, sp, #0
    ab66:	4603      	mov	r3, r0
    ab68:	460a      	mov	r2, r1
    ab6a:	71fb      	strb	r3, [r7, #7]
    ab6c:	4613      	mov	r3, r2
    ab6e:	71bb      	strb	r3, [r7, #6]
	if(pos&1){
    ab70:	79fb      	ldrb	r3, [r7, #7]
    ab72:	f003 0301 	and.w	r3, r3, #1
    ab76:	2b00      	cmp	r3, #0
    ab78:	f000 8095 	beq.w	aca6 <LCD_drawDigit+0x146>
		uint32_t t = 0;
    ab7c:	2300      	movs	r3, #0
    ab7e:	60fb      	str	r3, [r7, #12]
		if(segments&BIT(0)) t |= (0x01)<<(lcdSegBase[pos]-1);
    ab80:	79bb      	ldrb	r3, [r7, #6]
    ab82:	f003 0301 	and.w	r3, r3, #1
    ab86:	2b00      	cmp	r3, #0
    ab88:	d00a      	beq.n	aba0 <LCD_drawDigit+0x40>
    ab8a:	79fb      	ldrb	r3, [r7, #7]
    ab8c:	4a93      	ldr	r2, [pc, #588]	; (addc <LCD_drawDigit+0x27c>)
    ab8e:	5cd3      	ldrb	r3, [r2, r3]
    ab90:	3b01      	subs	r3, #1
    ab92:	2201      	movs	r2, #1
    ab94:	fa02 f303 	lsl.w	r3, r2, r3
    ab98:	461a      	mov	r2, r3
    ab9a:	68fb      	ldr	r3, [r7, #12]
    ab9c:	4313      	orrs	r3, r2
    ab9e:	60fb      	str	r3, [r7, #12]
		if(segments&BIT(5)) t |= (0x01)<<(lcdSegBase[pos]);
    aba0:	79bb      	ldrb	r3, [r7, #6]
    aba2:	f003 0320 	and.w	r3, r3, #32
    aba6:	2b00      	cmp	r3, #0
    aba8:	d009      	beq.n	abbe <LCD_drawDigit+0x5e>
    abaa:	79fb      	ldrb	r3, [r7, #7]
    abac:	4a8b      	ldr	r2, [pc, #556]	; (addc <LCD_drawDigit+0x27c>)
    abae:	5cd3      	ldrb	r3, [r2, r3]
    abb0:	461a      	mov	r2, r3
    abb2:	2301      	movs	r3, #1
    abb4:	4093      	lsls	r3, r2
    abb6:	461a      	mov	r2, r3
    abb8:	68fb      	ldr	r3, [r7, #12]
    abba:	4313      	orrs	r3, r2
    abbc:	60fb      	str	r3, [r7, #12]
		if(segments&BIT(1)) t |= (0x01)<<(lcdSegBase[pos]+1);
    abbe:	79bb      	ldrb	r3, [r7, #6]
    abc0:	f003 0302 	and.w	r3, r3, #2
    abc4:	2b00      	cmp	r3, #0
    abc6:	d00a      	beq.n	abde <LCD_drawDigit+0x7e>
    abc8:	79fb      	ldrb	r3, [r7, #7]
    abca:	4a84      	ldr	r2, [pc, #528]	; (addc <LCD_drawDigit+0x27c>)
    abcc:	5cd3      	ldrb	r3, [r2, r3]
    abce:	3301      	adds	r3, #1
    abd0:	2201      	movs	r2, #1
    abd2:	fa02 f303 	lsl.w	r3, r2, r3
    abd6:	461a      	mov	r2, r3
    abd8:	68fb      	ldr	r3, [r7, #12]
    abda:	4313      	orrs	r3, r2
    abdc:	60fb      	str	r3, [r7, #12]
		lcdLocal.DRL3 |= t;
    abde:	4b80      	ldr	r3, [pc, #512]	; (ade0 <LCD_drawDigit+0x280>)
    abe0:	691a      	ldr	r2, [r3, #16]
    abe2:	68fb      	ldr	r3, [r7, #12]
    abe4:	4313      	orrs	r3, r2
    abe6:	4a7e      	ldr	r2, [pc, #504]	; (ade0 <LCD_drawDigit+0x280>)
    abe8:	6113      	str	r3, [r2, #16]
		t = 0;
    abea:	2300      	movs	r3, #0
    abec:	60fb      	str	r3, [r7, #12]
		if(segments&BIT(4)) t |= (0x01)<<(lcdSegBase[pos]);
    abee:	79bb      	ldrb	r3, [r7, #6]
    abf0:	f003 0310 	and.w	r3, r3, #16
    abf4:	2b00      	cmp	r3, #0
    abf6:	d009      	beq.n	ac0c <LCD_drawDigit+0xac>
    abf8:	79fb      	ldrb	r3, [r7, #7]
    abfa:	4a78      	ldr	r2, [pc, #480]	; (addc <LCD_drawDigit+0x27c>)
    abfc:	5cd3      	ldrb	r3, [r2, r3]
    abfe:	461a      	mov	r2, r3
    ac00:	2301      	movs	r3, #1
    ac02:	4093      	lsls	r3, r2
    ac04:	461a      	mov	r2, r3
    ac06:	68fb      	ldr	r3, [r7, #12]
    ac08:	4313      	orrs	r3, r2
    ac0a:	60fb      	str	r3, [r7, #12]
		if(segments&BIT(6)) t |= (0x01)<<(lcdSegBase[pos]+1);
    ac0c:	79bb      	ldrb	r3, [r7, #6]
    ac0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ac12:	2b00      	cmp	r3, #0
    ac14:	d00a      	beq.n	ac2c <LCD_drawDigit+0xcc>
    ac16:	79fb      	ldrb	r3, [r7, #7]
    ac18:	4a70      	ldr	r2, [pc, #448]	; (addc <LCD_drawDigit+0x27c>)
    ac1a:	5cd3      	ldrb	r3, [r2, r3]
    ac1c:	3301      	adds	r3, #1
    ac1e:	2201      	movs	r2, #1
    ac20:	fa02 f303 	lsl.w	r3, r2, r3
    ac24:	461a      	mov	r2, r3
    ac26:	68fb      	ldr	r3, [r7, #12]
    ac28:	4313      	orrs	r3, r2
    ac2a:	60fb      	str	r3, [r7, #12]
		lcdLocal.DRL2 |= t;
    ac2c:	4b6c      	ldr	r3, [pc, #432]	; (ade0 <LCD_drawDigit+0x280>)
    ac2e:	68da      	ldr	r2, [r3, #12]
    ac30:	68fb      	ldr	r3, [r7, #12]
    ac32:	4313      	orrs	r3, r2
    ac34:	4a6a      	ldr	r2, [pc, #424]	; (ade0 <LCD_drawDigit+0x280>)
    ac36:	60d3      	str	r3, [r2, #12]
		t = 0;
    ac38:	2300      	movs	r3, #0
    ac3a:	60fb      	str	r3, [r7, #12]
		if(segments&BIT(2)) t |= (0x01)<<(lcdSegBase[pos]);
    ac3c:	79bb      	ldrb	r3, [r7, #6]
    ac3e:	f003 0304 	and.w	r3, r3, #4
    ac42:	2b00      	cmp	r3, #0
    ac44:	d009      	beq.n	ac5a <LCD_drawDigit+0xfa>
    ac46:	79fb      	ldrb	r3, [r7, #7]
    ac48:	4a64      	ldr	r2, [pc, #400]	; (addc <LCD_drawDigit+0x27c>)
    ac4a:	5cd3      	ldrb	r3, [r2, r3]
    ac4c:	461a      	mov	r2, r3
    ac4e:	2301      	movs	r3, #1
    ac50:	4093      	lsls	r3, r2
    ac52:	461a      	mov	r2, r3
    ac54:	68fb      	ldr	r3, [r7, #12]
    ac56:	4313      	orrs	r3, r2
    ac58:	60fb      	str	r3, [r7, #12]
		if(segments&BIT(3)) t |= (0x01)<<(lcdSegBase[pos]-1);
    ac5a:	79bb      	ldrb	r3, [r7, #6]
    ac5c:	f003 0308 	and.w	r3, r3, #8
    ac60:	2b00      	cmp	r3, #0
    ac62:	d00a      	beq.n	ac7a <LCD_drawDigit+0x11a>
    ac64:	79fb      	ldrb	r3, [r7, #7]
    ac66:	4a5d      	ldr	r2, [pc, #372]	; (addc <LCD_drawDigit+0x27c>)
    ac68:	5cd3      	ldrb	r3, [r2, r3]
    ac6a:	3b01      	subs	r3, #1
    ac6c:	2201      	movs	r2, #1
    ac6e:	fa02 f303 	lsl.w	r3, r2, r3
    ac72:	461a      	mov	r2, r3
    ac74:	68fb      	ldr	r3, [r7, #12]
    ac76:	4313      	orrs	r3, r2
    ac78:	60fb      	str	r3, [r7, #12]
		if(segments&BIT(7)) t |= (0x01)<<(lcdSegBase[pos]+1);
    ac7a:	f997 3006 	ldrsb.w	r3, [r7, #6]
    ac7e:	2b00      	cmp	r3, #0
    ac80:	da0a      	bge.n	ac98 <LCD_drawDigit+0x138>
    ac82:	79fb      	ldrb	r3, [r7, #7]
    ac84:	4a55      	ldr	r2, [pc, #340]	; (addc <LCD_drawDigit+0x27c>)
    ac86:	5cd3      	ldrb	r3, [r2, r3]
    ac88:	3301      	adds	r3, #1
    ac8a:	2201      	movs	r2, #1
    ac8c:	fa02 f303 	lsl.w	r3, r2, r3
    ac90:	461a      	mov	r2, r3
    ac92:	68fb      	ldr	r3, [r7, #12]
    ac94:	4313      	orrs	r3, r2
    ac96:	60fb      	str	r3, [r7, #12]
		lcdLocal.DRL1 |= t;
    ac98:	4b51      	ldr	r3, [pc, #324]	; (ade0 <LCD_drawDigit+0x280>)
    ac9a:	689a      	ldr	r2, [r3, #8]
    ac9c:	68fb      	ldr	r3, [r7, #12]
    ac9e:	4313      	orrs	r3, r2
    aca0:	4a4f      	ldr	r2, [pc, #316]	; (ade0 <LCD_drawDigit+0x280>)
    aca2:	6093      	str	r3, [r2, #8]
		if(segments&BIT(2)) t |= (0x01)<<(lcdSegBase[pos]+1);
		if(segments&BIT(3)) t |= (0x01)<<(lcdSegBase[pos]);
		lcdLocal.DRL1 |= t;
		if(segments&BIT(7)) lcdLocal.DRL0 |= (0x01)<<(lcdSegBase[pos]+2);
	}
	return;
    aca4:	e095      	b.n	add2 <LCD_drawDigit+0x272>
		uint32_t t = 0;
    aca6:	2300      	movs	r3, #0
    aca8:	60bb      	str	r3, [r7, #8]
		if(segments&BIT(5)) t |= (0x01)<<(lcdSegBase[pos]);
    acaa:	79bb      	ldrb	r3, [r7, #6]
    acac:	f003 0320 	and.w	r3, r3, #32
    acb0:	2b00      	cmp	r3, #0
    acb2:	d009      	beq.n	acc8 <LCD_drawDigit+0x168>
    acb4:	79fb      	ldrb	r3, [r7, #7]
    acb6:	4a49      	ldr	r2, [pc, #292]	; (addc <LCD_drawDigit+0x27c>)
    acb8:	5cd3      	ldrb	r3, [r2, r3]
    acba:	461a      	mov	r2, r3
    acbc:	2301      	movs	r3, #1
    acbe:	4093      	lsls	r3, r2
    acc0:	461a      	mov	r2, r3
    acc2:	68bb      	ldr	r3, [r7, #8]
    acc4:	4313      	orrs	r3, r2
    acc6:	60bb      	str	r3, [r7, #8]
		if(segments&BIT(0)) t |= (0x01)<<(lcdSegBase[pos]+1);
    acc8:	79bb      	ldrb	r3, [r7, #6]
    acca:	f003 0301 	and.w	r3, r3, #1
    acce:	2b00      	cmp	r3, #0
    acd0:	d00a      	beq.n	ace8 <LCD_drawDigit+0x188>
    acd2:	79fb      	ldrb	r3, [r7, #7]
    acd4:	4a41      	ldr	r2, [pc, #260]	; (addc <LCD_drawDigit+0x27c>)
    acd6:	5cd3      	ldrb	r3, [r2, r3]
    acd8:	3301      	adds	r3, #1
    acda:	2201      	movs	r2, #1
    acdc:	fa02 f303 	lsl.w	r3, r2, r3
    ace0:	461a      	mov	r2, r3
    ace2:	68bb      	ldr	r3, [r7, #8]
    ace4:	4313      	orrs	r3, r2
    ace6:	60bb      	str	r3, [r7, #8]
		lcdLocal.DRL3 |= t;
    ace8:	4b3d      	ldr	r3, [pc, #244]	; (ade0 <LCD_drawDigit+0x280>)
    acea:	691a      	ldr	r2, [r3, #16]
    acec:	68bb      	ldr	r3, [r7, #8]
    acee:	4313      	orrs	r3, r2
    acf0:	4a3b      	ldr	r2, [pc, #236]	; (ade0 <LCD_drawDigit+0x280>)
    acf2:	6113      	str	r3, [r2, #16]
		t = 0;
    acf4:	2300      	movs	r3, #0
    acf6:	60bb      	str	r3, [r7, #8]
		if(segments&BIT(1)) t |= (0x01)<<(lcdSegBase[pos]+2);
    acf8:	79bb      	ldrb	r3, [r7, #6]
    acfa:	f003 0302 	and.w	r3, r3, #2
    acfe:	2b00      	cmp	r3, #0
    ad00:	d00a      	beq.n	ad18 <LCD_drawDigit+0x1b8>
    ad02:	79fb      	ldrb	r3, [r7, #7]
    ad04:	4a35      	ldr	r2, [pc, #212]	; (addc <LCD_drawDigit+0x27c>)
    ad06:	5cd3      	ldrb	r3, [r2, r3]
    ad08:	3302      	adds	r3, #2
    ad0a:	2201      	movs	r2, #1
    ad0c:	fa02 f303 	lsl.w	r3, r2, r3
    ad10:	461a      	mov	r2, r3
    ad12:	68bb      	ldr	r3, [r7, #8]
    ad14:	4313      	orrs	r3, r2
    ad16:	60bb      	str	r3, [r7, #8]
		if(segments&BIT(4)) t |= (0x01)<<(lcdSegBase[pos]);
    ad18:	79bb      	ldrb	r3, [r7, #6]
    ad1a:	f003 0310 	and.w	r3, r3, #16
    ad1e:	2b00      	cmp	r3, #0
    ad20:	d009      	beq.n	ad36 <LCD_drawDigit+0x1d6>
    ad22:	79fb      	ldrb	r3, [r7, #7]
    ad24:	4a2d      	ldr	r2, [pc, #180]	; (addc <LCD_drawDigit+0x27c>)
    ad26:	5cd3      	ldrb	r3, [r2, r3]
    ad28:	461a      	mov	r2, r3
    ad2a:	2301      	movs	r3, #1
    ad2c:	4093      	lsls	r3, r2
    ad2e:	461a      	mov	r2, r3
    ad30:	68bb      	ldr	r3, [r7, #8]
    ad32:	4313      	orrs	r3, r2
    ad34:	60bb      	str	r3, [r7, #8]
		if(segments&BIT(6)) t |= (0x01)<<(lcdSegBase[pos]+1);
    ad36:	79bb      	ldrb	r3, [r7, #6]
    ad38:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ad3c:	2b00      	cmp	r3, #0
    ad3e:	d00a      	beq.n	ad56 <LCD_drawDigit+0x1f6>
    ad40:	79fb      	ldrb	r3, [r7, #7]
    ad42:	4a26      	ldr	r2, [pc, #152]	; (addc <LCD_drawDigit+0x27c>)
    ad44:	5cd3      	ldrb	r3, [r2, r3]
    ad46:	3301      	adds	r3, #1
    ad48:	2201      	movs	r2, #1
    ad4a:	fa02 f303 	lsl.w	r3, r2, r3
    ad4e:	461a      	mov	r2, r3
    ad50:	68bb      	ldr	r3, [r7, #8]
    ad52:	4313      	orrs	r3, r2
    ad54:	60bb      	str	r3, [r7, #8]
		lcdLocal.DRL2 |= t;
    ad56:	4b22      	ldr	r3, [pc, #136]	; (ade0 <LCD_drawDigit+0x280>)
    ad58:	68da      	ldr	r2, [r3, #12]
    ad5a:	68bb      	ldr	r3, [r7, #8]
    ad5c:	4313      	orrs	r3, r2
    ad5e:	4a20      	ldr	r2, [pc, #128]	; (ade0 <LCD_drawDigit+0x280>)
    ad60:	60d3      	str	r3, [r2, #12]
		t = 0;
    ad62:	2300      	movs	r3, #0
    ad64:	60bb      	str	r3, [r7, #8]
		if(segments&BIT(2)) t |= (0x01)<<(lcdSegBase[pos]+1);
    ad66:	79bb      	ldrb	r3, [r7, #6]
    ad68:	f003 0304 	and.w	r3, r3, #4
    ad6c:	2b00      	cmp	r3, #0
    ad6e:	d00a      	beq.n	ad86 <LCD_drawDigit+0x226>
    ad70:	79fb      	ldrb	r3, [r7, #7]
    ad72:	4a1a      	ldr	r2, [pc, #104]	; (addc <LCD_drawDigit+0x27c>)
    ad74:	5cd3      	ldrb	r3, [r2, r3]
    ad76:	3301      	adds	r3, #1
    ad78:	2201      	movs	r2, #1
    ad7a:	fa02 f303 	lsl.w	r3, r2, r3
    ad7e:	461a      	mov	r2, r3
    ad80:	68bb      	ldr	r3, [r7, #8]
    ad82:	4313      	orrs	r3, r2
    ad84:	60bb      	str	r3, [r7, #8]
		if(segments&BIT(3)) t |= (0x01)<<(lcdSegBase[pos]);
    ad86:	79bb      	ldrb	r3, [r7, #6]
    ad88:	f003 0308 	and.w	r3, r3, #8
    ad8c:	2b00      	cmp	r3, #0
    ad8e:	d009      	beq.n	ada4 <LCD_drawDigit+0x244>
    ad90:	79fb      	ldrb	r3, [r7, #7]
    ad92:	4a12      	ldr	r2, [pc, #72]	; (addc <LCD_drawDigit+0x27c>)
    ad94:	5cd3      	ldrb	r3, [r2, r3]
    ad96:	461a      	mov	r2, r3
    ad98:	2301      	movs	r3, #1
    ad9a:	4093      	lsls	r3, r2
    ad9c:	461a      	mov	r2, r3
    ad9e:	68bb      	ldr	r3, [r7, #8]
    ada0:	4313      	orrs	r3, r2
    ada2:	60bb      	str	r3, [r7, #8]
		lcdLocal.DRL1 |= t;
    ada4:	4b0e      	ldr	r3, [pc, #56]	; (ade0 <LCD_drawDigit+0x280>)
    ada6:	689a      	ldr	r2, [r3, #8]
    ada8:	68bb      	ldr	r3, [r7, #8]
    adaa:	4313      	orrs	r3, r2
    adac:	4a0c      	ldr	r2, [pc, #48]	; (ade0 <LCD_drawDigit+0x280>)
    adae:	6093      	str	r3, [r2, #8]
		if(segments&BIT(7)) lcdLocal.DRL0 |= (0x01)<<(lcdSegBase[pos]+2);
    adb0:	f997 3006 	ldrsb.w	r3, [r7, #6]
    adb4:	2b00      	cmp	r3, #0
    adb6:	da0c      	bge.n	add2 <LCD_drawDigit+0x272>
    adb8:	4b09      	ldr	r3, [pc, #36]	; (ade0 <LCD_drawDigit+0x280>)
    adba:	685b      	ldr	r3, [r3, #4]
    adbc:	79fa      	ldrb	r2, [r7, #7]
    adbe:	4907      	ldr	r1, [pc, #28]	; (addc <LCD_drawDigit+0x27c>)
    adc0:	5c8a      	ldrb	r2, [r1, r2]
    adc2:	3202      	adds	r2, #2
    adc4:	2101      	movs	r1, #1
    adc6:	fa01 f202 	lsl.w	r2, r1, r2
    adca:	4313      	orrs	r3, r2
    adcc:	4a04      	ldr	r2, [pc, #16]	; (ade0 <LCD_drawDigit+0x280>)
    adce:	6053      	str	r3, [r2, #4]
	return;
    add0:	bf00      	nop
    add2:	bf00      	nop
}
    add4:	3714      	adds	r7, #20
    add6:	46bd      	mov	sp, r7
    add8:	bc80      	pop	{r7}
    adda:	4770      	bx	lr
    addc:	0000e3f8 	.word	0x0000e3f8
    ade0:	20003e24 	.word	0x20003e24

0000ade4 <LCD_localClear>:

void LCD_localClear(){
    ade4:	b480      	push	{r7}
    ade6:	af00      	add	r7, sp, #0
	lcdLocal.DRL0 = 0;
    ade8:	4b07      	ldr	r3, [pc, #28]	; (ae08 <LCD_localClear+0x24>)
    adea:	2200      	movs	r2, #0
    adec:	605a      	str	r2, [r3, #4]
	lcdLocal.DRL1 = 0;
    adee:	4b06      	ldr	r3, [pc, #24]	; (ae08 <LCD_localClear+0x24>)
    adf0:	2200      	movs	r2, #0
    adf2:	609a      	str	r2, [r3, #8]
	lcdLocal.DRL2 = 0;
    adf4:	4b04      	ldr	r3, [pc, #16]	; (ae08 <LCD_localClear+0x24>)
    adf6:	2200      	movs	r2, #0
    adf8:	60da      	str	r2, [r3, #12]
	lcdLocal.DRL3 = 0;
    adfa:	4b03      	ldr	r3, [pc, #12]	; (ae08 <LCD_localClear+0x24>)
    adfc:	2200      	movs	r2, #0
    adfe:	611a      	str	r2, [r3, #16]
	return;
    ae00:	bf00      	nop
}
    ae02:	46bd      	mov	sp, r7
    ae04:	bc80      	pop	{r7}
    ae06:	4770      	bx	lr
    ae08:	20003e24 	.word	0x20003e24

0000ae0c <LCD_localPush>:
	lcdLocal.DRL2 = DRL2;
	lcdLocal.DRL3 = DRL3;
	return;
}

void LCD_localPush(){
    ae0c:	b480      	push	{r7}
    ae0e:	af00      	add	r7, sp, #0
	LCDCA->LCDCA_DRL0 = lcdLocal.DRL0;
    ae10:	4a09      	ldr	r2, [pc, #36]	; (ae38 <LCD_localPush+0x2c>)
    ae12:	4b0a      	ldr	r3, [pc, #40]	; (ae3c <LCD_localPush+0x30>)
    ae14:	685b      	ldr	r3, [r3, #4]
    ae16:	6153      	str	r3, [r2, #20]
	LCDCA->LCDCA_DRL1 = lcdLocal.DRL1;
    ae18:	4a07      	ldr	r2, [pc, #28]	; (ae38 <LCD_localPush+0x2c>)
    ae1a:	4b08      	ldr	r3, [pc, #32]	; (ae3c <LCD_localPush+0x30>)
    ae1c:	689b      	ldr	r3, [r3, #8]
    ae1e:	61d3      	str	r3, [r2, #28]
	LCDCA->LCDCA_DRL2 = lcdLocal.DRL2;
    ae20:	4a05      	ldr	r2, [pc, #20]	; (ae38 <LCD_localPush+0x2c>)
    ae22:	4b06      	ldr	r3, [pc, #24]	; (ae3c <LCD_localPush+0x30>)
    ae24:	68db      	ldr	r3, [r3, #12]
    ae26:	6253      	str	r3, [r2, #36]	; 0x24
	LCDCA->LCDCA_DRL3 = lcdLocal.DRL3;
    ae28:	4a03      	ldr	r2, [pc, #12]	; (ae38 <LCD_localPush+0x2c>)
    ae2a:	4b04      	ldr	r3, [pc, #16]	; (ae3c <LCD_localPush+0x30>)
    ae2c:	691b      	ldr	r3, [r3, #16]
    ae2e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
    ae30:	bf00      	nop
    ae32:	46bd      	mov	sp, r7
    ae34:	bc80      	pop	{r7}
    ae36:	4770      	bx	lr
    ae38:	40080000 	.word	0x40080000
    ae3c:	20003e24 	.word	0x20003e24

0000ae40 <osc_enable>:
{
    ae40:	b580      	push	{r7, lr}
    ae42:	b082      	sub	sp, #8
    ae44:	af00      	add	r7, sp, #0
    ae46:	4603      	mov	r3, r0
    ae48:	71fb      	strb	r3, [r7, #7]
	switch (id) {
    ae4a:	79fb      	ldrb	r3, [r7, #7]
    ae4c:	2b06      	cmp	r3, #6
    ae4e:	d823      	bhi.n	ae98 <osc_enable+0x58>
    ae50:	a201      	add	r2, pc, #4	; (adr r2, ae58 <osc_enable+0x18>)
    ae52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ae56:	bf00      	nop
    ae58:	0000ae75 	.word	0x0000ae75
    ae5c:	0000ae7b 	.word	0x0000ae7b
    ae60:	0000ae81 	.word	0x0000ae81
    ae64:	0000ae87 	.word	0x0000ae87
    ae68:	0000ae8d 	.word	0x0000ae8d
    ae6c:	0000ae93 	.word	0x0000ae93
    ae70:	0000ae99 	.word	0x0000ae99
		osc_priv_enable_osc0();
    ae74:	4b0b      	ldr	r3, [pc, #44]	; (aea4 <osc_enable+0x64>)
    ae76:	4798      	blx	r3
		break;
    ae78:	e00f      	b.n	ae9a <osc_enable+0x5a>
		osc_priv_enable_osc32();
    ae7a:	4b0b      	ldr	r3, [pc, #44]	; (aea8 <osc_enable+0x68>)
    ae7c:	4798      	blx	r3
		break;
    ae7e:	e00c      	b.n	ae9a <osc_enable+0x5a>
		osc_priv_enable_rc32k();
    ae80:	4b0a      	ldr	r3, [pc, #40]	; (aeac <osc_enable+0x6c>)
    ae82:	4798      	blx	r3
		break;
    ae84:	e009      	b.n	ae9a <osc_enable+0x5a>
		osc_priv_enable_rc80m();
    ae86:	4b0a      	ldr	r3, [pc, #40]	; (aeb0 <osc_enable+0x70>)
    ae88:	4798      	blx	r3
		break;
    ae8a:	e006      	b.n	ae9a <osc_enable+0x5a>
		osc_priv_enable_rcfast();
    ae8c:	4b09      	ldr	r3, [pc, #36]	; (aeb4 <osc_enable+0x74>)
    ae8e:	4798      	blx	r3
		break;
    ae90:	e003      	b.n	ae9a <osc_enable+0x5a>
		osc_priv_enable_rc1m();
    ae92:	4b09      	ldr	r3, [pc, #36]	; (aeb8 <osc_enable+0x78>)
    ae94:	4798      	blx	r3
		break;
    ae96:	e000      	b.n	ae9a <osc_enable+0x5a>
		break;
    ae98:	bf00      	nop
}
    ae9a:	bf00      	nop
    ae9c:	3708      	adds	r7, #8
    ae9e:	46bd      	mov	sp, r7
    aea0:	bd80      	pop	{r7, pc}
    aea2:	bf00      	nop
    aea4:	00008241 	.word	0x00008241
    aea8:	0000827d 	.word	0x0000827d
    aeac:	000082b9 	.word	0x000082b9
    aeb0:	00008339 	.word	0x00008339
    aeb4:	00008379 	.word	0x00008379
    aeb8:	000082f9 	.word	0x000082f9

0000aebc <ast_alarm_callback>:
uint8_t  KBB_sameKeyCount;
uint16_t KBB_keyDuration;
uint8_t  KBB_keyFlag;
uint16_t KBB_keyDuration1;
uint8_t showing_help;
static void ast_alarm_callback(void) {
    aebc:	b580      	push	{r7, lr}
    aebe:	af00      	add	r7, sp, #0
	ast_disable_interrupt(AST, AST_INTERRUPT_ALARM);
    aec0:	2100      	movs	r1, #0
    aec2:	480a      	ldr	r0, [pc, #40]	; (aeec <ast_alarm_callback+0x30>)
    aec4:	4b0a      	ldr	r3, [pc, #40]	; (aef0 <ast_alarm_callback+0x34>)
    aec6:	4798      	blx	r3
	ast_clear_interrupt_flag(AST, AST_INTERRUPT_ALARM);
    aec8:	2100      	movs	r1, #0
    aeca:	4808      	ldr	r0, [pc, #32]	; (aeec <ast_alarm_callback+0x30>)
    aecc:	4b09      	ldr	r3, [pc, #36]	; (aef4 <ast_alarm_callback+0x38>)
    aece:	4798      	blx	r3
	
	ast_write_counter_value(AST, 0);
    aed0:	2100      	movs	r1, #0
    aed2:	4806      	ldr	r0, [pc, #24]	; (aeec <ast_alarm_callback+0x30>)
    aed4:	4b08      	ldr	r3, [pc, #32]	; (aef8 <ast_alarm_callback+0x3c>)
    aed6:	4798      	blx	r3
	ast_write_alarm0_value(AST, AST_AR0_RST);
    aed8:	2132      	movs	r1, #50	; 0x32
    aeda:	4804      	ldr	r0, [pc, #16]	; (aeec <ast_alarm_callback+0x30>)
    aedc:	4b07      	ldr	r3, [pc, #28]	; (aefc <ast_alarm_callback+0x40>)
    aede:	4798      	blx	r3
	ast_enable_interrupt(AST, AST_INTERRUPT_ALARM);
    aee0:	2100      	movs	r1, #0
    aee2:	4802      	ldr	r0, [pc, #8]	; (aeec <ast_alarm_callback+0x30>)
    aee4:	4b06      	ldr	r3, [pc, #24]	; (af00 <ast_alarm_callback+0x44>)
    aee6:	4798      	blx	r3
	return;
    aee8:	bf00      	nop

	
	ast_write_counter_value(AST, 0);
	ast_write_alarm0_value(AST, AST_AR0_RST);
	ast_enable_interrupt(AST, AST_INTERRUPT_ALARM);
}
    aeea:	bd80      	pop	{r7, pc}
    aeec:	400f0800 	.word	0x400f0800
    aef0:	0000997d 	.word	0x0000997d
    aef4:	00009a05 	.word	0x00009a05
    aef8:	00009885 	.word	0x00009885
    aefc:	000098bd 	.word	0x000098bd
    af00:	000098f5 	.word	0x000098f5

0000af04 <config_ast>:

static void config_ast(void) {
    af04:	b590      	push	{r4, r7, lr}
    af06:	b087      	sub	sp, #28
    af08:	af02      	add	r7, sp, #8
	struct ast_config ast_conf;
	osc_enable(OSC_ID_OSC32);
    af0a:	2001      	movs	r0, #1
    af0c:	4b3a      	ldr	r3, [pc, #232]	; (aff8 <config_ast+0xf4>)
    af0e:	4798      	blx	r3
	if(!osc_is_ready(OSC_ID_OSC32)) {
		
		osc_wait_ready(OSC_ID_OSC32);
	}
	*/
	ast_enable(AST);
    af10:	483a      	ldr	r0, [pc, #232]	; (affc <config_ast+0xf8>)
    af12:	4b3b      	ldr	r3, [pc, #236]	; (b000 <config_ast+0xfc>)
    af14:	4798      	blx	r3
	ast_conf.mode     = AST_COUNTER_MODE;
    af16:	2300      	movs	r3, #0
    af18:	713b      	strb	r3, [r7, #4]
	ast_conf.osc_type = AST_OSC_32KHZ;
    af1a:	2301      	movs	r3, #1
    af1c:	717b      	strb	r3, [r7, #5]
	ast_conf.psel     = 0x04;
    af1e:	2304      	movs	r3, #4
    af20:	71bb      	strb	r3, [r7, #6]
	ast_conf.counter  = 0;
    af22:	2300      	movs	r3, #0
    af24:	60bb      	str	r3, [r7, #8]
	if(!ast_set_config(AST, &ast_conf)) {
    af26:	1d3b      	adds	r3, r7, #4
    af28:	4619      	mov	r1, r3
    af2a:	4834      	ldr	r0, [pc, #208]	; (affc <config_ast+0xf8>)
    af2c:	4b35      	ldr	r3, [pc, #212]	; (b004 <config_ast+0x100>)
    af2e:	4798      	blx	r3
    af30:	4603      	mov	r3, r0
    af32:	2b00      	cmp	r3, #0
    af34:	d147      	bne.n	afc6 <config_ast+0xc2>
		LCD_localClear();
    af36:	4b34      	ldr	r3, [pc, #208]	; (b008 <config_ast+0x104>)
    af38:	4798      	blx	r3
		LCD_drawDigit(0, LUT_lcdSeg['F'-' ']);
    af3a:	4b34      	ldr	r3, [pc, #208]	; (b00c <config_ast+0x108>)
    af3c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    af40:	4619      	mov	r1, r3
    af42:	2000      	movs	r0, #0
    af44:	4b32      	ldr	r3, [pc, #200]	; (b010 <config_ast+0x10c>)
    af46:	4798      	blx	r3
		LCD_drawDigit(1, LUT_lcdSeg['A'-' ']);
    af48:	4b30      	ldr	r3, [pc, #192]	; (b00c <config_ast+0x108>)
    af4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    af4e:	4619      	mov	r1, r3
    af50:	2001      	movs	r0, #1
    af52:	4b2f      	ldr	r3, [pc, #188]	; (b010 <config_ast+0x10c>)
    af54:	4798      	blx	r3
		LCD_drawDigit(2, LUT_lcdSeg['I'-' ']);
    af56:	4b2d      	ldr	r3, [pc, #180]	; (b00c <config_ast+0x108>)
    af58:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    af5c:	4619      	mov	r1, r3
    af5e:	2002      	movs	r0, #2
    af60:	4b2b      	ldr	r3, [pc, #172]	; (b010 <config_ast+0x10c>)
    af62:	4798      	blx	r3
		LCD_drawDigit(3, LUT_lcdSeg['L'-' ']);
    af64:	4b29      	ldr	r3, [pc, #164]	; (b00c <config_ast+0x108>)
    af66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    af6a:	4619      	mov	r1, r3
    af6c:	2003      	movs	r0, #3
    af6e:	4b28      	ldr	r3, [pc, #160]	; (b010 <config_ast+0x10c>)
    af70:	4798      	blx	r3
		LCD_drawDigit(4, LUT_lcdSeg['-'-' ']);
    af72:	4b26      	ldr	r3, [pc, #152]	; (b00c <config_ast+0x108>)
    af74:	7b5b      	ldrb	r3, [r3, #13]
    af76:	4619      	mov	r1, r3
    af78:	2004      	movs	r0, #4
    af7a:	4b25      	ldr	r3, [pc, #148]	; (b010 <config_ast+0x10c>)
    af7c:	4798      	blx	r3
		LCD_drawDigit(5, LUT_lcdSeg['A'-' ']);
    af7e:	4b23      	ldr	r3, [pc, #140]	; (b00c <config_ast+0x108>)
    af80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    af84:	4619      	mov	r1, r3
    af86:	2005      	movs	r0, #5
    af88:	4b21      	ldr	r3, [pc, #132]	; (b010 <config_ast+0x10c>)
    af8a:	4798      	blx	r3
		LCD_drawDigit(6, LUT_lcdSeg['S'-' ']);
    af8c:	4b1f      	ldr	r3, [pc, #124]	; (b00c <config_ast+0x108>)
    af8e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
    af92:	4619      	mov	r1, r3
    af94:	2006      	movs	r0, #6
    af96:	4b1e      	ldr	r3, [pc, #120]	; (b010 <config_ast+0x10c>)
    af98:	4798      	blx	r3
		LCD_drawDigit(7, LUT_lcdSeg['T'-' ']);
    af9a:	4b1c      	ldr	r3, [pc, #112]	; (b00c <config_ast+0x108>)
    af9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    afa0:	4619      	mov	r1, r3
    afa2:	2007      	movs	r0, #7
    afa4:	4b1a      	ldr	r3, [pc, #104]	; (b010 <config_ast+0x10c>)
    afa6:	4798      	blx	r3
		LCD_drawDigit(8, LUT_lcdSeg[' '-' ']);
    afa8:	4b18      	ldr	r3, [pc, #96]	; (b00c <config_ast+0x108>)
    afaa:	781b      	ldrb	r3, [r3, #0]
    afac:	4619      	mov	r1, r3
    afae:	2008      	movs	r0, #8
    afb0:	4b17      	ldr	r3, [pc, #92]	; (b010 <config_ast+0x10c>)
    afb2:	4798      	blx	r3
		LCD_drawDigit(9, LUT_lcdSeg[' '-' ']);
    afb4:	4b15      	ldr	r3, [pc, #84]	; (b00c <config_ast+0x108>)
    afb6:	781b      	ldrb	r3, [r3, #0]
    afb8:	4619      	mov	r1, r3
    afba:	2009      	movs	r0, #9
    afbc:	4b14      	ldr	r3, [pc, #80]	; (b010 <config_ast+0x10c>)
    afbe:	4798      	blx	r3
		LCD_localPush();
    afc0:	4b14      	ldr	r3, [pc, #80]	; (b014 <config_ast+0x110>)
    afc2:	4798      	blx	r3
		while(1);
    afc4:	e7fe      	b.n	afc4 <config_ast+0xc0>
	}
	
	ast_clear_interrupt_flag(AST, AST_INTERRUPT_ALARM);
    afc6:	2100      	movs	r1, #0
    afc8:	480c      	ldr	r0, [pc, #48]	; (affc <config_ast+0xf8>)
    afca:	4b13      	ldr	r3, [pc, #76]	; (b018 <config_ast+0x114>)
    afcc:	4798      	blx	r3
	ast_enable_wakeup(AST, AST_WAKEUP_ALARM);
    afce:	2100      	movs	r1, #0
    afd0:	480a      	ldr	r0, [pc, #40]	; (affc <config_ast+0xf8>)
    afd2:	4b12      	ldr	r3, [pc, #72]	; (b01c <config_ast+0x118>)
    afd4:	4798      	blx	r3
	ast_set_callback(AST, AST_INTERRUPT_ALARM, ast_alarm_callback,
    afd6:	2301      	movs	r3, #1
    afd8:	9300      	str	r3, [sp, #0]
    afda:	2327      	movs	r3, #39	; 0x27
    afdc:	4a10      	ldr	r2, [pc, #64]	; (b020 <config_ast+0x11c>)
    afde:	2100      	movs	r1, #0
    afe0:	4806      	ldr	r0, [pc, #24]	; (affc <config_ast+0xf8>)
    afe2:	4c10      	ldr	r4, [pc, #64]	; (b024 <config_ast+0x120>)
    afe4:	47a0      	blx	r4
		AST_ALARM_IRQn, 1);
	ast_disable_interrupt(AST, AST_INTERRUPT_ALARM);
    afe6:	2100      	movs	r1, #0
    afe8:	4804      	ldr	r0, [pc, #16]	; (affc <config_ast+0xf8>)
    afea:	4b0f      	ldr	r3, [pc, #60]	; (b028 <config_ast+0x124>)
    afec:	4798      	blx	r3
}
    afee:	bf00      	nop
    aff0:	3714      	adds	r7, #20
    aff2:	46bd      	mov	sp, r7
    aff4:	bd90      	pop	{r4, r7, pc}
    aff6:	bf00      	nop
    aff8:	0000ae41 	.word	0x0000ae41
    affc:	400f0800 	.word	0x400f0800
    b000:	000096f9 	.word	0x000096f9
    b004:	0000971d 	.word	0x0000971d
    b008:	0000ade5 	.word	0x0000ade5
    b00c:	0000e404 	.word	0x0000e404
    b010:	0000ab61 	.word	0x0000ab61
    b014:	0000ae0d 	.word	0x0000ae0d
    b018:	00009a05 	.word	0x00009a05
    b01c:	00009b09 	.word	0x00009b09
    b020:	0000aebd 	.word	0x0000aebd
    b024:	00009a8d 	.word	0x00009a8d
    b028:	0000997d 	.word	0x0000997d

0000b02c <main>:
 */

#include "vROM.h"

int main(void)
{
    b02c:	b580      	push	{r7, lr}
    b02e:	b088      	sub	sp, #32
    b030:	af00      	add	r7, sp, #0
	/* LCDCA configuration */
	struct lcdca_config lcdca_cfg;
	uint32_t str_id = 0;
    b032:	2300      	movs	r3, #0
    b034:	61bb      	str	r3, [r7, #24]
	/* Initialize the SAM system */
	sysclk_init();
    b036:	4b80      	ldr	r3, [pc, #512]	; (b238 <main+0x20c>)
    b038:	4798      	blx	r3
	// ...
	// cpu_irq_restore(flags);
	
	*/
	
	board_init();
    b03a:	4b80      	ldr	r3, [pc, #512]	; (b23c <main+0x210>)
    b03c:	4798      	blx	r3
	// - Clock,
	// - Connect to C42364A glass LCD component,
	// - Timing:  64 Hz frame rate & low power waveform, FC0, FC1, FC2
	// - Interrupt: off.
	//! [lcd_example_init_clock]
	lcdca_clk_init();
    b03e:	4b80      	ldr	r3, [pc, #512]	; (b240 <main+0x214>)
    b040:	4798      	blx	r3
	//! [lcd_example_init_clock]
	lcdca_cfg.port_mask = PORT_MASK;
    b042:	2328      	movs	r3, #40	; 0x28
    b044:	723b      	strb	r3, [r7, #8]
	lcdca_cfg.x_bias = false;
    b046:	2300      	movs	r3, #0
    b048:	727b      	strb	r3, [r7, #9]
	lcdca_cfg.lp_wave = true;
    b04a:	2301      	movs	r3, #1
    b04c:	72bb      	strb	r3, [r7, #10]
	lcdca_cfg.duty_type = LCD_DUTY;
    b04e:	2300      	movs	r3, #0
    b050:	72fb      	strb	r3, [r7, #11]
	lcdca_cfg.lcd_pres = false;
    b052:	2300      	movs	r3, #0
    b054:	733b      	strb	r3, [r7, #12]
	lcdca_cfg.lcd_clkdiv = 3;
    b056:	2303      	movs	r3, #3
    b058:	737b      	strb	r3, [r7, #13]
	lcdca_cfg.fc0 = 16;
    b05a:	2310      	movs	r3, #16
    b05c:	73bb      	strb	r3, [r7, #14]
	lcdca_cfg.fc1 = 2;
    b05e:	2302      	movs	r3, #2
    b060:	73fb      	strb	r3, [r7, #15]
	lcdca_cfg.fc2 = 6;
    b062:	2306      	movs	r3, #6
    b064:	743b      	strb	r3, [r7, #16]
	lcdca_cfg.contrast = LCD_CONTRAST_LEVEL;
    b066:	230a      	movs	r3, #10
    b068:	747b      	strb	r3, [r7, #17]
	lcdca_set_config(&lcdca_cfg);
    b06a:	f107 0308 	add.w	r3, r7, #8
    b06e:	4618      	mov	r0, r3
    b070:	4b74      	ldr	r3, [pc, #464]	; (b244 <main+0x218>)
    b072:	4798      	blx	r3
	lcdca_enable();
    b074:	4b74      	ldr	r3, [pc, #464]	; (b248 <main+0x21c>)
    b076:	4798      	blx	r3
	// lcdca_enable_timer(LCDCA_TIMER_FC0);
	// lcdca_enable_timer(LCDCA_TIMER_FC1);
	// lcdca_enable_timer(LCDCA_TIMER_FC2);
	//! [lcd_example_enable_timers]
	
	config_ast();
    b078:	4b74      	ldr	r3, [pc, #464]	; (b24c <main+0x220>)
    b07a:	4798      	blx	r3
	
	ast_write_counter_value(AST, 0);
    b07c:	2100      	movs	r1, #0
    b07e:	4874      	ldr	r0, [pc, #464]	; (b250 <main+0x224>)
    b080:	4b74      	ldr	r3, [pc, #464]	; (b254 <main+0x228>)
    b082:	4798      	blx	r3
	ast_write_alarm0_value(AST, AST_AR0_RST);
    b084:	2132      	movs	r1, #50	; 0x32
    b086:	4872      	ldr	r0, [pc, #456]	; (b250 <main+0x224>)
    b088:	4b73      	ldr	r3, [pc, #460]	; (b258 <main+0x22c>)
    b08a:	4798      	blx	r3
	// ast_enable_interrupt(AST, AST_INTERRUPT_ALARM);
	
	LCD_localClear();
    b08c:	4b73      	ldr	r3, [pc, #460]	; (b25c <main+0x230>)
    b08e:	4798      	blx	r3
	LCD_localPush();
    b090:	4b73      	ldr	r3, [pc, #460]	; (b260 <main+0x234>)
    b092:	4798      	blx	r3
	// GPIO->GPIO_PORT[1].GPIO_ODERC = BIT(7)|BIT(5)|BIT(4)|BIT(0)|BIT(1)|BIT(2)|BIT(3);
	// GPIO->GPIO_PORT[0].GPIO_ODERC = BIT(7);
	
	
	
	GPIO->GPIO_PORT[2].GPIO_OVRC  = BIT(3)|BIT(4)|BIT(5)|BIT(6);
    b094:	4b73      	ldr	r3, [pc, #460]	; (b264 <main+0x238>)
    b096:	2278      	movs	r2, #120	; 0x78
    b098:	f8c3 2458 	str.w	r2, [r3, #1112]	; 0x458
	GPIO->GPIO_PORT[2].GPIO_ODERC = BIT(3)|BIT(4)|BIT(5)|BIT(6);
    b09c:	4b71      	ldr	r3, [pc, #452]	; (b264 <main+0x238>)
    b09e:	2278      	movs	r2, #120	; 0x78
    b0a0:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
	
	 GPIO->GPIO_PORT[1].GPIO_ODERC = BIT(1);
    b0a4:	4b6f      	ldr	r3, [pc, #444]	; (b264 <main+0x238>)
    b0a6:	2202      	movs	r2, #2
    b0a8:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	GPIO->GPIO_PORT[1].GPIO_PUERS = BIT(1);
    b0ac:	4b6d      	ldr	r3, [pc, #436]	; (b264 <main+0x238>)
    b0ae:	2202      	movs	r2, #2
    b0b0:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
	GPIO->GPIO_PORT[1].GPIO_PDERC = BIT(1);
    b0b4:	4b6b      	ldr	r3, [pc, #428]	; (b264 <main+0x238>)
    b0b6:	2202      	movs	r2, #2
    b0b8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	nut_reset();
    b0bc:	4b6a      	ldr	r3, [pc, #424]	; (b268 <main+0x23c>)
    b0be:	4798      	blx	r3
	volatile uint32_t t=0;
    b0c0:	2300      	movs	r3, #0
    b0c2:	607b      	str	r3, [r7, #4]
	// printf("Enter power save mode.\n\r");
	// printf("It'll display power save string sequence and"
	//		"blink wireless icon when every wake up.\n\r");
	
	uint16_t di = 0;
    b0c4:	2300      	movs	r3, #0
    b0c6:	82fb      	strh	r3, [r7, #22]
	unsigned int cnt  = 0;
    b0c8:	2300      	movs	r3, #0
    b0ca:	61fb      	str	r3, [r7, #28]
		// lcdca_toggle_pixel(ICON_WLESS);
		// delay_ms(20);
		
		
		
		LCD_localClear();
    b0cc:	4b63      	ldr	r3, [pc, #396]	; (b25c <main+0x230>)
    b0ce:	4798      	blx	r3
		// nut_execute_cycle();
		cnt++;
    b0d0:	69fb      	ldr	r3, [r7, #28]
    b0d2:	3301      	adds	r3, #1
    b0d4:	61fb      	str	r3, [r7, #28]
		uint16_t opcode = (vROM[(cnt/2)+1])<<8;
    b0d6:	69fb      	ldr	r3, [r7, #28]
    b0d8:	085b      	lsrs	r3, r3, #1
    b0da:	3301      	adds	r3, #1
    b0dc:	4a63      	ldr	r2, [pc, #396]	; (b26c <main+0x240>)
    b0de:	5cd3      	ldrb	r3, [r2, r3]
    b0e0:	b29b      	uxth	r3, r3
    b0e2:	021b      	lsls	r3, r3, #8
    b0e4:	82bb      	strh	r3, [r7, #20]
		opcode |= (vROM[(cnt/2)]);
    b0e6:	69fb      	ldr	r3, [r7, #28]
    b0e8:	085b      	lsrs	r3, r3, #1
    b0ea:	4a60      	ldr	r2, [pc, #384]	; (b26c <main+0x240>)
    b0ec:	5cd3      	ldrb	r3, [r2, r3]
    b0ee:	b29a      	uxth	r2, r3
    b0f0:	8abb      	ldrh	r3, [r7, #20]
    b0f2:	4313      	orrs	r3, r2
    b0f4:	82bb      	strh	r3, [r7, #20]
		LCD_drawDigit(3, LUT_lcdSeg[bcd2ascii[opcode&0x0F]]|0x80);
    b0f6:	8abb      	ldrh	r3, [r7, #20]
    b0f8:	f003 030f 	and.w	r3, r3, #15
    b0fc:	4a5c      	ldr	r2, [pc, #368]	; (b270 <main+0x244>)
    b0fe:	5cd3      	ldrb	r3, [r2, r3]
    b100:	461a      	mov	r2, r3
    b102:	4b5c      	ldr	r3, [pc, #368]	; (b274 <main+0x248>)
    b104:	5c9b      	ldrb	r3, [r3, r2]
    b106:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b10a:	b2db      	uxtb	r3, r3
    b10c:	4619      	mov	r1, r3
    b10e:	2003      	movs	r0, #3
    b110:	4b59      	ldr	r3, [pc, #356]	; (b278 <main+0x24c>)
    b112:	4798      	blx	r3
		LCD_drawDigit(2, LUT_lcdSeg[bcd2ascii[(opcode>>4)&0x0F]]);
    b114:	8abb      	ldrh	r3, [r7, #20]
    b116:	091b      	lsrs	r3, r3, #4
    b118:	b29b      	uxth	r3, r3
    b11a:	f003 030f 	and.w	r3, r3, #15
    b11e:	4a54      	ldr	r2, [pc, #336]	; (b270 <main+0x244>)
    b120:	5cd3      	ldrb	r3, [r2, r3]
    b122:	461a      	mov	r2, r3
    b124:	4b53      	ldr	r3, [pc, #332]	; (b274 <main+0x248>)
    b126:	5c9b      	ldrb	r3, [r3, r2]
    b128:	4619      	mov	r1, r3
    b12a:	2002      	movs	r0, #2
    b12c:	4b52      	ldr	r3, [pc, #328]	; (b278 <main+0x24c>)
    b12e:	4798      	blx	r3
		LCD_drawDigit(1, LUT_lcdSeg[bcd2ascii[(opcode>>8)&0x0F]]);
    b130:	8abb      	ldrh	r3, [r7, #20]
    b132:	0a1b      	lsrs	r3, r3, #8
    b134:	b29b      	uxth	r3, r3
    b136:	f003 030f 	and.w	r3, r3, #15
    b13a:	4a4d      	ldr	r2, [pc, #308]	; (b270 <main+0x244>)
    b13c:	5cd3      	ldrb	r3, [r2, r3]
    b13e:	461a      	mov	r2, r3
    b140:	4b4c      	ldr	r3, [pc, #304]	; (b274 <main+0x248>)
    b142:	5c9b      	ldrb	r3, [r3, r2]
    b144:	4619      	mov	r1, r3
    b146:	2001      	movs	r0, #1
    b148:	4b4b      	ldr	r3, [pc, #300]	; (b278 <main+0x24c>)
    b14a:	4798      	blx	r3
		LCD_drawDigit(0, LUT_lcdSeg[bcd2ascii[(opcode>>12)&0x0F]]);
    b14c:	8abb      	ldrh	r3, [r7, #20]
    b14e:	0b1b      	lsrs	r3, r3, #12
    b150:	b29b      	uxth	r3, r3
    b152:	f003 030f 	and.w	r3, r3, #15
    b156:	4a46      	ldr	r2, [pc, #280]	; (b270 <main+0x244>)
    b158:	5cd3      	ldrb	r3, [r2, r3]
    b15a:	461a      	mov	r2, r3
    b15c:	4b45      	ldr	r3, [pc, #276]	; (b274 <main+0x248>)
    b15e:	5c9b      	ldrb	r3, [r3, r2]
    b160:	4619      	mov	r1, r3
    b162:	2000      	movs	r0, #0
    b164:	4b44      	ldr	r3, [pc, #272]	; (b278 <main+0x24c>)
    b166:	4798      	blx	r3
		
		LCD_drawDigit(6, LUT_lcdSeg[bcd2ascii[nut_get_ucode(nutr.prev_pc)&0x0F]]|0x80);
    b168:	4b44      	ldr	r3, [pc, #272]	; (b27c <main+0x250>)
    b16a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    b16e:	4618      	mov	r0, r3
    b170:	4b43      	ldr	r3, [pc, #268]	; (b280 <main+0x254>)
    b172:	4798      	blx	r3
    b174:	4603      	mov	r3, r0
    b176:	f003 030f 	and.w	r3, r3, #15
    b17a:	4a3d      	ldr	r2, [pc, #244]	; (b270 <main+0x244>)
    b17c:	5cd3      	ldrb	r3, [r2, r3]
    b17e:	461a      	mov	r2, r3
    b180:	4b3c      	ldr	r3, [pc, #240]	; (b274 <main+0x248>)
    b182:	5c9b      	ldrb	r3, [r3, r2]
    b184:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b188:	b2db      	uxtb	r3, r3
    b18a:	4619      	mov	r1, r3
    b18c:	2006      	movs	r0, #6
    b18e:	4b3a      	ldr	r3, [pc, #232]	; (b278 <main+0x24c>)
    b190:	4798      	blx	r3
		LCD_drawDigit(5, LUT_lcdSeg[bcd2ascii[(nut_get_ucode(nutr.prev_pc)>>4)&0x0F]]);
    b192:	4b3a      	ldr	r3, [pc, #232]	; (b27c <main+0x250>)
    b194:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    b198:	4618      	mov	r0, r3
    b19a:	4b39      	ldr	r3, [pc, #228]	; (b280 <main+0x254>)
    b19c:	4798      	blx	r3
    b19e:	4603      	mov	r3, r0
    b1a0:	091b      	lsrs	r3, r3, #4
    b1a2:	b29b      	uxth	r3, r3
    b1a4:	f003 030f 	and.w	r3, r3, #15
    b1a8:	4a31      	ldr	r2, [pc, #196]	; (b270 <main+0x244>)
    b1aa:	5cd3      	ldrb	r3, [r2, r3]
    b1ac:	461a      	mov	r2, r3
    b1ae:	4b31      	ldr	r3, [pc, #196]	; (b274 <main+0x248>)
    b1b0:	5c9b      	ldrb	r3, [r3, r2]
    b1b2:	4619      	mov	r1, r3
    b1b4:	2005      	movs	r0, #5
    b1b6:	4b30      	ldr	r3, [pc, #192]	; (b278 <main+0x24c>)
    b1b8:	4798      	blx	r3
		LCD_drawDigit(4, LUT_lcdSeg[bcd2ascii[(nut_get_ucode(nutr.prev_pc)>>8)&0x0F]]);
    b1ba:	4b30      	ldr	r3, [pc, #192]	; (b27c <main+0x250>)
    b1bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    b1c0:	4618      	mov	r0, r3
    b1c2:	4b2f      	ldr	r3, [pc, #188]	; (b280 <main+0x254>)
    b1c4:	4798      	blx	r3
    b1c6:	4603      	mov	r3, r0
    b1c8:	0a1b      	lsrs	r3, r3, #8
    b1ca:	b29b      	uxth	r3, r3
    b1cc:	f003 030f 	and.w	r3, r3, #15
    b1d0:	4a27      	ldr	r2, [pc, #156]	; (b270 <main+0x244>)
    b1d2:	5cd3      	ldrb	r3, [r2, r3]
    b1d4:	461a      	mov	r2, r3
    b1d6:	4b27      	ldr	r3, [pc, #156]	; (b274 <main+0x248>)
    b1d8:	5c9b      	ldrb	r3, [r3, r2]
    b1da:	4619      	mov	r1, r3
    b1dc:	2004      	movs	r0, #4
    b1de:	4b26      	ldr	r3, [pc, #152]	; (b278 <main+0x24c>)
    b1e0:	4798      	blx	r3
		
		LCD_drawDigit(9, LUT_lcdSeg[bcd2ascii[(cnt>>8)&0x0F]]);
    b1e2:	69fb      	ldr	r3, [r7, #28]
    b1e4:	0a1b      	lsrs	r3, r3, #8
    b1e6:	f003 030f 	and.w	r3, r3, #15
    b1ea:	4a21      	ldr	r2, [pc, #132]	; (b270 <main+0x244>)
    b1ec:	5cd3      	ldrb	r3, [r2, r3]
    b1ee:	461a      	mov	r2, r3
    b1f0:	4b20      	ldr	r3, [pc, #128]	; (b274 <main+0x248>)
    b1f2:	5c9b      	ldrb	r3, [r3, r2]
    b1f4:	4619      	mov	r1, r3
    b1f6:	2009      	movs	r0, #9
    b1f8:	4b1f      	ldr	r3, [pc, #124]	; (b278 <main+0x24c>)
    b1fa:	4798      	blx	r3
		LCD_drawDigit(8, LUT_lcdSeg[bcd2ascii[(cnt>>12)&0x0F]]);
    b1fc:	69fb      	ldr	r3, [r7, #28]
    b1fe:	0b1b      	lsrs	r3, r3, #12
    b200:	f003 030f 	and.w	r3, r3, #15
    b204:	4a1a      	ldr	r2, [pc, #104]	; (b270 <main+0x244>)
    b206:	5cd3      	ldrb	r3, [r2, r3]
    b208:	461a      	mov	r2, r3
    b20a:	4b1a      	ldr	r3, [pc, #104]	; (b274 <main+0x248>)
    b20c:	5c9b      	ldrb	r3, [r3, r2]
    b20e:	4619      	mov	r1, r3
    b210:	2008      	movs	r0, #8
    b212:	4b19      	ldr	r3, [pc, #100]	; (b278 <main+0x24c>)
    b214:	4798      	blx	r3
		LCD_drawDigit(7, LUT_lcdSeg[bcd2ascii[(cnt>>16)&0x0F]]);
    b216:	69fb      	ldr	r3, [r7, #28]
    b218:	0c1b      	lsrs	r3, r3, #16
    b21a:	f003 030f 	and.w	r3, r3, #15
    b21e:	4a14      	ldr	r2, [pc, #80]	; (b270 <main+0x244>)
    b220:	5cd3      	ldrb	r3, [r2, r3]
    b222:	461a      	mov	r2, r3
    b224:	4b13      	ldr	r3, [pc, #76]	; (b274 <main+0x248>)
    b226:	5c9b      	ldrb	r3, [r3, r2]
    b228:	4619      	mov	r1, r3
    b22a:	2007      	movs	r0, #7
    b22c:	4b12      	ldr	r3, [pc, #72]	; (b278 <main+0x24c>)
    b22e:	4798      	blx	r3
		LCD_localPush();
    b230:	4b0b      	ldr	r3, [pc, #44]	; (b260 <main+0x234>)
    b232:	4798      	blx	r3
	while (1) {
    b234:	e74a      	b.n	b0cc <main+0xa0>
    b236:	bf00      	nop
    b238:	00009169 	.word	0x00009169
    b23c:	00009475 	.word	0x00009475
    b240:	0000a38d 	.word	0x0000a38d
    b244:	0000a3dd 	.word	0x0000a3dd
    b248:	0000a479 	.word	0x0000a479
    b24c:	0000af05 	.word	0x0000af05
    b250:	400f0800 	.word	0x400f0800
    b254:	00009885 	.word	0x00009885
    b258:	000098bd 	.word	0x000098bd
    b25c:	0000ade5 	.word	0x0000ade5
    b260:	0000ae0d 	.word	0x0000ae0d
    b264:	400e1000 	.word	0x400e1000
    b268:	000080f9 	.word	0x000080f9
    b26c:	0000e454 	.word	0x0000e454
    b270:	0000e444 	.word	0x0000e444
    b274:	0000e404 	.word	0x0000e404
    b278:	0000ab61 	.word	0x0000ab61
    b27c:	20000504 	.word	0x20000504
    b280:	000080c5 	.word	0x000080c5

0000b284 <__libc_init_array>:
    b284:	b570      	push	{r4, r5, r6, lr}
    b286:	4e0f      	ldr	r6, [pc, #60]	; (b2c4 <__libc_init_array+0x40>)
    b288:	4d0f      	ldr	r5, [pc, #60]	; (b2c8 <__libc_init_array+0x44>)
    b28a:	1b76      	subs	r6, r6, r5
    b28c:	10b6      	asrs	r6, r6, #2
    b28e:	bf18      	it	ne
    b290:	2400      	movne	r4, #0
    b292:	d005      	beq.n	b2a0 <__libc_init_array+0x1c>
    b294:	3401      	adds	r4, #1
    b296:	f855 3b04 	ldr.w	r3, [r5], #4
    b29a:	4798      	blx	r3
    b29c:	42a6      	cmp	r6, r4
    b29e:	d1f9      	bne.n	b294 <__libc_init_array+0x10>
    b2a0:	4e0a      	ldr	r6, [pc, #40]	; (b2cc <__libc_init_array+0x48>)
    b2a2:	4d0b      	ldr	r5, [pc, #44]	; (b2d0 <__libc_init_array+0x4c>)
    b2a4:	1b76      	subs	r6, r6, r5
    b2a6:	f006 f8d9 	bl	1145c <_init>
    b2aa:	10b6      	asrs	r6, r6, #2
    b2ac:	bf18      	it	ne
    b2ae:	2400      	movne	r4, #0
    b2b0:	d006      	beq.n	b2c0 <__libc_init_array+0x3c>
    b2b2:	3401      	adds	r4, #1
    b2b4:	f855 3b04 	ldr.w	r3, [r5], #4
    b2b8:	4798      	blx	r3
    b2ba:	42a6      	cmp	r6, r4
    b2bc:	d1f9      	bne.n	b2b2 <__libc_init_array+0x2e>
    b2be:	bd70      	pop	{r4, r5, r6, pc}
    b2c0:	bd70      	pop	{r4, r5, r6, pc}
    b2c2:	bf00      	nop
    b2c4:	00011468 	.word	0x00011468
    b2c8:	00011468 	.word	0x00011468
    b2cc:	00011470 	.word	0x00011470
    b2d0:	00011468 	.word	0x00011468

0000b2d4 <register_fini>:
    b2d4:	4b02      	ldr	r3, [pc, #8]	; (b2e0 <register_fini+0xc>)
    b2d6:	b113      	cbz	r3, b2de <register_fini+0xa>
    b2d8:	4802      	ldr	r0, [pc, #8]	; (b2e4 <register_fini+0x10>)
    b2da:	f000 b805 	b.w	b2e8 <atexit>
    b2de:	4770      	bx	lr
    b2e0:	00000000 	.word	0x00000000
    b2e4:	0000b2f5 	.word	0x0000b2f5

0000b2e8 <atexit>:
    b2e8:	2300      	movs	r3, #0
    b2ea:	4601      	mov	r1, r0
    b2ec:	461a      	mov	r2, r3
    b2ee:	4618      	mov	r0, r3
    b2f0:	f000 b81e 	b.w	b330 <__register_exitproc>

0000b2f4 <__libc_fini_array>:
    b2f4:	b538      	push	{r3, r4, r5, lr}
    b2f6:	4c0a      	ldr	r4, [pc, #40]	; (b320 <__libc_fini_array+0x2c>)
    b2f8:	4d0a      	ldr	r5, [pc, #40]	; (b324 <__libc_fini_array+0x30>)
    b2fa:	1b64      	subs	r4, r4, r5
    b2fc:	10a4      	asrs	r4, r4, #2
    b2fe:	d00a      	beq.n	b316 <__libc_fini_array+0x22>
    b300:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    b304:	3b01      	subs	r3, #1
    b306:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    b30a:	3c01      	subs	r4, #1
    b30c:	f855 3904 	ldr.w	r3, [r5], #-4
    b310:	4798      	blx	r3
    b312:	2c00      	cmp	r4, #0
    b314:	d1f9      	bne.n	b30a <__libc_fini_array+0x16>
    b316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b31a:	f006 b8a9 	b.w	11470 <_fini>
    b31e:	bf00      	nop
    b320:	00011480 	.word	0x00011480
    b324:	0001147c 	.word	0x0001147c

0000b328 <__retarget_lock_acquire_recursive>:
    b328:	4770      	bx	lr
    b32a:	bf00      	nop

0000b32c <__retarget_lock_release_recursive>:
    b32c:	4770      	bx	lr
    b32e:	bf00      	nop

0000b330 <__register_exitproc>:
    b330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b334:	4d2c      	ldr	r5, [pc, #176]	; (b3e8 <__register_exitproc+0xb8>)
    b336:	4606      	mov	r6, r0
    b338:	6828      	ldr	r0, [r5, #0]
    b33a:	4698      	mov	r8, r3
    b33c:	460f      	mov	r7, r1
    b33e:	4691      	mov	r9, r2
    b340:	f7ff fff2 	bl	b328 <__retarget_lock_acquire_recursive>
    b344:	4b29      	ldr	r3, [pc, #164]	; (b3ec <__register_exitproc+0xbc>)
    b346:	681c      	ldr	r4, [r3, #0]
    b348:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    b34c:	2b00      	cmp	r3, #0
    b34e:	d03e      	beq.n	b3ce <__register_exitproc+0x9e>
    b350:	685a      	ldr	r2, [r3, #4]
    b352:	2a1f      	cmp	r2, #31
    b354:	dc1c      	bgt.n	b390 <__register_exitproc+0x60>
    b356:	f102 0e01 	add.w	lr, r2, #1
    b35a:	b176      	cbz	r6, b37a <__register_exitproc+0x4a>
    b35c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    b360:	2401      	movs	r4, #1
    b362:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    b366:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    b36a:	4094      	lsls	r4, r2
    b36c:	4320      	orrs	r0, r4
    b36e:	2e02      	cmp	r6, #2
    b370:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    b374:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    b378:	d023      	beq.n	b3c2 <__register_exitproc+0x92>
    b37a:	3202      	adds	r2, #2
    b37c:	f8c3 e004 	str.w	lr, [r3, #4]
    b380:	6828      	ldr	r0, [r5, #0]
    b382:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    b386:	f7ff ffd1 	bl	b32c <__retarget_lock_release_recursive>
    b38a:	2000      	movs	r0, #0
    b38c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b390:	4b17      	ldr	r3, [pc, #92]	; (b3f0 <__register_exitproc+0xc0>)
    b392:	b30b      	cbz	r3, b3d8 <__register_exitproc+0xa8>
    b394:	f44f 70c8 	mov.w	r0, #400	; 0x190
    b398:	f3af 8000 	nop.w
    b39c:	4603      	mov	r3, r0
    b39e:	b1d8      	cbz	r0, b3d8 <__register_exitproc+0xa8>
    b3a0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    b3a4:	6002      	str	r2, [r0, #0]
    b3a6:	2100      	movs	r1, #0
    b3a8:	6041      	str	r1, [r0, #4]
    b3aa:	460a      	mov	r2, r1
    b3ac:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    b3b0:	f04f 0e01 	mov.w	lr, #1
    b3b4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    b3b8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    b3bc:	2e00      	cmp	r6, #0
    b3be:	d0dc      	beq.n	b37a <__register_exitproc+0x4a>
    b3c0:	e7cc      	b.n	b35c <__register_exitproc+0x2c>
    b3c2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    b3c6:	430c      	orrs	r4, r1
    b3c8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    b3cc:	e7d5      	b.n	b37a <__register_exitproc+0x4a>
    b3ce:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    b3d2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    b3d6:	e7bb      	b.n	b350 <__register_exitproc+0x20>
    b3d8:	6828      	ldr	r0, [r5, #0]
    b3da:	f7ff ffa7 	bl	b32c <__retarget_lock_release_recursive>
    b3de:	f04f 30ff 	mov.w	r0, #4294967295
    b3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b3e6:	bf00      	nop
    b3e8:	200004a8 	.word	0x200004a8
    b3ec:	00011458 	.word	0x00011458
    b3f0:	00000000 	.word	0x00000000

0000b3f4 <vROM>:
    b3f4:	004e01cf 02380270 00ff02ee 000c0231     ..N.p.8.....1...
    b404:	000c01a1 0304006e 019d0184 00000002     ....n...........
    b414:	01660308 00ee014a 014d014c 014b0146     ..f.J...L.M.F.K.
    b424:	004e0024 003c0220 01300106 03e00018     $.N. .<...0.....
    b434:	00000065 03600366 01fd02e0 001c0042     e...f.`.....B...
    b444:	032002e0 01b803db 00160106 03e00138     .. .........8...
    b454:	01950313 00ed00f3 014e00fd 00c90000     ..........N.....
    b464:	02310320 0065000c 03660000 03840177      .1...e...f.w...
    b474:	000c01a1 000002d9 02040304 00840244     ............D...
    b484:	00000065 00750130 0366029c 0130015b     e...0.u...f.[.0.
    b494:	03660017 01300073 03660012 005201e9     ..f.s.0...f...R.
    b4a4:	00140130 01530366 03660226 00880187     0...f.S.&.f.....
    b4b4:	000002d9 00500305 03ef008c 0014020b     ......P.........
    b4c4:	00810073 01330000 00000060 00000000     s.....3.`.......
    b4d4:	01730158 00ec00f4 00d700fe 00cc01a3     X.s.............
    b4e4:	02100327 0102029c 020201b8 009301a8     '...............
    b4f4:	01770156 00ea00e9 01c9016f 0155000e     V.w.....o.....U.
    b504:	026d01ae 0131000c 001b0018 02040304     ..m...1.........
    b514:	02840244 01440104 0235006e 006e0008     D.....D.n.5...n.
    b524:	00cf020c 038c0304 00230001 03440184     ..........#...D.
    b534:	001c021d 0269038c 00840044 0006035c     ......i.D...\...
    b544:	004201d9 0220004e 005a0330 017001bc     ..B.N. .0.Z...p.
    b554:	03e002e0 000c00e1 00320091 03cc03c8     ..........2.....
    b564:	013003f7 03c80004 026603cc 03e003eb     ..0.......f.....
    b574:	014f0157 00eb00f7 00d300ff 00cd0000     W.O.............
    b584:	00d40182 01660173 00d40166 00d10173     ....s.f.f...s...
    b594:	009c000c 02cc016b 0007037d 02cc0153     ....k...}...S...
    b5a4:	004f01bd 01bf0214 01af0314 009f0154     ..O.........T...
    b5b4:	00130254 0141000c 00060006 0004005c     T.....A.....\...
    b5c4:	01660133 01660166 01660166 01070154     3.f.f.f.f.f.T...
    b5d4:	00f70054 01660166 00d70294 01660166     T...f.f.....f.f.
    b5e4:	00b70094 01660166 01660166 01660166     ....f.f.f.f.f.f.
    b5f4:	013f02cc 014f0354 008b0054 002b0356     ..?.T.O.T...V.+.
    b604:	01100130 014b01c6 03e60166 031c0183     0.....K.f.......
    b614:	0042017d 0162031c 0143039c 01270356     }.B...b...C.V.'.
    b624:	00060130 002f0154 006b0294 00a30146     0...T./...k.F...
    b634:	0302039c 0146001b 031c007b 00630162     ......F.{...b.c.
    b644:	001b019c 0047004c 001603e6 03dc01b6     ....L.G.........
    b654:	03eb02d4 00a60386 00040044 012d0054     ........D...T.-.
    b664:	00b9000b 03e60022 00160048 002c0135     ...."...H...5.,.
    b674:	004201e1 0027038c 00010388 03840022     ..B...'....."...
    b684:	00020245 01660166 01660166 01660166     E...f.f.f.f.f.f.
    b694:	01660166 01660166 01660166 01660166     f.f.f.f.f.f.f.f.
    b6a4:	02cc0166 00d4002f 025c002f 011c0023     f.../.../.\.#...
    b6b4:	029c0013 000c00bd 000600b1 02df00d4     ................
    b6c4:	01370314 01270214 033f02cc 02cc031b     ..7...'...?.....
    b6d4:	029c031b 02cc01c3 00130279 02cc02f3     ........y.......
    b6e4:	00d401ff 038c003f 00170021 00010354     ....?...!...T...
    b6f4:	02e30053 02cc0166 00d40277 01660267     S...f...w...g.f.
    b704:	0153031c 0162031c 01660162 01300166     ..S...b.b.f.f.0.
    b714:	01460050 03ed02c4 03140002 021403c7     P.F.............
    b724:	025403b7 02cc0387 0007014d 01bc01f8     ..T.....M.......
    b734:	003c0046 00d401e8 00130305 001202bd     F.<.............
    b744:	0166015c 000c00d1 000203fd 03cf02cc     \.f.............
    b754:	029700d4 00d1021c 03e1000c 00f10002     ................
    b764:	038c000c 01b8002f 001301fe 027901fe     ..../.........y.
    b774:	00b00002 027e005e 0088010e 02050004     ....^.~.........
    b784:	02d90024 01a90000 021c0032 011601d0     $.......2.......
    b794:	004e0196 017c00b6 00aa009c 0350035c     ..N...|.....\.P.
    b7a4:	025c02d0 03d003d0 02d00290 03e90323     ..\.........#...
    b7b4:	005a002c 002f02e6 01d0021c 035003d0     ,.Z.../.......P.
    b7c4:	005600f6 0222031c 039c0222 010601e6     ..V...".".......
    b7d4:	014601ee 014601e6 0270004e 027c01b8     ..F...F.N.p...|.
    b7e4:	03c603c6 022202a2 0130001b 005a0010     ......"...0...Z.
    b7f4:	0260001a 025701c6 017a02a0 03e603db     ..`...W...z.....
    b804:	0150021c 027a005a 0316009c 0110010f     ..P.Z.z.........
    b814:	031601d6 01d600d7 00cf0316 03da03da     ................
    b824:	016603e6 001f0316 01d60166 0176001c     ..f.....f.....v.
    b834:	03160276 00900013 02fc00a6 021c03c6     v...............
    b844:	00d003d0 00bb01bc 00130090 00a600d0     ................
    b854:	001f02f6 03da0276 006b037c 03d0011c     ....v...|.k.....
    b864:	03e603d0 03d0005c 00aa03ea 0222011c     ....\.........".
    b874:	03d0002b 00aa011c 026203e0 02dc00a6     +.........b.....
    b884:	00be0350 034603c3 02840183 004e02a0     P.....F.......N.
    b894:	02040130 010b0306 00070130 023a0260     0.......0...`.:.
    b8a4:	01c602a0 014603e3 023a0260 039c023a     ......F.`.:.:...
    b8b4:	001f0342 027a0146 01ba001a 0046025a     B...F.z.....Z.F.
    b8c4:	03ee003c 00b603ee 03e900a6 02e6002c     <...........,...
    b8d4:	031c0023 0023024a 017d005c 02ea0042     #...J.#.\.}.B...
    b8e4:	02360027 03cb0256 0315008c 03f50023     '.6.V.......#...
    b8f4:	030c002c 020c003f 03b8002f 03a8005e     ,...?.../...^...
    b904:	00a6004e 00c503e8 020c0032 030c001f     N.......2.......
    b914:	03e900ab 0106002c 036603f8 0046001f     ....,.....f...F.
    b924:	02600063 02e6021c 01160053 031601d0     c.`.....S.......
    b934:	00b6004b 02dc0236 03e002f0 01fc0130     K...6.......0...
    b944:	026603db 0050021c 03e903bb 010e002c     ..f...P.....,...
    b954:	03f00130 036601e6 00ae0203 000a0265     0.....f.....e...
    b964:	002c03f5 00560106 00380270 01b601b6     ..,...V.p.8.....
    b974:	03ce0360 03e303ce 01d800ae 005e00ae     `.............^.
    b984:	000e005a 00eb02e6 0250019c 01d00162     Z.........P.b...
    b994:	02a000ba 0276015a 00dc03f3 026001d0     ....Z.v.......`.
    b9a4:	039c0226 01da02a0 02620260 031c03e3     &.......`.b.....
    b9b4:	003f0222 035c02a0 00500050 015a0090     ".?...\.P.P...Z.
    b9c4:	025c0260 03e001aa 02f60276 021c005f     `.\.....v..._...
    b9d4:	022a01d0 013000a6 00a600fd 0017036a     ..*...0.....j...
    b9e4:	02f00046 002603e0 03f50023 00e6002c     F.....&.#...,...
    b9f4:	002c03e9 03a8005e 00e6004e 03e003e8     ..,.^...N.......
    ba04:	014102cc 00d40007 00d1002f 0166000c     ..A...../.....f.
    ba14:	03f1025c 02cc0002 00d40057 00d1002f     \.......W.../...
    ba24:	0008000c 00d103b3 039c000c 00060001     ................
    ba34:	002702cc 00d402c8 019c0043 00dc001b     ..'.....C.......
    ba44:	004402c4 00c40004 000600f9 0044035c     ..D.........\.D.
    ba54:	001603e6 004b0386 000c00c1 03e00176     ......K.....v...
    ba64:	00440344 008400c4 00040184 03e002c4     D.D.............
    ba74:	00330013 00c30073 00820083 007200c2     ..3.s.........r.
    ba84:	00120032 00300010 00c00070 00870080     2.....0.p.......
    ba94:	007700c7 00170037 00310011 00c10071     ..w.7.....1.q...
    baa4:	00840081 007400c4 00140034 00380018     ......t.4.....8.
    bab4:	00c80078 00840088 007500c5 00150035     x.........u.5...
    bac4:	01510130 00a602a6 0270004e 01bc01f8     0.Q.....N.p.....
    bad4:	03a00366 00040130 0058039c 000b0130     f...0.....X.0...
    bae4:	00140169 0270004e 0090035c 03d00310     i...N.p.\.......
    baf4:	03c401a8 01a002c4 026e0070 0350011c     ........p.n...P.
    bb04:	03d00290 004201b1 00a00260 000002e5     ......B.`.......
    bb14:	036003cc 00000060 013c01b8 004a031c     ..`.`.....<...J.
    bb24:	01a8017c 008e03e0 01380158 01b800e8     |.......X.8.....
    bb34:	01f80106 031c027c 00bc00aa 006e01e8     ....|.........n.
    bb44:	03e00198 015002dc 03f302d4 03a0004c     ......P.....L...
    bb54:	03e001ee 01b800ee 03d8017c 00cc0044     ........|...D...
    bb64:	00480013 013c03d8 00ee01a8 031503e0     ..H...<.........
    bb74:	03cb000c 000c0315 00ee0393 017c01b8     ..............|.
    bb84:	008403d8 03a002cc 03e00088 015c004e     ............N.\.
    bb94:	039c0222 01ee0013 03f301a2 01b8010e     "...............
    bba4:	03e000ae 004e00ae 00380270 03e000ae     ......N.p.8.....
    bbb4:	008801bc 01e801e4 017800d8 00a8017c     ..........x.|...
    bbc4:	01f801fc 00400044 00f4014c 00000174     ....D.@.L...t...
    bbd4:	008801bc 01e801e4 017800d8 00a8017c     ..........x.|...
    bbe4:	01f801fc 015c00fc 01cc0134 00740174     ......\.4...t.t.
    bbf4:	02c303bf 02c403be 00c50155 00cc01bc     ........U.......
    bc04:	00d30000 00d60018 03e50209 03e401f5     ................
    bc14:	02e80374 02d40064 02e90385 02e00388     t...d...........
    bc24:	02d0036c 01c001de 01b001af 00000000     l...............
    bc34:	03730333 0374032f 03750332 03760331     3.s./.t.2.u.1.v.
    bc44:	00f403ab 00f90399 02f6038d 01940282     ................
    bc54:	00710353 0284000a 029f00f1 0190021a     S.q.............
    bc64:	0180021f 0170024b 01600237 00d50042     ....K.p.7.`.B...
    bc74:	00230200 002401fc 002501ff 002601fe     ..#...$...%...&.
    bc84:	00330004 00360021 02f5038e 02310053     ..3.!.6.....S.1.
    bc94:	024e0077 00340007 004900b0 00400182     w.N...4...I...@.
    bca4:	0030017f 002001ce 001001b1 02a00371     ..0... .....q...
    bcb4:	02a10368 02a2037f 02a3037c 02c10028     h.......|...(...
    bcc4:	02f303b1 02f803b8 01a703e2 00a8019d     ................
    bcd4:	01a901ae 01aa02ee 01ab02ae 01ac02bb     ................
    bce4:	01ad02b6 01ae02d8 01af02d9 007203a0     ..............r.
    bcf4:	00510210 0052020f 00530211 01540218     ..Q...R...S...T.
    bd04:	01550224 0156022b 01570312 01580313     $.U.+.V...W...X.
    bd14:	015901c2 015a02b3 015b02b0 015c02bc     ..Y...Z...[...\.
    bd24:	015d02b7 015e02d6 015f02da 000803ed     ..]...^..._.....
    bd34:	0063038c 02e603b8 0266004b 004600a6     ..c.....K.f...F.
    bd44:	013003a8 017900fd 02410014 03080002     ..0...y...A.....
    bd54:	002c03f5 0033038c 00080245 005400e9     ..,...3.E.....T.
    bd64:	02e603bb 028403e7 03bb02ee 003c03c5     ..............<.
    bd74:	00e103b3 03f5000c 0308002c 005302e6     ........,.....S.
    bd84:	000803b1 001f038c 02840088 005400e9     ..............T.
    bd94:	03b8038b 03f80106 03e800a6 00ee03a3     ................
    bda4:	000802b5 00080245 00560106 00380270     ....E.....V.p.8.
    bdb4:	011a039c 00a6011e 03ee03ee 0276006e     ............n.v.
    bdc4:	03dc002b 03ee03dc 027603ee 005603db     +.........v...V.
    bdd4:	03dc0236 03aa03aa 012a006e 02f000ae     6.......n.*.....
    bde4:	002c03e9 036a031c 03f50027 027b0008     ..,...j.'.....{.
    bdf4:	019c0086 00ae000a 00ee037c 02ab0266     ........|...f...
    be04:	002c03e9 03f801d8 000102e6 02760022     ..,.........".v.
    be14:	001b031c 03dc03dc 03eb0276 02700056     ........v...V.p.
    be24:	003800ee 03ea00ae 038e03ea 01d8038e     ..8.............
    be34:	031c006e 0093036a 01d801aa 027000ae     n...j.........p.
    be44:	003800ae 00ae023c 006a019c 02700226     ..8.<.....j.&.p.
    be54:	02f000ae 019801a6 00ae036b 01b60270     ........k...p...
    be64:	007f0356 02f0004e 002c03e9 000803b1     V...N.....,.....
    be74:	002c03f5 000803b1 000803f5 00020245     ..,.........E...
    be84:	039300ee 0017020c 02600320 0360028c     ........ .`...`.
    be94:	01a1024c 01040038 001a0288 01ba001e     L...8...........
    bea4:	03e0004e 013000a6 00a600df 02600056     N.....0.....V.`.
    beb4:	031c002e 036a026a 027003a0 02f000ee     ....j.j...p.....
    bec4:	03cb00ee 001802e5 01840108 001800a1     ................
    bed4:	03a002cc 02c400c8 02dd03e0 02e50018     ................
    bee4:	039c0018 001302e2 00a200c8 033c0386     ..............<.
    bef4:	014403e0 00fc01b8 01080284 03600276     ..D.........v.`.
    bf04:	02880104 03600276 03e00284 00ae0084     ....v.`.........
    bf14:	00ee01d8 012e01d8 02260023 00880013     ........#.&.....
    bf24:	00ee01d8 00ae01d8 03a00126 03e00088     ........&.......
    bf34:	01d80066 00ae0084 00ee01d8 018e01d8     f...............
    bf44:	02660023 00880013 00ee01d8 00ae01d8     #.f.............
    bf54:	03a00186 007d0363 00ae0038 03b001d8     ....c.}.8.......
    bf64:	00ae01d8 03b000ee 03e000ee 01d800ae     ................
    bf74:	01d80370 00ee00ae 03bb0370 01d80066     p.......p...f...
    bf84:	037c01b8 02fc011e 02fc0046 01e60226     ..|.....F...&...
    bf94:	01e601e6 004e0106 036001be 01be0386     ......N...`.....
    bfa4:	00a60360 01be033c 03e003f3 01d80066     `...<.......f...
    bfb4:	0289004c 004c0015 00140239 03a0008c     L.....L.9.......
    bfc4:	028c00c8 004c03a0 026e01ab 01a603a0     ......L...n.....
    bfd4:	028c03a0 03e003df 00180301 00180139     ............9...
    bfe4:	002c03c9 0018031d 00180119 00180035     ..,.........5...
    bff4:	0013000c 00210184 006e0018 03e001d8     ......!...n.....
    c004:	01d8006e 0301001b 010c0018 00ae0360     n...........`...
    c014:	03d8033c 002f028c 02fc03d8 03e000ae     <...../.........
    c024:	02fc03d8 03b100ae 007d002c 028c0038     ........,.}.8...
    c034:	022e0360 016603a0 028c03a0 03e003df     `.....f.........
    c044:	00140319 02e5010c 018c0019 028c0023     ............#...
    c054:	00180085 00140281 0017008c 023902c8     ..............9.
    c064:	018c0014 031303a0 002b0108 00180301     ..........+.....
    c074:	00180139 002c03c9 0018031d 0158008e     9.....,.......X.
    c084:	010601f8 03e000b0 00180229 01f80070     ........)...p...
    c094:	01e800a6 012103bb 01450018 00a80038     ......!...E.8...
    c0a4:	02bc01f8 00aa031c 03a302bc 001800f1     ................
    c0b4:	01d80028 01f80070 031c003c 01bc00aa     (...p...<.......
    c0c4:	034300ea 00180301 00180035 00c70346     ..C.....5...F...
    c0d4:	0018034d 00a3030e 031c00ae 01ea01ea     M...............
    c0e4:	02be023c 005e011e 01ee01ee 00100130     <.....^.....0...
    c0f4:	01e60013 03f3027e 00140349 021c0243     ....~...I...C...
    c104:	0042017d 001802b5 026e004e 00ee00e2     }.B.....N.n.....
    c114:	00af01be 00ee0002 00ee033c 02d403d4     ........<.......
    c124:	019803c3 003f01be 00ee0042 00ee033c     ......?.B...<...
    c134:	03cb03d4 03b0006e 03e00066 00a601f8     ....n...f.......
    c144:	03b0006e 01980106 026003e0 01580016     n.........`...X.
    c154:	037c01b8 01bc011e 00e2031c 02e503e0     ..|.............
    c164:	00ae0018 00ae01e6 03a001ee 03e00166     ............f...
    c174:	0121034c 0321001b 01190014 010c0018     L.!...!.........
    c184:	02890360 008c0014 00150239 0289008c     `.......9.......
    c194:	00840014 010e03e0 01bc01b8 0042031c     ..............B.
    c1a4:	039c0056 01e602a2 022601e6 001301fe     V.........&.....
    c1b4:	01fe0226 02260013 001301fe 005a0226     &.....&.....&.Z.
    c1c4:	03e0005e 02a0039c 001a001e 03460016     ^.............F.
    c1d4:	03e601cb 010202fc 013001d8 005a0015     ..........0...Z.
    c1e4:	01fa00cb 01fa00ba 017a0013 01fa00ba     ..........z.....
    c1f4:	01fa00ba 017a0013 01fa00ba 01fa00ba     ......z.........
    c204:	017a0013 01fa00ba 01fa00ba 017a0013     ..z...........z.
    c214:	01d800ba 007a002e 02fc03ee 01d80102     ......z.........
    c224:	01ba017a 0013013a 0266023a 001e02db     z...:...:.f.....
    c234:	038e038e 005e038e 02bc0046 00aa025c     ......^.F...\...
    c244:	02ee016b 010e015b 00130130 03ee001b     k...[...0.......
    c254:	035e0266 00ae03eb 01300158 03060011     f.^.....X.0.....
    c264:	00ae0047 005a000e 01bc01d8 029b0106     G.....Z.........
    c274:	00a60198 003b000e 01ee00ae 01ee01ee     ......;.........
    c284:	00ae01ee 00e6002e 022602fc 00e60266     ..........&.f...
    c294:	0266012e 00ae0393 0260000e 00ee03e0     ..f.......`.....
    c2a4:	017c01b8 010403d8 0013004c 03d80108     ..|.....L.......
    c2b4:	03e000ce 0178014e 00670276 03e00168     ....N.x.v.g.h...
    c2c4:	02760178 01b003e3 01ed00ae 0015001c     x.v.............
    c2d4:	01b0002e 020100ae 004e001c 03c30268     ..........N.h...
    c2e4:	0278010e 02680370 010e002b 037002b8     ..x.p.h.+.....p.
    c2f4:	018c02a8 03cc002b 034803a0 034c03e0     ....+.....H...L.
    c304:	03c80360 036003cc 02e50188 005a0002     `.....`.......Z.
    c314:	00d0005c 005a0033 00d0005c 001f020c     \...3.Z.\.......
    c324:	001303d0 02fc0390 00f60330 0056005a     ........0...Z.V.
    c334:	034c03e0 002e016b 00ae00fa 01f1035e     ..L.k.......^...
    c344:	003e0037 02ee00ce 003600f1 01ee006e     7.>.......6.n...
    c354:	020e01ee 005a00ee 01ee010e 001301e6     ......Z.........
    c364:	014e02ba 0342039c 03ae0017 004e038e     ..N...B.......N.
    c374:	02dc006e 03ce0150 0222004b 03f301ce     n...P...K.".....
    c384:	03ee014e 030f0394 03ca03d4 002d03c3     N.............-.
    c394:	03460018 02ee003f 0121002f 02c90018     ..F.?.../.!.....
    c3a4:	018c000e 003701f1 001802dd 001802e5     ......7.........
    c3b4:	003c00a6 00e600ae 02dc004e 03ce0210     ..<.....N.......
    c3c4:	02220073 03f301ce 006e014e 01bc00ee     s.".....N.n.....
    c3d4:	023c00b6 00ee03e6 03d4006e 005403ca     ..<.....n.....T.
    c3e4:	004a0393 034e00bc 00c80013 02c3000e     ..J...N.........
    c3f4:	000c00e1 002c03f5 00080311 01be001e     ......,.........
    c404:	025c02d0 02e600a2 02e10063 038c0008     ..\.....c.......
    c414:	00f50023 002b0020 00f50388 03840020     #... .+..... ...
    c424:	038c0006 00030279 02050388 03840024     ....y.......$...
    c434:	000002d9 02e102e0 030c0008 004c038d     ..............L.
    c444:	01d8010e 008c00ae 00030261 035d038c     ........a.....].
    c454:	00e10013 00a6000c 0270004e 01fe01b8     ........N.p.....
    c464:	01fe0023 03480013 026000a6 01060056     #.....H...`.V...
    c474:	0270004e 0162031c 00230249 013001a2     N.p...b.I.#...0.
    c484:	030600a1 00230269 001601c6 0110021c     ....i.#.........
    c494:	00ca008e 01bc01ea 00e60330 0330023a     ........0...:.0.
    c4a4:	005e0106 0010005a 01ee01ee 029001ee     ..^.Z...........
    c4b4:	0302039c 02f6002f 023e001f 038c0142     ..../.....>.B...
    c4c4:	000b001d 02fe0066 034c0023 00020251     ....f...#.L.Q...
    c4d4:	001b034c 03df02f6 025102fa 004e000c     L.........Q...N.
    c4e4:	00890130 017001bc 021c004e 02060310     0.....p.N.......
    c4f4:	017001bc 0013034c 034c02a0 00140205     ..p.L.....L.....
    c504:	00180121 01b80128 00aa031c 01a8010a     !...(...........
    c514:	03e00138 0211038c 015c0032 03d003d0     8.......2.\.....
    c524:	013b03e6 021c03e6 038c00d0 038a001f     ..;.............
    c534:	01b6039c 038c005b 00020241 0110011c     ....[...A.......
    c544:	009000d0 00e50090 0316000a 0027006d     ............m.'.
    c554:	01b601d6 038c003b 015c0073 00900090     ....;...s.\.....
    c564:	01b60043 038c01a3 015c003b 00500090     C.......;.\...P.
    c574:	002203d5 00e500c8 03f50050 0284002c     ..".....P...,...
    c584:	00cc0244 000b0205 030c006e 020c0047     D.......n...G...
    c594:	02080037 000c0001 00220009 02fe03b8     7.........".....
    c5a4:	009c0023 0042017d 00080245 0176010e     #...}.B.E.....v.
    c5b4:	03ee03b8 00be03ee 006603ee 03e800ae     ..........f.....
    c5c4:	00a603b8 03a800ae 00020261 00a301b6     ........a.......
    c5d4:	0043038c 0110015c 00d90150 031c000a     ..C.\...P.......
    c5e4:	00160162 000c0251 00400375 01a1024c     b...Q...u.@.L...
    c5f4:	022d0038 01b60002 038c002b 01be038b     8.-.....+.......
    c604:	01b60353 038c006b 015c003b 01100110     S...k...;.\.....
    c614:	031c032b 00160162 004400a1 01be00f3     +...b.....D.....
    c624:	03a7038c 019003bb 030203dc 009c015b     ............[...
    c634:	00ff01b6 009f01b6 0043038c 011c0190     ..........C.....
    c644:	00d00110 00e503d0 0339000a 03b0000c     ..........9.....
    c654:	02e6017c 00080245 00020241 001b038c     |...E...A.......
    c664:	03730150 000c0339 000002ae 004303b0     P.s.9.........C.
    c674:	001b038c 03230110 000c0339 01a80370     ......#.9...p...
    c684:	01c20363 00a301b6 003b038c 0110011c     c.........;.....
    c694:	00d00090 02c30190 013c01b8 00aa031c     ..........<.....
    c6a4:	01ea01ea 017c01ea 024501a8 01b60002     ......|...E.....
    c6b4:	01420017 0083038c 0110011c 01100090     ..B.............
    c6c4:	031c0150 031c0290 03370362 0110005c     P.......b.7.\...
    c6d4:	00f90210 00ae000a 01b80058 02dc011e     ........X.......
    c6e4:	037e0310 038d031b 0205004c 01610014     ..~.....L.....a.
    c6f4:	035c005e 00130348 01840344 02050260     ^.\.H...D...`...
    c704:	004e001c 00ae0270 03980128 01b800a6     ..N.p...(.......
    c714:	01a800a6 030c0044 00840013 038c00c4     ....D...........
    c724:	01fe0047 01fe0033 00c80023 00530208     G...3...#.....S.
    c734:	00a00208 00370014 0027038c 0017008c     ......7...'.....
    c744:	01380204 00cc00e0 031c017f 020c0098     ..8.............
    c754:	000c00ff 02f600bb 010600a7 0210031c     ................
    c764:	00a6031c 006f0302 02fc0208 03dc001c     ......o.........
    c774:	03f30276 02d00138 0098031c 00130222     v...8......."...
    c784:	02f60048 0106002f 00b603e6 021c001b     H.../...........
    c794:	00060290 002f0276 002702f6 0013028c     ....v./...'.....
    c7a4:	01680236 01fe0073 01fe001b 010c038f     6.h.s...........
    c7b4:	009c037b 001f02e2 035303d0 034302d0     {.........S...C.
    c7c4:	00a0033c 01870014 008c00e0 038c0177     <...........w...
    c7d4:	00cc0127 000c0157 020c001f 01b80137     '...W.......7...
    c7e4:	004b01fe 004e02dc 03100310 00900010     ..K...N.........
    c7f4:	01b3014e 003301fe 02dc004e 03100150     N.....3.N...P...
    c804:	01fe03b3 004e002b 011002dc 004e03cb     ....+.N.......N.
    c814:	015002dc 036b0310 002c03f5 004e00ee     ..P...k...,...N.
    c824:	00ee0270 007b02ee 033c0178 023d00cc     p.....{.x.<...=.
    c834:	00cc001c 001d024d 001b02d6 0090035c     ....M.......\...
    c844:	014e023c 018d00e0 023c001c 001c024d     <.N.......<.M...
    c854:	001b02d6 0210019c 018d007c 018d002c     ........|...,...
    c864:	003c001c 001c024d 001b02d6 0210001c     ..<.M...........
    c874:	0189013c 007c001c 001c024d 001b02d6     <.....|.M.......
    c884:	0210019c 018900fc 00bc001c 001c024d     ............M...
    c894:	001302d6 02fc0090 002c018d 020100ae     ..........,.....
    c8a4:	000e001c 001c01a1 024d017c 02d6001c     ........|.M.....
    c8b4:	015c001b 00bc0090 002c018d 001c01a1     ..\.......,.....
    c8c4:	024d02bc 02d6001c 025c001b 02bc0090     ..M.......\.....
    c8d4:	01a1014e 013c001c 001c024d 001b02d6     N.....<.M.......
    c8e4:	0210009c 018d003c 01a1002c 027c001c     ....<...,.....|.
    c8f4:	001c024d 001b02d6 0210035c 002c0189     M.......\.....,.
    c904:	001c01a1 024d00fc 02d6001c 029c001b     ......M.........
    c914:	00fc0210 00ae014e 001c01ed 013801a0     ....N.........8.
    c924:	017e011e 030400bf 029c01b8 001301e2     ..~.............
    c934:	017e0308 017e0057 026d007b 01bc004c     ..~.W.~.{.m.L...
    c944:	002c018d 0023027c 004c0249 014e017c     ..,.|.#.I.L.|.N.
    c954:	03fd006e 0138002a 02be02a0 000e0260     n...*.8.....`...
    c964:	039c02fc 02490102 028c004c 014c0023     ......I.L...#.L.
    c974:	004e0017 009701a2 00f701a2 013f01a2     ..N...........?.
    c984:	007f01a2 00df01a2 013701a2 006f01a2     ..........7...o.
    c994:	00d701a2 011f01a2 007c006b 004c0269     ........k.|.i.L.
    c9a4:	002c0189 004c0241 018d017c 026d002c     ..,.A.L.|...,.m.
    c9b4:	00bc004c 017c00ab 004c0269 018d01bc     L.....|.i.L.....
    c9c4:	0241002c 033c004c 005b014e 018d017c     ,.A.L.<.N.[.|...
    c9d4:	0241002c 037c004c 004c0269 014e01bc     ,.A.L.|.i.L...N.
    c9e4:	00b0019c 002302fe 019c0110 02780142     ......#.....B.x.
    c9f4:	02680370 01f9006e 004e001c 038c00dc     p.h.n.....N.....
    ca04:	00500013 01b8010e 01e2029c 01e201e2     ..P.............
    ca14:	00ae0033 0110001c 029c00ae 002b01e2     3.............+.
    ca24:	011c00ae 010e0050 001f000c 0087020c     ....P...........
    ca34:	013c01b8 02ea031c 00ae002b 021000dc     ..<.....+.......
    ca44:	02cc00ae 004e002b 0210011c 01f9014e     ....+.N.....N...
    ca54:	02c4001c 001c004e 001b02cc 003b0222     ....N.......".;.
    ca64:	00d400a0 00e00023 0050021c 004c00e0     ....#.....P...L.
    ca74:	019c001b 01e10110 0138001c 00a000ee     ..........8.....
    ca84:	032002e0 03d801b8 00e003e0 012800ae     .. ...........(.
    ca94:	00a60398 00a601b8 004401a8 02ae004e     ..........D.N...
    caa4:	0390001c 010e0390 03b00278 01840268     ........x...h...
    cab4:	028b0344 01ee027c 014e01ee 020c03e0     D...|.....N.....
    cac4:	03200017 01fe01b8 01fe015f 01fe010f     .. ....._.......
    cad4:	03650077 039c002c 02fc00b0 015800a2     w.e.,.........X.
    cae4:	00a601f8 010203e6 008b00ee 00080130     ............0...
    caf4:	002c0359 01210086 02dd0018 02e50018     Y.,...!.........
    cb04:	00660018 0202039c 01580066 013000b3     ..f.....f.X...0.
    cb14:	03590002 0086002c 00180121 0130038b     ..Y.,...!.....0.
    cb24:	0359000a 00ae002c 00fe033c 010601f8     ..Y.,...<.......
    cb34:	028500b0 0158004c 03560198 02bd0177     ....L.X...V.w...
    cb44:	01be0018 034200df 00ee0147 00ee033c     ......B.G...<...
    cb54:	02d403d4 00a603bb 01be01d8 02e20047     ............G...
    cb64:	00ee00e7 00ee033c 03c303d4 0302006e     ....<.......n...
    cb74:	007000a7 00ae0198 00ee0043 030200ae     ..p.....C.......
    cb84:	00ae0067 00700198 0018013d 0098039c     g.....p.=.......
    cb94:	022a031c 0058039c 00020251 0302039c     ..*...X.Q.......
    cba4:	028c03e3 024c0360 003801a1 0130039c     ....`.L...8...0.
    cbb4:	00580001 000c0251 0070004e 004601f8     ..X.Q...N.p...F.
    cbc4:	028801e8 03e00244 001f018c 03e00188     ....D...........
    cbd4:	03e00184 003c01f8 00160106 0270004e     ......<.....N.p.
    cbe4:	03e00038 00fe0130 013003db 03eb00ff     8...0.....0.....
    cbf4:	0018014d 0018014d 0018014d 017900cb     M...M...M.....y.
    cc04:	00b30018 002c03f5 0368004e 005a03b8     ......,.N.h...Z.
    cc14:	02e603a8 0130001f 016900fe 017b0014     ......0...i...{.
    cc24:	01a1024c 01f80038 0106027c 022d00f8     L...8...|.....-.
    cc34:	01a10002 01130038 002c03f5 006702e6     ....8.....,...g.
    cc44:	002c03e9 030c0244 020c00e7 03ed00df     ..,.D...........
    cc54:	02840008 03cc00fb 00810033 028c0000     ........3.......
    cc64:	014b0017 02e1006e 006e0008 002200c5     ..K.n.....n...".
    cc74:	000c0251 013901a0 02480018 00020245     Q.....9...H.E...
    cc84:	02840204 003c03c5 032702e6 03d702ee     ......<...'.....
    cc94:	02610204 03f50002 020c002c 030c0057     ..a.....,...W...
    cca4:	020800d7 02e60284 00230009 001202f1     ..........#.....
    ccb4:	00080245 036b0284 02690284 02e00044     E.....k...i.D...
    ccc4:	00240205 021c0046 02660210 020c03fb     ..$.F.....f.....
    ccd4:	004d038d 010c02a3 014800c7 028c00b3     ..M.......H.....
    cce4:	014803df 00b00006 00140129 0162001c     ..H.....).....b.
    ccf4:	03ea00a3 03e303dc 019d034c 03e6002e     ........L.......
    cd04:	021c03e6 03160290 028c0163 0144001f     ........c.....D.
    cd14:	010c035b 0343019f 001401a2 02d40117     [.....C.........
    cd24:	014c0027 017e0017 03d403d4 01aa008e     '.L...~.........
    cd34:	023c00ee 03ca00dc 00ae01bc 035c00ee     ..<...........\.
    cd44:	02a0011e 009f035a 00ae000e 0063006e     ....Z.......n.c.
    cd54:	0291034c 028c0036 010c001b 02fa01a7     L...6...........
    cd64:	00020251 024402be 03db00f0 03770342     Q.....D.....B.w.
    cd74:	03fa01a6 002603e3 005c009b 008e03ea     ......&...\.....
    cd84:	02a000b0 038a009c 038a038a 00060086     ................
    cd94:	02d6031c 018a002b 008a037b 00ae0006     ....+...{.......
    cda4:	00ae02fc 001c0126 002f035e 03ee01a6     ....&...^./.....
    cdb4:	03db038a 006e00a6 00400119 022d0354     ......n...@.T.-.
    cdc4:	02930002 00a2009c 00a202a2 028402cb     ................
    cdd4:	028c0248 013500d7 01440014 035c002e     H.....5...D...\.
    cde4:	01020222 01d8009c 02700046 00aa01b8     ".......F.p.....
    cdf4:	01a800a6 00aa00a6 006a01d8 035a0108     ..........j...Z.
    ce04:	0104030f 02f3006a 031302fa 02dc00ee     ....j...........
    ce14:	00ee01d0 02b3033e 02a7010c 031b002e     ....>...........
    ce24:	007a002e 00460158 005e003e 020601d8     ..z.X.F.>.^.....
    ce34:	0013025e 000e029e 02dc01d8 038e03dc     ^...............
    ce44:	012e0013 03f30262 03cb0354 00ae0198     ....b...T.......
    ce54:	01980158 001b02fe 03ce0166 035c00ae     X.......f.....\.
    ce64:	00bf034a 00ae00ee 010e035c 006b01e6     J.......\.....k.
    ce74:	005b023a 022600c6 00de0222 02fa006e     :.[...&."...n...
    ce84:	004e0360 03e0001e 03c300c6 0363006e     `.N.........n.c.
    ce94:	034f0342 03ea0266 028503e3 002e001e     B.O.f...........
    cea4:	0158007a 003e0046 00fb02fa 024601d8     z.X.F.>.......F.
    ceb4:	0013025e 01d8029e 00ae005e 032e006e     ^.......^...n...
    cec4:	01d8002b 026603ee 035c01d8 0013004e     +.....f...\.N...
    ced4:	018e0222 012e03f3 03d403ee 03d302d4     "...............
    cee4:	019800ae 003600e9 017d039c 034c0042     ......6...}.B.L.
    cef4:	02be004b 003b034c 000c0369 00400001     K...L.;.i.....@.
    cf04:	0048017b 001800f9 00140379 00180035     {.H.....y...5...
    cf14:	001800a1 0033010c 001f02cc 001300c4     ......3.........
    cf24:	014500c8 03090038 005e000e 0360034c     ..E.8.....^.L.`.
    cf34:	0018002d 003b0184 00180301 00180075     -.....;.....u...
    cf44:	00180035 001800a1 000e02fd 01450008     5.............E.
    cf54:	034c0056 0369008b 015d000c 01450034     V.L...i...].4.E.
    cf64:	01190038 038b0040 035c000e 015d0162     8...@.....\.b.].
    cf74:	03c30034 03d10008 03890014 03ad0054     4...........T...
    cf84:	0145005c 000c0038 03e0027b 0033034c     \.E.8...{...L.3.
    cf94:	000c0369 00340061 03d1031b 03390014     i...a.4.......9.
    cfa4:	03ad0054 0145005c 027b0038 001403d1     T...\.E.8.{.....
    cfb4:	00540339 0365018c 0139005d 01790018     9.T...e.].9...y.
    cfc4:	03290058 0121005c 01310018 01790018     X.).\.!...1...y.
    cfd4:	03510018 02c4005c 01b8034b 031c013c     ..Q.\...K...<...
    cfe4:	00a3026a 0093004a 01760176 01760176     j...J...v.v.v.v.
    cff4:	01bc01b8 01f600b6 034c003c 005b0319     ........<.L...[.
    d004:	01b8006b 031c013c 017c022a 017603bb     k...<...*.|...v.
    d014:	01b80176 00b600fc 01a8007c 00020245     v.......|...E...
    d024:	001801a9 001800f1 001402f9 00ae018b     ................
    d034:	00ae02a6 03e002ae 001801a9 001800f1     ................
    d044:	0038007d 01a9011b 012d0018 02060038     }.8.......-.8...
    d054:	024502ee 03d90008 0121002c 00f1001a     ..E.....,.!.....
    d064:	02cd0018 00b00014 007001d8 00e601f8     ..........p.....
    d074:	003c01e8 00160106 002c03d9 001402cd     ..<.......,.....
    d084:	00180121 00f10293 02d50018 006e0014     !.............n.
    d094:	008e01d8 004e0158 00380270 00780070     ....X.N.p.8.p.x.
    d0a4:	00b80028 01f80068 011c010e 03ca03ca     (...h...........
    d0b4:	015c03c6 00ae010a 006e01e8 03e00198     ..\.......n.....
    d0c4:	0158008e 00a80078 0270004e 00680038     ..X.x...N.p.8.h.
    d0d4:	002800b0 010e01f8 03e6011c 03ea03ea     ..(.............
    d0e4:	03530106 00e30050 001f01e2 00c300d0     ..S.P...........
    d0f4:	00b301d0 0018002d 002f0346 0130010e     ....-...F./...0.
    d104:	030e0041 001a021d 01ee00ae 039c01ee     A...............
    d114:	035f01e2 033f01e2 031c03d0 031c0262     .._...?.....b...
    d124:	010a02a2 00fc01b8 007c00aa 001a01a8     ..........|.....
    d134:	017a017a 014d017a 01310018 007a0018     z.z.z.M...1...z.
    d144:	03d301ba 00380145 001a0121 00180301     ....E.8.!.......
    d154:	001401d5 01a900fb 00e30014 00480148     ............H.H.
    d164:	001401d5 01480023 001401a9 001c015d     ....#.H.....]...
    d174:	009300cc 001b014c 005b010c 002f004c     ....L.....[.L./.
    d184:	00850284 002b0018 00140319 00140239     ......+.....9...
    d194:	02c902c4 014c000e 037b03e3 001b0008     ......L...{.....
    d1a4:	01480008 0018002d 034d0066 00ae0018     ..H.-...f.M.....
    d1b4:	0013014c 02c60166 030e001f 0229001b     L...f.........).
    d1c4:	01bc003a 02a9011a 010b0038 0346001a     :.......8.....F.
    d1d4:	02ee001f 01a9004b 017a0014 03e300cc     ....K.....z.....
    d1e4:	01d501ba 01390014 01a10018 00060038     ......9.....8...
    d1f4:	00ba004e 03e0003c 000c00c4 003902f1     N...<.........9.
    d204:	02dd000c 02290038 007a0018 03ab01ba     ....8.)...z.....
    d214:	00020225 002d0048 03460018 02ee006f     %...H.-...F.o...
    d224:	034d00b3 00ae0018 0017036e 004c0048     ..M.....n...H.L.
    d234:	024e0013 01b90006 00860018 00060158     ..N.........X...
    d244:	0289004e 004c0014 0038007d 017603e0     N.....L.}.8...v.
    d254:	01760176 004e0176 01f600b6 003c0284     v.v.v.N.......<.
    d264:	01b800ee 013c010e 0102009c 00ae007e     ......<.....~...
    d274:	006e01a8 0251037e 03b5000d 02050044     ..n.~.Q.....D...
    d284:	02d90024 01b80000 017c010e 00ae011e     $.........|.....
    d294:	01a901a8 01910032 004c0044 00430179     ....2...D.L.y.C.
    d2a4:	00400375 00860158 00180121 006601d8     u.@.X...!.....f.
    d2b4:	00180139 007c00ba 00b10106 00930044     9.....|.....D...
    d2c4:	004c0109 001f02be 004c0191 004302fe     ..L.......L...C.
    d2d4:	0109004b 001b004c 004c0191 024502ee     K...L.....L...E.
    d2e4:	00cd0008 011b0038 004c0109 01910383     ....8.....L.....
    d2f4:	02ee004c 02be03ab 01090357 001b004c     L.......W...L...
    d304:	004c0191 036702ee 00c8036b 00440191     ..L...g.k.....D.
    d314:	0027004c 00100130 01d10306 030d000a     L.'.0...........
    d324:	00750022 024c0044 003801a1 0002022d     ".u.D.L...8.-...
    d334:	00440075 00200229 00180301 00440229     u.D.). .....).D.
    d344:	000000ad 019103a3 004c0044 03e90047     ........D.L.G...
    d354:	01910022 004c0044 00260051 00420179     "...D.L.Q.&.y.B.
    d364:	00180301 00440229 00020241 00750048     ....).D.A...H.u.
    d374:	034c0044 004c008f 00190085 03b5004c     D.L...L.....L...
    d384:	02290014 00350044 03460018 02ee0027     ..).D.5...F.'...
    d394:	00080245 010e0353 004c004e 02be0017     E...S...N.L.....
    d3a4:	0050035c 00400001 02290006 02f60044     \.P...@...).D...
    d3b4:	03730387 02ee001a 0346001f 00c40043     ..s.......F.C...
    d3c4:	001401d5 03c300cc 03b3017a 003c00ba     ........z.....<.
    d3d4:	03b803e0 03f8010e 00be03ce 03ce03ce     ................
    d3e4:	00130276 03e80056 03a800ae 03e000ae     v...V...........
    d3f4:	007a002e 00460158 005e003e 031c01d8     ..z.X.F.>.^.....
    d404:	017603d4 03540236 00ee03e3 016b02ee     ..v.6.T.......k.
    d414:	006e01d8 014b02ee 00870326 006e01d8     ..n...K.&.....n.
    d424:	03df0326 01d800ae 0023030e 00ae01d8     &.........#.....
    d434:	01d8002b 01d800ae 019e006e 005b035e     +.......n...^.[.
    d444:	011e028e 003b0326 02fc01d8 006e01d8     ....&.;.......n.
    d454:	006e01a6 004b0326 03ce0166 011e00be     ..n.&.K.f.......
    d464:	02d403d4 004e03c3 019800ae 012e00ee     ......N.........
    d474:	02760276 00000276 003600bd 02fa02c4     v.v.v.....6.....
    d484:	004e0017 035c02a0 002b02f6 02f60286     ..N...\...+.....
    d494:	0286001f 01f603e0 004e001f 004a0033     ..........N.3.J.
    d4a4:	0056026a 03d402c8 03e003d4 004e001c     j.V...........N.
    d4b4:	02040004 02c40304 026e0260 03d4002e     ........`.n.....
    d4c4:	02d40236 011c03eb 02900390 03100290     6...............
    d4d4:	01bc0290 001c00ae 03440184 00240219     ..........D...$.
    d4e4:	0029034c 018c0003 030c002f 02d90360     L.)...../...`...
    d4f4:	004e0000 02600270 0228026e 01bc01f8     ..N.p.`.n.(.....
    d504:	01510130 003c02a6 006001e8 01b80000     0.Q...<...`.....
    d514:	011e037c 0260001a 010e00ae 00fa00fc     |.....`.........
    d524:	010600a6 01bc005a 005a011a 017e021a     ....Z.....Z...~.
    d534:	02dc03f3 01fa0090 0013011a 01fa01fa     ................
    d544:	015a01fa 03db027e 00ba005e 01fa01fa     ..Z.~...^.......
    d554:	02bc01fa 00460106 01fa023c 01fa011a     ......F.<.......
    d564:	01fa021a 02fc021a 03e9011e 0056002c     ............,.V.
    d574:	001f02e6 00fd0130 00da00a6 007c011a     ....0.........|.
    d584:	021e02be 023e002f 023e001f 01a60013     ..../.>...>.....
    d594:	00a600fc 01a2031c 030601a2 00420179     ............y.B.
    d5a4:	00e00130 03a00306 023d03d3 00860040     0.........=.@...
    d5b4:	027000c6 00ee0038 02700226 00230038     ..p.8...&.p.8.#.
    d5c4:	03ae033c 01be00fe 010603e3 00ba0016     <...............
    d5d4:	031c011a 027e007c 0002005f 027e039c     ....|.~._.....~.
    d5e4:	0002003f 03d4001b 027e0022 018103eb     ?.......".~.....
    d5f4:	034c0044 02a003a0 00af0346 010e008e     D.L.....F.......
    d604:	01ae016e 007f036e 001b035e 005b017e     n...n...^...~.[.
    d614:	001b0356 003b0176 035c006e 036002e2     V...v.;.n.\...`.
    d624:	03a002ee 017d015c 01300042 027000fe     ....\.}.B.0...p.
    d634:	010e0378 004603b8 003c0270 02d300ae     x.....F.p.<.....
    d644:	015800b0 00ee01f8 0040023d 0198006e     ..X.....=.@.n...
    d654:	00a000ae 00e0039c 004b039c 03dc00ee     ..........K.....
    d664:	03dc00a0 00be00e0 02fc03ee 027e00ee     ..............~.
    d674:	00ee03b3 00ce0158 00fe007c 00ee0198     ....X...|.......
    d684:	02d40023 03dc0027 03e3023e 01580270     #...'...>...p.X.
    d694:	00b20038 00a002f0 02fe0198 02dc0053     8...........S...
    d6a4:	023e03dc 022603f3 00380270 02f000ea     ..>...&.p.8.....
    d6b4:	0270004e 03e000ce 00750044 02600044     N.p.....D.u.D.`.
    d6c4:	005f034c 00180035 00130346 00a60048     L._.5...F...H...
    d6d4:	001302ee 03e00048 0006005e 001302f6     ....H...^.......
    d6e4:	02e6004e 0266005b 03af02e6 013002fc     N...[.f.......0.
    d6f4:	0013000a 027e0146 005e03f3 037c0046     ....F.~...^.F.|.
    d704:	03e00146 01300158 027000fe 003c03b8     F...X.0...p...<.
    d714:	010600a6 03a801bc 03680198 0270004e     ..........h.N.p.
    d724:	03e00198 004e0004 01b80270 03b501fe     ......N.p.......
    d734:	01fe0046 028c03eb 02a00360 010e00b0     F.......`.......
    d744:	0098031c 03c60056 001e00ae 035c0158     ....V.......X.\.
    d754:	03d4005e 03f301a6 00670314 00c702f6     ^.........g.....
    d764:	001b0266 00c30006 00170214 023e03d4     f.............>.
    d774:	019803c3 031c005e 001302f6 009c028a     ....^...........
    d784:	03ea010e 03ea03ea 021c0108 00060093     ................
    d794:	0226038e 002e03f3 006e008a 035a012e     ..&.......n...Z.
    d7a4:	035e005f 02fa004f 035e032f 011e005f     _.^.O.../.^._...
    d7b4:	01aa0260 000a03e0 03c7034e 006e03d4     `.......N.....n.
    d7c4:	023e035b 038e03d4 02c4039b 01b80260     [.>.........`...
    d7d4:	005a02bc 0106033c 005a01f8 00ee005e     ..Z.<.....Z.^...
    d7e4:	01fe01b8 028c0193 02c80013 018c00c4     ................
    d7f4:	00c80013 00840344 02050184 002d0014     ....D.........-.
    d804:	02840018 001302cc 02c40288 0013018c     ................
    d814:	01840008 001300cc 00e60188 001c0205     ................
    d824:	03a900e6 00ee0018 001c0205 013c01b8     ..............<.
    d834:	00ae0056 03ae0023 00fe033c 03e301a6     V...#...<.......
    d844:	02ce00ee 009300cf 034501fe 01fe004b     ..........E.K...
    d854:	004b026d 01a600b0 03ce003f 033c00ee     m.K.....?.....<.
    d864:	00fe00ee 02c603cb 00e0003f 00a0039c     ........?.......
    d874:	02f2011c 02c80013 010e027c 015c01b8     ........|.....\.
    d884:	01a301e2 03f701fe 00c701fe 00d701fe     ................
    d894:	031c01bc 00560042 02a2039c 01060226     ....B.V.....&...
    d8a4:	031c01bc 01ca0166 018b0013 000a0130     ....f.......0...
    d8b4:	00170306 00a602c8 035500fb 01060018     ..........U.....
    d8c4:	03550093 006e0018 01ee0266 01ee010e     ..U...n.f.......
    d8d4:	018d014e 018d002c 038e002c 0066038e     N...,...,.....f.
    d8e4:	0166006e 013c01b8 028c02eb 013000d7     n.f...<.......0.
    d8f4:	02cc000a 009b0013 0067034e 013c01b8     ........N.g...<.
    d904:	02ea031c 01300027 004b0002 00010130     ....'.0...K.0...
    d914:	02dc0033 026603d4 03eb0342 0058039c     3.....f.B.....X.
    d924:	01be001e 00b003e0 00c701a6 01ee011e     ................
    d934:	00e003ce 00a002dc 0392035c 01f200ae     ........\.......
    d944:	00ee015e 033c0158 015e01fe 01ee0198     ^...X.<...^.....
    d954:	00ae033c 003a0066 02c60343 00e0003f     <...f.:.C...?...
    d964:	00a0039c 02f2015c 02c80013 039c002e     ....\...........
    d974:	010e01ee 004203dc 01ee03d4 01ee01ee     ......B.........
    d984:	00e2033c 00ae00c2 019403dc 00ce0393     <...............
    d994:	00b001bb 010701a6 01ee011e 01ee01ee     ................
    d9a4:	00e003ce 00a002dc 0392035c 01f200ae     ........\.......
    d9b4:	01f201f2 00ee015e 033c0158 01fe01fe     ....^...X.<.....
    d9c4:	015e01fe 01ee0198 01ee01ee 00ae033c     ..^.........<...
    d9d4:	003a0066 02c60303 00e0003f 00a0039c     f.:.....?.......
    d9e4:	02f2021c 02c80013 025c000e 01e601e6     ..........\.....
    d9f4:	001301e6 03d40162 03db02d4 002600ae     ....b.........&.
    da04:	004a0111 006e00ee 000e01d8 039c004e     ..J...n.....N...
    da14:	00040290 00540389 01210093 00ee0018     ......T...!.....
    da24:	01fe01b8 01fe0387 01fe0117 00ee002f     ............/...
    da34:	001401e5 00ee0023 001401dd 00180139     ....#.......9...
    da44:	004f0346 003f02ee 015c01b8 001b01e2     F.O...?...\.....
    da54:	00320101 0098039c 026a031c 0130010a     ..2.......j...0.
    da64:	030a0002 00aa03b7 002e0349 01d500ee     ........I.......
    da74:	032b0014 00e7034c 001800f9 006b010c     ..+.L.........k.
    da84:	00140281 0073008c 004e0188 018c023a     ......s...N.:...
    da94:	02a0006b 03e002be 03790048 00350014     k.......H.y...5.
    daa4:	03460018 02ee039f 02a0038f 036903e0     ..F...........i.
    dab4:	02be000c 00430001 0047034c 00180301     ......C.L.G.....
    dac4:	01d8002e 01d8004e 000e02d3 0351039b     ....N.........Q.
    dad4:	000e0018 001803a9 017c02ba 02d0029c     ..........|.....
    dae4:	02d000dc 01b8010e 019c033c 015c0102     ........<.....\.
    daf4:	01ea0042 03ca009c 005c01ea 01ea03ca     B.........\.....
    db04:	03ca001c 015c01ea 00ae010a 00060309     ......\.........
    db14:	0053006e 0130004e 030c0008 013003a0     n.S.N.0.......0.
    db24:	03e0000c 004e014e 00080130 0360030c     ....N.N.0.....`.
    db34:	008603bb 00ee0158 00ee01d8 01e600ae     ....X...........
    db44:	01ee00ae 01660013 01e600ae 01ee00ae     ......f.........
    db54:	01660013 014601d8 00ae01d8 0013012e     ..f...F.........
    db64:	01e60226 01ee00ae 01660013 00ee00ae     &.........f.....
    db74:	005a0198 02fc0046 012e00ee 02260013     ..Z.F.........&.
    db84:	03e000ae 029002dc 0044002e 011e0006     ..........D.....
    db94:	01be0260 004c0043 0048006f 025002dc     `...C.L.o.H...P.
    dba4:	00ba011e 00ee02fc 004c0285 01d800ee     ..........L.....
    dbb4:	00ee038b 00ee03e0 0270004e 00d002dc     ........N.p.....
    dbc4:	00900110 00100310 005002d0 02680050     ..........P.P.h.
    dbd4:	025c004e 00100210 021003d0 001002d0     N.\.............
    dbe4:	02a80090 003000ee 00b203e0 00ab0123     ......0.....#...
    dbf4:	0101028c 02600032 01fe01b8 01fe0013     ....2.`.........
    dc04:	004e0055 00d7010c 025002dc 0162001c     U.N.......P...b.
    dc14:	03540033 03dc0027 03d3027e 003b014c     3.T.'...~...L.;.
    dc24:	0037037e 03d401a2 002b0144 000201be     ~.7.....D.+.....
    dc34:	03070354 027900b0 00060032 034a009c     T.....y.2.....J.
    dc44:	01040047 002c03d9 010a01b8 00020251     G.....,.....Q...
    dc54:	034a005c 009c0027 00130002 031d038a     \.J.'...........
    dc64:	02600032 001603e6 00660386 002c03e9     2.`.......f...,.
    dc74:	01d102e6 0158000a 02e603f8 0130001f     ......X.......0.
    dc84:	010601fc 02dc0198 031c01d0 001f036a     ............j...
    dc94:	003c0088 00fe023e 010600a6 02700056     ..<.>.......V.p.
    dca4:	001e0038 01b6017e 001b0356 03db023c     8...~...V...<...
    dcb4:	036a006a 023c008b 033e017e 006603df     j.j...<.~.>...f.
    dcc4:	0033008c 02b7004c 00840048 001602cb     ..3.L...H.......
    dcd4:	01a60176 00be02c3 00f601bc 00840066     v...........f...
    dce4:	03e00044 031c01a0 019c0110 03200050     D...........P. .
    dcf4:	02780013 026801ee 008602a8 000002d9     ..x...h.........
    dd04:	005c004e 026e0090 03cc0107 013003eb     N.\...n.......0.
    dd14:	02060340 01bc005a 01060330 003c0220     @...Z...0... .<.
    dd24:	03660056 006e0097 01300166 03060028     V.f...n.f.0.(...
    dd34:	004e030f 011c026e 01900050 001c010e     ..N.n...P.......
    dd44:	00240211 0002009d 004e0066 022602a0     ..$.....f.N...&.
    dd54:	01a60260 003c03e3 004e004b 02260226     `.....<.K.N.&.&.
    dd64:	0023023c 03e3004e 025c004e 017d00f0     <.#.N...N.\...}.
    dd74:	038d0042 00b0004c 00440128 00540019     B...L...(.D...T.
    dd84:	02a9006e 00ae000c 019800f0 035f036e     n...........n._.
    dd94:	021c01a0 01060310 00e60226 00180130     ........&...0...
    dda4:	00ba027c 023a0023 0033037a 01460330     |...#.:.z.3.0.F.
    ddb4:	012603db 018603cb 02870346 00190048     ..&.....F...H...
    ddc4:	006e0054 01ce00b0 023a004e 01f30130     T.n.....N.:.0...
    ddd4:	036e02a6 02a90247 010e000c 036e0198     ..n.G.........n.
    dde4:	004e0217 01380270 004e0070 0268026e     ..N.p.8.p.N.n.h.
    ddf4:	03cc02a8 008403a0 00020081 02a901a0     ................
    de04:	00f0000c 01d800f0 00d801d8 03d800d8     ................
    de14:	00ee03d8 02a9006e 01ce000c 02f1034e     ....n.......N...
    de24:	01580053 0130004e 02700007 003800ee     S.X.N.0...p...8.
    de34:	00ae014e 00a7004c 00ae012e 02f001d8     N...L...........
    de44:	0038004e 02f001d8 00e00130 00ee00ae     N.8.....0.......
    de54:	03a00366 0266006e 0056034b 018e033b     f...n.f.K.V.;...
    de64:	03630000 00200009 01bc01f8 004702e6     ..c... .......G.
    de74:	010c0130 01e8003c 01e601bc 03c801e6     0...<...........
    de84:	002303cc 03e30266 02e503e0 02050000     ..#.f...........
    de94:	002d0042 01390018 018c0018 00480013     B.-...9.......H.
    dea4:	01090184 00210018 00e50018 03ee0018     ......!.........
    deb4:	031c03ee 00aa037c 00ae002e 015800ee     ....|.........X.
    dec4:	037c01b8 02be035c 03fb01e2 018502a2     ..|.\...........
    ded4:	00ee0059 00580229 01f80158 005600bc     Y...).X.X.....V.
    dee4:	006e0146 014e0078 00ee0198 018c00ae     F.n.x.N.........
    def4:	005d0365 0027000c 03b1004c 03a5002d     e.]...'.L...-...
    df04:	03ad0054 02cc005c 005b0039 00380145     T...\...9.[.E.8.
    df14:	00360325 004400a0 001e035c 003e001a     %.6...D.\.....>.
    df24:	00e0003a 00aa029c 00e600bc 00ee01d8     :...............
    df34:	00ae0070 001c01bc 012e004b 02260013     p.......K.....&.
    df44:	01d800ae 01d80146 026200ae 00ee03bb     ....F.....b.....
    df54:	03b200f0 00fe033c 033c00ae 00ae011e     ....<.....<.....
    df64:	00ee00f0 011e033c 03c602fc 019403dc     ....<...........
    df74:	00a0036b 004f004c 00ae0048 00ba01d8     k...L.O.H.......
    df84:	00e000a2 0303001c 03e000ae 00540249     ............I.T.
    df94:	02e600ae 034e001f 02c80013 00f000ee     ......N.........
    dfa4:	037c00f2 006a019c 037c00ee 037c00ae     ..|...j...|...|.
    dfb4:	03e000ee 00180139 01d8006e 001e002e     ....9...n.......
    dfc4:	00e0001a 00a0039c 0032005c 035c023c     ........\.2.<.\.
    dfd4:	00ae00f2 00b2023c 00ee00ae 0112023c     ....<.......<...
    dfe4:	001c037c 03ca03ca 00ee00f0 015800f0     |.............X.
    dff4:	005e01f8 01d8005a 01d800ae 006f0306     ..^.Z.........o.
    e004:	002f0366 00ae01d8 004f032e 000000ad     f./.......O.....
    e014:	00180139 003601f1 00ae01d8 035c00a0     9.....6.......\.
    e024:	019c00e0 00130044 00ae0222 01c601d8     ....D...".......
    e034:	01d8005f 018e00ae 026603c3 022603b3     _.........f...&.
    e044:	00ae012e 014601d8 021403d4 004c0043     ......F.....C.L.
    e054:	004800df 00a000dc 00a200ba 00ee01d8     ..H.............
    e064:	00a000f0 039c03e6 00ee02fc 010202fc     ................
    e074:	00ee00c2 00be033c 035c02fc 00e003f2     ....<.....\.....
    e084:	00ee00f0 00a002a3 000c01d8 02ee0360     ............`...
    e094:	0346001f 00c80013 008601d8 003c00ae     ..F...........<.
    e0a4:	027c00ae 029c0056 03e000aa 01b80158     ..|.V.......X...
    e0b4:	00e0037c 00a0005c 00f2035c 039c0198     |...\...\.......
    e0c4:	00ee006e 01f5001b 017e0058 035c03eb     n.......X.~...\.
    e0d4:	039c03f2 001b00ae 00580229 03eb01fe     ........).X.....
    e0e4:	01f500ae 00ae0058 03ae00c3 00fe033c     ....X.......<...
    e0f4:	00a202fc 0392033c 03a0018c 01a200e0     ....<...........
    e104:	03e000a0 00ae01f2 001301ee 00ae0172     ............r...
    e114:	01ee00ee 016e0013 03e000ee 00040130     ......n.....0...
    e124:	004e00e6 003b022e 01ee02a0 01ee01ee     ..N...;.........
    e134:	026001ee 03cb0186 02a00126 01ee0013     ..`.....&.......
    e144:	03f301a6 02a00006 003400c9 00120130     ..........4.0...
    e154:	03e00146 004e0168 00120130 035c0158     F...h.N.0...X.\.
    e164:	01d00210 01900250 02500010 001000d0     ....P.....P.....
    e174:	00900090 00100090 03e00210 038d01a8     ................
    e184:	0205004c 00b00014 015502fa 02f6005e     L.........U.^...
    e194:	01480013 001302fe 002e0188 010e00fa     ..H.............
    e1a4:	0130004e 01bc002b 00130130 01780168     N.0.+...0...h.x.
    e1b4:	005f0306 02c9023e 014c0058 00350071     .._.>...X.L.q.5.
    e1c4:	016d014c 03a30034 001a0260 015a0013     L.m.4...`.....Z.
    e1d4:	03f3027e 014c00ba 029a0013 005a011a     ~.....L.......Z.
    e1e4:	023a023a 02a0023a 00ee0266 004e0158     :.:.:...f...X.N.
    e1f4:	0222035c 0260005b 02a0019a 01ee01ee     \.".[.`.........
    e204:	02fe01ee 0166001b 032603ce 00ee03af     ......f...&.....
    e214:	000e00ae 01d80168 00340071 01bc0198     ....h...q.4.....
    e224:	005a00ba 032900fc 03ce004c 01780158     ..Z...).L...X.x.
    e234:	00ba000e 00100130 015a01bc 019800dc     ....0.....Z.....
    e244:	01ba0013 01ea0158 019803eb 002e00ae     ....X...........
    e254:	012a0086 023a0033 004e00ae 00ae0210     ..*.3.:...N.....
    e264:	004600ae 0006003c 00e5010c 01310018     ..F.<.........1.
    e274:	00fa0018 003801a1 0144011a 001b015a     ......8...D.Z...
    e284:	029a0148 005e0046 003c0006 0027010c     H...F.^...<...'.
    e294:	0075014c 022d0019 01a10002 03e30038     L.u...-.....8...
    e2a4:	0018002d 0013018c 00080148 001403d1     -.......H.......
    e2b4:	03460004 00480013 004e00ae 00a80068     ..F...H...N.h...
    e2c4:	01e800e8 01900130 0017030e 01b80048     ....0.......H...
    e2d4:	031002dc 0090019c 01a803d0 016800ae     ..............h.
    e2e4:	01d80066 00270346 031902ee 004c005e     f...F.'.....^.L.
    e2f4:	03a90177 001e0018 004b009c 02fc03ce     w.........K.....
    e304:	00a2039c 017e033c 038a009c 03bf034a     ....<.~.....J...
    e314:	02fc00ae 02ad00ae 00ce0058 00200229     ........X...). .
    e324:	01060178 0260005e 002b0130 023e0013     x...^.`.0.+...>.
    e334:	03f301c6 01460168 00590259 027e0178     ....h.F.Y.Y.x.~.
    e344:	02c90077 00710058 03cb0034 02a0004e     w...X.q.4...N...
    e354:	0236023a 007b014c 006f02b6 015800ae     :.6.L.{...o...X.
    e364:	000000ad 00ee001e 016d014c 014c0035     ........L.m.5.L.
    e374:	00340071 001b018c 000002be 003402dd     q.4...........4.
    e384:	0002022d 01b80168 031c023c 010a00aa     -...h...<.......
    e394:	01a8037c 03e00178 023c01b8 00160106     |...x.....<.....
    e3a4:	02ae03d3 02ae00ae 00ee00ae 02aa001c     ................
    e3b4:	028c00ee 022e0360 016e03a0 00ee03a0     ....`.....n.....
    e3c4:	00ee022a 00a103e0 010c0018 02cc0360     *...........`...
    e3d4:	006603a0 018c01d8 02cd0027 00330014     ..f.....'.....3.
    e3e4:	0017028c 02f9026e 00660014 03e001d8     ....n.....f.....
    e3f4:	00000000                                ....

0000e3f8 <lcdSegBase>:
    e3f8:	09060401 13100e0b 00001815              ............

0000e404 <LUT_lcdSeg>:
    e404:	7e228200 023c722d 46630e31 3680400c     .."~-r<.1.cF.@.6
    e414:	4f5b063f 077d6d66 0d096f7f 83424860     ?.[Ofm}..o..`HB.
    e424:	587c777b 3d71795e 750e0476 5c543538     {w|X^yq=v..u85T\
    e434:	4d506773 3a1c3e78 39596e64 08230f1b     sgPMx>.:dnY9..#.

0000e444 <bcd2ascii>:
    e444:	13121110 17161514 22211918 26252423     ..........!"#$%&

0000e454 <vROM>:
    e454:	004e01cf 02380270 00ff02ee 000c0231     ..N.p.8.....1...
    e464:	000c01a1 0304006e 019d0184 00000002     ....n...........
    e474:	01660308 00ee014a 014d014c 014b0146     ..f.J...L.M.F.K.
    e484:	004e0024 003c0220 01300106 03e00018     $.N. .<...0.....
    e494:	00000065 03600366 01fd02e0 001c0042     e...f.`.....B...
    e4a4:	032002e0 01b803db 00160106 03e00138     .. .........8...
    e4b4:	01950313 00ed00f3 014e00fd 00c90000     ..........N.....
    e4c4:	02310320 0065000c 03660000 03840177      .1...e...f.w...
    e4d4:	000c01a1 000002d9 02040304 00840244     ............D...
    e4e4:	00000065 00750130 0366029c 0130015b     e...0.u...f.[.0.
    e4f4:	03660017 01300073 03660012 005201e9     ..f.s.0...f...R.
    e504:	00140130 01530366 03660226 00880187     0...f.S.&.f.....
    e514:	000002d9 00500305 03ef008c 0014020b     ......P.........
    e524:	00810073 01330000 00000060 00000000     s.....3.`.......
    e534:	01730158 00ec00f4 00d700fe 00cc01a3     X.s.............
    e544:	02100327 0102029c 020201b8 009301a8     '...............
    e554:	01770156 00ea00e9 01c9016f 0155000e     V.w.....o.....U.
    e564:	026d01ae 0131000c 001b0018 02040304     ..m...1.........
    e574:	02840244 01440104 0235006e 006e0008     D.....D.n.5...n.
    e584:	00cf020c 038c0304 00230001 03440184     ..........#...D.
    e594:	001c021d 0269038c 00840044 0006035c     ......i.D...\...
    e5a4:	004201d9 0220004e 005a0330 017001bc     ..B.N. .0.Z...p.
    e5b4:	03e002e0 000c00e1 00320091 03cc03c8     ..........2.....
    e5c4:	013003f7 03c80004 026603cc 03e003eb     ..0.......f.....
    e5d4:	014f0157 00eb00f7 00d300ff 00cd0000     W.O.............
    e5e4:	00d40182 01660173 00d40166 00d10173     ....s.f.f...s...
    e5f4:	009c000c 02cc016b 0007037d 02cc0153     ....k...}...S...
    e604:	004f01bd 01bf0214 01af0314 009f0154     ..O.........T...
    e614:	00130254 0141000c 00060006 0004005c     T.....A.....\...
    e624:	01660133 01660166 01660166 01070154     3.f.f.f.f.f.T...
    e634:	00f70054 01660166 00d70294 01660166     T...f.f.....f.f.
    e644:	00b70094 01660166 01660166 01660166     ....f.f.f.f.f.f.
    e654:	013f02cc 014f0354 008b0054 002b0356     ..?.T.O.T...V.+.
    e664:	01100130 014b01c6 03e60166 031c0183     0.....K.f.......
    e674:	0042017d 0162031c 0143039c 01270356     }.B...b...C.V.'.
    e684:	00060130 002f0154 006b0294 00a30146     0...T./...k.F...
    e694:	0302039c 0146001b 031c007b 00630162     ......F.{...b.c.
    e6a4:	001b019c 0047004c 001603e6 03dc01b6     ....L.G.........
    e6b4:	03eb02d4 00a60386 00040044 012d0054     ........D...T.-.
    e6c4:	00b9000b 03e60022 00160048 002c0135     ...."...H...5.,.
    e6d4:	004201e1 0027038c 00010388 03840022     ..B...'....."...
    e6e4:	00020245 01660166 01660166 01660166     E...f.f.f.f.f.f.
    e6f4:	01660166 01660166 01660166 01660166     f.f.f.f.f.f.f.f.
    e704:	02cc0166 00d4002f 025c002f 011c0023     f.../.../.\.#...
    e714:	029c0013 000c00bd 000600b1 02df00d4     ................
    e724:	01370314 01270214 033f02cc 02cc031b     ..7...'...?.....
    e734:	029c031b 02cc01c3 00130279 02cc02f3     ........y.......
    e744:	00d401ff 038c003f 00170021 00010354     ....?...!...T...
    e754:	02e30053 02cc0166 00d40277 01660267     S...f...w...g.f.
    e764:	0153031c 0162031c 01660162 01300166     ..S...b.b.f.f.0.
    e774:	01460050 03ed02c4 03140002 021403c7     P.F.............
    e784:	025403b7 02cc0387 0007014d 01bc01f8     ..T.....M.......
    e794:	003c0046 00d401e8 00130305 001202bd     F.<.............
    e7a4:	0166015c 000c00d1 000203fd 03cf02cc     \.f.............
    e7b4:	029700d4 00d1021c 03e1000c 00f10002     ................
    e7c4:	038c000c 01b8002f 001301fe 027901fe     ..../.........y.
    e7d4:	00b00002 027e005e 0088010e 02050004     ....^.~.........
    e7e4:	02d90024 01a90000 021c0032 011601d0     $.......2.......
    e7f4:	004e0196 017c00b6 00aa009c 0350035c     ..N...|.....\.P.
    e804:	025c02d0 03d003d0 02d00290 03e90323     ..\.........#...
    e814:	005a002c 002f02e6 01d0021c 035003d0     ,.Z.../.......P.
    e824:	005600f6 0222031c 039c0222 010601e6     ..V...".".......
    e834:	014601ee 014601e6 0270004e 027c01b8     ..F...F.N.p...|.
    e844:	03c603c6 022202a2 0130001b 005a0010     ......"...0...Z.
    e854:	0260001a 025701c6 017a02a0 03e603db     ..`...W...z.....
    e864:	0150021c 027a005a 0316009c 0110010f     ..P.Z.z.........
    e874:	031601d6 01d600d7 00cf0316 03da03da     ................
    e884:	016603e6 001f0316 01d60166 0176001c     ..f.....f.....v.
    e894:	03160276 00900013 02fc00a6 021c03c6     v...............
    e8a4:	00d003d0 00bb01bc 00130090 00a600d0     ................
    e8b4:	001f02f6 03da0276 006b037c 03d0011c     ....v...|.k.....
    e8c4:	03e603d0 03d0005c 00aa03ea 0222011c     ....\.........".
    e8d4:	03d0002b 00aa011c 026203e0 02dc00a6     +.........b.....
    e8e4:	00be0350 034603c3 02840183 004e02a0     P.....F.......N.
    e8f4:	02040130 010b0306 00070130 023a0260     0.......0...`.:.
    e904:	01c602a0 014603e3 023a0260 039c023a     ......F.`.:.:...
    e914:	001f0342 027a0146 01ba001a 0046025a     B...F.z.....Z.F.
    e924:	03ee003c 00b603ee 03e900a6 02e6002c     <...........,...
    e934:	031c0023 0023024a 017d005c 02ea0042     #...J.#.\.}.B...
    e944:	02360027 03cb0256 0315008c 03f50023     '.6.V.......#...
    e954:	030c002c 020c003f 03b8002f 03a8005e     ,...?.../...^...
    e964:	00a6004e 00c503e8 020c0032 030c001f     N.......2.......
    e974:	03e900ab 0106002c 036603f8 0046001f     ....,.....f...F.
    e984:	02600063 02e6021c 01160053 031601d0     c.`.....S.......
    e994:	00b6004b 02dc0236 03e002f0 01fc0130     K...6.......0...
    e9a4:	026603db 0050021c 03e903bb 010e002c     ..f...P.....,...
    e9b4:	03f00130 036601e6 00ae0203 000a0265     0.....f.....e...
    e9c4:	002c03f5 00560106 00380270 01b601b6     ..,...V.p.8.....
    e9d4:	03ce0360 03e303ce 01d800ae 005e00ae     `.............^.
    e9e4:	000e005a 00eb02e6 0250019c 01d00162     Z.........P.b...
    e9f4:	02a000ba 0276015a 00dc03f3 026001d0     ....Z.v.......`.
    ea04:	039c0226 01da02a0 02620260 031c03e3     &.......`.b.....
    ea14:	003f0222 035c02a0 00500050 015a0090     ".?...\.P.P...Z.
    ea24:	025c0260 03e001aa 02f60276 021c005f     `.\.....v..._...
    ea34:	022a01d0 013000a6 00a600fd 0017036a     ..*...0.....j...
    ea44:	02f00046 002603e0 03f50023 00e6002c     F.....&.#...,...
    ea54:	002c03e9 03a8005e 00e6004e 03e003e8     ..,.^...N.......
    ea64:	014102cc 00d40007 00d1002f 0166000c     ..A...../.....f.
    ea74:	03f1025c 02cc0002 00d40057 00d1002f     \.......W.../...
    ea84:	0008000c 00d103b3 039c000c 00060001     ................
    ea94:	002702cc 00d402c8 019c0043 00dc001b     ..'.....C.......
    eaa4:	004402c4 00c40004 000600f9 0044035c     ..D.........\.D.
    eab4:	001603e6 004b0386 000c00c1 03e00176     ......K.....v...
    eac4:	00440344 008400c4 00040184 03e002c4     D.D.............
    ead4:	00330013 00c30073 00820083 007200c2     ..3.s.........r.
    eae4:	00120032 00300010 00c00070 00870080     2.....0.p.......
    eaf4:	007700c7 00170037 00310011 00c10071     ..w.7.....1.q...
    eb04:	00840081 007400c4 00140034 00380018     ......t.4.....8.
    eb14:	00c80078 00840088 007500c5 00150035     x.........u.5...
    eb24:	01510130 00a602a6 0270004e 01bc01f8     0.Q.....N.p.....
    eb34:	03a00366 00040130 0058039c 000b0130     f...0.....X.0...
    eb44:	00140169 0270004e 0090035c 03d00310     i...N.p.\.......
    eb54:	03c401a8 01a002c4 026e0070 0350011c     ........p.n...P.
    eb64:	03d00290 004201b1 00a00260 000002e5     ......B.`.......
    eb74:	036003cc 00000060 013c01b8 004a031c     ..`.`.....<...J.
    eb84:	01a8017c 008e03e0 01380158 01b800e8     |.......X.8.....
    eb94:	01f80106 031c027c 00bc00aa 006e01e8     ....|.........n.
    eba4:	03e00198 015002dc 03f302d4 03a0004c     ......P.....L...
    ebb4:	03e001ee 01b800ee 03d8017c 00cc0044     ........|...D...
    ebc4:	00480013 013c03d8 00ee01a8 031503e0     ..H...<.........
    ebd4:	03cb000c 000c0315 00ee0393 017c01b8     ..............|.
    ebe4:	008403d8 03a002cc 03e00088 015c004e     ............N.\.
    ebf4:	039c0222 01ee0013 03f301a2 01b8010e     "...............
    ec04:	03e000ae 004e00ae 00380270 03e000ae     ......N.p.8.....
    ec14:	008801bc 01e801e4 017800d8 00a8017c     ..........x.|...
    ec24:	01f801fc 00400044 00f4014c 00000174     ....D.@.L...t...
    ec34:	008801bc 01e801e4 017800d8 00a8017c     ..........x.|...
    ec44:	01f801fc 015c00fc 01cc0134 00740174     ......\.4...t.t.
    ec54:	02c303bf 02c403be 00c50155 00cc01bc     ........U.......
    ec64:	00d30000 00d60018 03e50209 03e401f5     ................
    ec74:	02e80374 02d40064 02e90385 02e00388     t...d...........
    ec84:	02d0036c 01c001de 01b001af 00000000     l...............
    ec94:	03730333 0374032f 03750332 03760331     3.s./.t.2.u.1.v.
    eca4:	00f403ab 00f90399 02f6038d 01940282     ................
    ecb4:	00710353 0284000a 029f00f1 0190021a     S.q.............
    ecc4:	0180021f 0170024b 01600237 00d50042     ....K.p.7.`.B...
    ecd4:	00230200 002401fc 002501ff 002601fe     ..#...$...%...&.
    ece4:	00330004 00360021 02f5038e 02310053     ..3.!.6.....S.1.
    ecf4:	024e0077 00340007 004900b0 00400182     w.N...4...I...@.
    ed04:	0030017f 002001ce 001001b1 02a00371     ..0... .....q...
    ed14:	02a10368 02a2037f 02a3037c 02c10028     h.......|...(...
    ed24:	02f303b1 02f803b8 01a703e2 00a8019d     ................
    ed34:	01a901ae 01aa02ee 01ab02ae 01ac02bb     ................
    ed44:	01ad02b6 01ae02d8 01af02d9 007203a0     ..............r.
    ed54:	00510210 0052020f 00530211 01540218     ..Q...R...S...T.
    ed64:	01550224 0156022b 01570312 01580313     $.U.+.V...W...X.
    ed74:	015901c2 015a02b3 015b02b0 015c02bc     ..Y...Z...[...\.
    ed84:	015d02b7 015e02d6 015f02da 000803ed     ..]...^..._.....
    ed94:	0063038c 02e603b8 0266004b 004600a6     ..c.....K.f...F.
    eda4:	013003a8 017900fd 02410014 03080002     ..0...y...A.....
    edb4:	002c03f5 0033038c 00080245 005400e9     ..,...3.E.....T.
    edc4:	02e603bb 028403e7 03bb02ee 003c03c5     ..............<.
    edd4:	00e103b3 03f5000c 0308002c 005302e6     ........,.....S.
    ede4:	000803b1 001f038c 02840088 005400e9     ..............T.
    edf4:	03b8038b 03f80106 03e800a6 00ee03a3     ................
    ee04:	000802b5 00080245 00560106 00380270     ....E.....V.p.8.
    ee14:	011a039c 00a6011e 03ee03ee 0276006e     ............n.v.
    ee24:	03dc002b 03ee03dc 027603ee 005603db     +.........v...V.
    ee34:	03dc0236 03aa03aa 012a006e 02f000ae     6.......n.*.....
    ee44:	002c03e9 036a031c 03f50027 027b0008     ..,...j.'.....{.
    ee54:	019c0086 00ae000a 00ee037c 02ab0266     ........|...f...
    ee64:	002c03e9 03f801d8 000102e6 02760022     ..,.........".v.
    ee74:	001b031c 03dc03dc 03eb0276 02700056     ........v...V.p.
    ee84:	003800ee 03ea00ae 038e03ea 01d8038e     ..8.............
    ee94:	031c006e 0093036a 01d801aa 027000ae     n...j.........p.
    eea4:	003800ae 00ae023c 006a019c 02700226     ..8.<.....j.&.p.
    eeb4:	02f000ae 019801a6 00ae036b 01b60270     ........k...p...
    eec4:	007f0356 02f0004e 002c03e9 000803b1     V...N.....,.....
    eed4:	002c03f5 000803b1 000803f5 00020245     ..,.........E...
    eee4:	039300ee 0017020c 02600320 0360028c     ........ .`...`.
    eef4:	01a1024c 01040038 001a0288 01ba001e     L...8...........
    ef04:	03e0004e 013000a6 00a600df 02600056     N.....0.....V.`.
    ef14:	031c002e 036a026a 027003a0 02f000ee     ....j.j...p.....
    ef24:	03cb00ee 001802e5 01840108 001800a1     ................
    ef34:	03a002cc 02c400c8 02dd03e0 02e50018     ................
    ef44:	039c0018 001302e2 00a200c8 033c0386     ..............<.
    ef54:	014403e0 00fc01b8 01080284 03600276     ..D.........v.`.
    ef64:	02880104 03600276 03e00284 00ae0084     ....v.`.........
    ef74:	00ee01d8 012e01d8 02260023 00880013     ........#.&.....
    ef84:	00ee01d8 00ae01d8 03a00126 03e00088     ........&.......
    ef94:	01d80066 00ae0084 00ee01d8 018e01d8     f...............
    efa4:	02660023 00880013 00ee01d8 00ae01d8     #.f.............
    efb4:	03a00186 007d0363 00ae0038 03b001d8     ....c.}.8.......
    efc4:	00ae01d8 03b000ee 03e000ee 01d800ae     ................
    efd4:	01d80370 00ee00ae 03bb0370 01d80066     p.......p...f...
    efe4:	037c01b8 02fc011e 02fc0046 01e60226     ..|.....F...&...
    eff4:	01e601e6 004e0106 036001be 01be0386     ......N...`.....
    f004:	00a60360 01be033c 03e003f3 01d80066     `...<.......f...
    f014:	0289004c 004c0015 00140239 03a0008c     L.....L.9.......
    f024:	028c00c8 004c03a0 026e01ab 01a603a0     ......L...n.....
    f034:	028c03a0 03e003df 00180301 00180139     ............9...
    f044:	002c03c9 0018031d 00180119 00180035     ..,.........5...
    f054:	0013000c 00210184 006e0018 03e001d8     ......!...n.....
    f064:	01d8006e 0301001b 010c0018 00ae0360     n...........`...
    f074:	03d8033c 002f028c 02fc03d8 03e000ae     <...../.........
    f084:	02fc03d8 03b100ae 007d002c 028c0038     ........,.}.8...
    f094:	022e0360 016603a0 028c03a0 03e003df     `.....f.........
    f0a4:	00140319 02e5010c 018c0019 028c0023     ............#...
    f0b4:	00180085 00140281 0017008c 023902c8     ..............9.
    f0c4:	018c0014 031303a0 002b0108 00180301     ..........+.....
    f0d4:	00180139 002c03c9 0018031d 0158008e     9.....,.......X.
    f0e4:	010601f8 03e000b0 00180229 01f80070     ........)...p...
    f0f4:	01e800a6 012103bb 01450018 00a80038     ......!...E.8...
    f104:	02bc01f8 00aa031c 03a302bc 001800f1     ................
    f114:	01d80028 01f80070 031c003c 01bc00aa     (...p...<.......
    f124:	034300ea 00180301 00180035 00c70346     ..C.....5...F...
    f134:	0018034d 00a3030e 031c00ae 01ea01ea     M...............
    f144:	02be023c 005e011e 01ee01ee 00100130     <.....^.....0...
    f154:	01e60013 03f3027e 00140349 021c0243     ....~...I...C...
    f164:	0042017d 001802b5 026e004e 00ee00e2     }.B.....N.n.....
    f174:	00af01be 00ee0002 00ee033c 02d403d4     ........<.......
    f184:	019803c3 003f01be 00ee0042 00ee033c     ......?.B...<...
    f194:	03cb03d4 03b0006e 03e00066 00a601f8     ....n...f.......
    f1a4:	03b0006e 01980106 026003e0 01580016     n.........`...X.
    f1b4:	037c01b8 01bc011e 00e2031c 02e503e0     ..|.............
    f1c4:	00ae0018 00ae01e6 03a001ee 03e00166     ............f...
    f1d4:	0121034c 0321001b 01190014 010c0018     L.!...!.........
    f1e4:	02890360 008c0014 00150239 0289008c     `.......9.......
    f1f4:	00840014 010e03e0 01bc01b8 0042031c     ..............B.
    f204:	039c0056 01e602a2 022601e6 001301fe     V.........&.....
    f214:	01fe0226 02260013 001301fe 005a0226     &.....&.....&.Z.
    f224:	03e0005e 02a0039c 001a001e 03460016     ^.............F.
    f234:	03e601cb 010202fc 013001d8 005a0015     ..........0...Z.
    f244:	01fa00cb 01fa00ba 017a0013 01fa00ba     ..........z.....
    f254:	01fa00ba 017a0013 01fa00ba 01fa00ba     ......z.........
    f264:	017a0013 01fa00ba 01fa00ba 017a0013     ..z...........z.
    f274:	01d800ba 007a002e 02fc03ee 01d80102     ......z.........
    f284:	01ba017a 0013013a 0266023a 001e02db     z...:...:.f.....
    f294:	038e038e 005e038e 02bc0046 00aa025c     ......^.F...\...
    f2a4:	02ee016b 010e015b 00130130 03ee001b     k...[...0.......
    f2b4:	035e0266 00ae03eb 01300158 03060011     f.^.....X.0.....
    f2c4:	00ae0047 005a000e 01bc01d8 029b0106     G.....Z.........
    f2d4:	00a60198 003b000e 01ee00ae 01ee01ee     ......;.........
    f2e4:	00ae01ee 00e6002e 022602fc 00e60266     ..........&.f...
    f2f4:	0266012e 00ae0393 0260000e 00ee03e0     ..f.......`.....
    f304:	017c01b8 010403d8 0013004c 03d80108     ..|.....L.......
    f314:	03e000ce 0178014e 00670276 03e00168     ....N.x.v.g.h...
    f324:	02760178 01b003e3 01ed00ae 0015001c     x.v.............
    f334:	01b0002e 020100ae 004e001c 03c30268     ..........N.h...
    f344:	0278010e 02680370 010e002b 037002b8     ..x.p.h.+.....p.
    f354:	018c02a8 03cc002b 034803a0 034c03e0     ....+.....H...L.
    f364:	03c80360 036003cc 02e50188 005a0002     `.....`.......Z.
    f374:	00d0005c 005a0033 00d0005c 001f020c     \...3.Z.\.......
    f384:	001303d0 02fc0390 00f60330 0056005a     ........0...Z.V.
    f394:	034c03e0 002e016b 00ae00fa 01f1035e     ..L.k.......^...
    f3a4:	003e0037 02ee00ce 003600f1 01ee006e     7.>.......6.n...
    f3b4:	020e01ee 005a00ee 01ee010e 001301e6     ......Z.........
    f3c4:	014e02ba 0342039c 03ae0017 004e038e     ..N...B.......N.
    f3d4:	02dc006e 03ce0150 0222004b 03f301ce     n...P...K.".....
    f3e4:	03ee014e 030f0394 03ca03d4 002d03c3     N.............-.
    f3f4:	03460018 02ee003f 0121002f 02c90018     ..F.?.../.!.....
    f404:	018c000e 003701f1 001802dd 001802e5     ......7.........
    f414:	003c00a6 00e600ae 02dc004e 03ce0210     ..<.....N.......
    f424:	02220073 03f301ce 006e014e 01bc00ee     s.".....N.n.....
    f434:	023c00b6 00ee03e6 03d4006e 005403ca     ..<.....n.....T.
    f444:	004a0393 034e00bc 00c80013 02c3000e     ..J...N.........
    f454:	000c00e1 002c03f5 00080311 01be001e     ......,.........
    f464:	025c02d0 02e600a2 02e10063 038c0008     ..\.....c.......
    f474:	00f50023 002b0020 00f50388 03840020     #... .+..... ...
    f484:	038c0006 00030279 02050388 03840024     ....y.......$...
    f494:	000002d9 02e102e0 030c0008 004c038d     ..............L.
    f4a4:	01d8010e 008c00ae 00030261 035d038c     ........a.....].
    f4b4:	00e10013 00a6000c 0270004e 01fe01b8     ........N.p.....
    f4c4:	01fe0023 03480013 026000a6 01060056     #.....H...`.V...
    f4d4:	0270004e 0162031c 00230249 013001a2     N.p...b.I.#...0.
    f4e4:	030600a1 00230269 001601c6 0110021c     ....i.#.........
    f4f4:	00ca008e 01bc01ea 00e60330 0330023a     ........0...:.0.
    f504:	005e0106 0010005a 01ee01ee 029001ee     ..^.Z...........
    f514:	0302039c 02f6002f 023e001f 038c0142     ..../.....>.B...
    f524:	000b001d 02fe0066 034c0023 00020251     ....f...#.L.Q...
    f534:	001b034c 03df02f6 025102fa 004e000c     L.........Q...N.
    f544:	00890130 017001bc 021c004e 02060310     0.....p.N.......
    f554:	017001bc 0013034c 034c02a0 00140205     ..p.L.....L.....
    f564:	00180121 01b80128 00aa031c 01a8010a     !...(...........
    f574:	03e00138 0211038c 015c0032 03d003d0     8.......2.\.....
    f584:	013b03e6 021c03e6 038c00d0 038a001f     ..;.............
    f594:	01b6039c 038c005b 00020241 0110011c     ....[...A.......
    f5a4:	009000d0 00e50090 0316000a 0027006d     ............m.'.
    f5b4:	01b601d6 038c003b 015c0073 00900090     ....;...s.\.....
    f5c4:	01b60043 038c01a3 015c003b 00500090     C.......;.\...P.
    f5d4:	002203d5 00e500c8 03f50050 0284002c     ..".....P...,...
    f5e4:	00cc0244 000b0205 030c006e 020c0047     D.......n...G...
    f5f4:	02080037 000c0001 00220009 02fe03b8     7.........".....
    f604:	009c0023 0042017d 00080245 0176010e     #...}.B.E.....v.
    f614:	03ee03b8 00be03ee 006603ee 03e800ae     ..........f.....
    f624:	00a603b8 03a800ae 00020261 00a301b6     ........a.......
    f634:	0043038c 0110015c 00d90150 031c000a     ..C.\...P.......
    f644:	00160162 000c0251 00400375 01a1024c     b...Q...u.@.L...
    f654:	022d0038 01b60002 038c002b 01be038b     8.-.....+.......
    f664:	01b60353 038c006b 015c003b 01100110     S...k...;.\.....
    f674:	031c032b 00160162 004400a1 01be00f3     +...b.....D.....
    f684:	03a7038c 019003bb 030203dc 009c015b     ............[...
    f694:	00ff01b6 009f01b6 0043038c 011c0190     ..........C.....
    f6a4:	00d00110 00e503d0 0339000a 03b0000c     ..........9.....
    f6b4:	02e6017c 00080245 00020241 001b038c     |...E...A.......
    f6c4:	03730150 000c0339 000002ae 004303b0     P.s.9.........C.
    f6d4:	001b038c 03230110 000c0339 01a80370     ......#.9...p...
    f6e4:	01c20363 00a301b6 003b038c 0110011c     c.........;.....
    f6f4:	00d00090 02c30190 013c01b8 00aa031c     ..........<.....
    f704:	01ea01ea 017c01ea 024501a8 01b60002     ......|...E.....
    f714:	01420017 0083038c 0110011c 01100090     ..B.............
    f724:	031c0150 031c0290 03370362 0110005c     P.......b.7.\...
    f734:	00f90210 00ae000a 01b80058 02dc011e     ........X.......
    f744:	037e0310 038d031b 0205004c 01610014     ..~.....L.....a.
    f754:	035c005e 00130348 01840344 02050260     ^.\.H...D...`...
    f764:	004e001c 00ae0270 03980128 01b800a6     ..N.p...(.......
    f774:	01a800a6 030c0044 00840013 038c00c4     ....D...........
    f784:	01fe0047 01fe0033 00c80023 00530208     G...3...#.....S.
    f794:	00a00208 00370014 0027038c 0017008c     ......7...'.....
    f7a4:	01380204 00cc00e0 031c017f 020c0098     ..8.............
    f7b4:	000c00ff 02f600bb 010600a7 0210031c     ................
    f7c4:	00a6031c 006f0302 02fc0208 03dc001c     ......o.........
    f7d4:	03f30276 02d00138 0098031c 00130222     v...8......."...
    f7e4:	02f60048 0106002f 00b603e6 021c001b     H.../...........
    f7f4:	00060290 002f0276 002702f6 0013028c     ....v./...'.....
    f804:	01680236 01fe0073 01fe001b 010c038f     6.h.s...........
    f814:	009c037b 001f02e2 035303d0 034302d0     {.........S...C.
    f824:	00a0033c 01870014 008c00e0 038c0177     <...........w...
    f834:	00cc0127 000c0157 020c001f 01b80137     '...W.......7...
    f844:	004b01fe 004e02dc 03100310 00900010     ..K...N.........
    f854:	01b3014e 003301fe 02dc004e 03100150     N.....3.N...P...
    f864:	01fe03b3 004e002b 011002dc 004e03cb     ....+.N.......N.
    f874:	015002dc 036b0310 002c03f5 004e00ee     ..P...k...,...N.
    f884:	00ee0270 007b02ee 033c0178 023d00cc     p.....{.x.<...=.
    f894:	00cc001c 001d024d 001b02d6 0090035c     ....M.......\...
    f8a4:	014e023c 018d00e0 023c001c 001c024d     <.N.......<.M...
    f8b4:	001b02d6 0210019c 018d007c 018d002c     ........|...,...
    f8c4:	003c001c 001c024d 001b02d6 0210001c     ..<.M...........
    f8d4:	0189013c 007c001c 001c024d 001b02d6     <.....|.M.......
    f8e4:	0210019c 018900fc 00bc001c 001c024d     ............M...
    f8f4:	001302d6 02fc0090 002c018d 020100ae     ..........,.....
    f904:	000e001c 001c01a1 024d017c 02d6001c     ........|.M.....
    f914:	015c001b 00bc0090 002c018d 001c01a1     ..\.......,.....
    f924:	024d02bc 02d6001c 025c001b 02bc0090     ..M.......\.....
    f934:	01a1014e 013c001c 001c024d 001b02d6     N.....<.M.......
    f944:	0210009c 018d003c 01a1002c 027c001c     ....<...,.....|.
    f954:	001c024d 001b02d6 0210035c 002c0189     M.......\.....,.
    f964:	001c01a1 024d00fc 02d6001c 029c001b     ......M.........
    f974:	00fc0210 00ae014e 001c01ed 013801a0     ....N.........8.
    f984:	017e011e 030400bf 029c01b8 001301e2     ..~.............
    f994:	017e0308 017e0057 026d007b 01bc004c     ..~.W.~.{.m.L...
    f9a4:	002c018d 0023027c 004c0249 014e017c     ..,.|.#.I.L.|.N.
    f9b4:	03fd006e 0138002a 02be02a0 000e0260     n...*.8.....`...
    f9c4:	039c02fc 02490102 028c004c 014c0023     ......I.L...#.L.
    f9d4:	004e0017 009701a2 00f701a2 013f01a2     ..N...........?.
    f9e4:	007f01a2 00df01a2 013701a2 006f01a2     ..........7...o.
    f9f4:	00d701a2 011f01a2 007c006b 004c0269     ........k.|.i.L.
    fa04:	002c0189 004c0241 018d017c 026d002c     ..,.A.L.|...,.m.
    fa14:	00bc004c 017c00ab 004c0269 018d01bc     L.....|.i.L.....
    fa24:	0241002c 033c004c 005b014e 018d017c     ,.A.L.<.N.[.|...
    fa34:	0241002c 037c004c 004c0269 014e01bc     ,.A.L.|.i.L...N.
    fa44:	00b0019c 002302fe 019c0110 02780142     ......#.....B.x.
    fa54:	02680370 01f9006e 004e001c 038c00dc     p.h.n.....N.....
    fa64:	00500013 01b8010e 01e2029c 01e201e2     ..P.............
    fa74:	00ae0033 0110001c 029c00ae 002b01e2     3.............+.
    fa84:	011c00ae 010e0050 001f000c 0087020c     ....P...........
    fa94:	013c01b8 02ea031c 00ae002b 021000dc     ..<.....+.......
    faa4:	02cc00ae 004e002b 0210011c 01f9014e     ....+.N.....N...
    fab4:	02c4001c 001c004e 001b02cc 003b0222     ....N.......".;.
    fac4:	00d400a0 00e00023 0050021c 004c00e0     ....#.....P...L.
    fad4:	019c001b 01e10110 0138001c 00a000ee     ..........8.....
    fae4:	032002e0 03d801b8 00e003e0 012800ae     .. ...........(.
    faf4:	00a60398 00a601b8 004401a8 02ae004e     ..........D.N...
    fb04:	0390001c 010e0390 03b00278 01840268     ........x...h...
    fb14:	028b0344 01ee027c 014e01ee 020c03e0     D...|.....N.....
    fb24:	03200017 01fe01b8 01fe015f 01fe010f     .. ....._.......
    fb34:	03650077 039c002c 02fc00b0 015800a2     w.e.,.........X.
    fb44:	00a601f8 010203e6 008b00ee 00080130     ............0...
    fb54:	002c0359 01210086 02dd0018 02e50018     Y.,...!.........
    fb64:	00660018 0202039c 01580066 013000b3     ..f.....f.X...0.
    fb74:	03590002 0086002c 00180121 0130038b     ..Y.,...!.....0.
    fb84:	0359000a 00ae002c 00fe033c 010601f8     ..Y.,...<.......
    fb94:	028500b0 0158004c 03560198 02bd0177     ....L.X...V.w...
    fba4:	01be0018 034200df 00ee0147 00ee033c     ......B.G...<...
    fbb4:	02d403d4 00a603bb 01be01d8 02e20047     ............G...
    fbc4:	00ee00e7 00ee033c 03c303d4 0302006e     ....<.......n...
    fbd4:	007000a7 00ae0198 00ee0043 030200ae     ..p.....C.......
    fbe4:	00ae0067 00700198 0018013d 0098039c     g.....p.=.......
    fbf4:	022a031c 0058039c 00020251 0302039c     ..*...X.Q.......
    fc04:	028c03e3 024c0360 003801a1 0130039c     ....`.L...8...0.
    fc14:	00580001 000c0251 0070004e 004601f8     ..X.Q...N.p...F.
    fc24:	028801e8 03e00244 001f018c 03e00188     ....D...........
    fc34:	03e00184 003c01f8 00160106 0270004e     ......<.....N.p.
    fc44:	03e00038 00fe0130 013003db 03eb00ff     8...0.....0.....
    fc54:	0018014d 0018014d 0018014d 017900cb     M...M...M.....y.
    fc64:	00b30018 002c03f5 0368004e 005a03b8     ......,.N.h...Z.
    fc74:	02e603a8 0130001f 016900fe 017b0014     ......0...i...{.
    fc84:	01a1024c 01f80038 0106027c 022d00f8     L...8...|.....-.
    fc94:	01a10002 01130038 002c03f5 006702e6     ....8.....,...g.
    fca4:	002c03e9 030c0244 020c00e7 03ed00df     ..,.D...........
    fcb4:	02840008 03cc00fb 00810033 028c0000     ........3.......
    fcc4:	014b0017 02e1006e 006e0008 002200c5     ..K.n.....n...".
    fcd4:	000c0251 013901a0 02480018 00020245     Q.....9...H.E...
    fce4:	02840204 003c03c5 032702e6 03d702ee     ......<...'.....
    fcf4:	02610204 03f50002 020c002c 030c0057     ..a.....,...W...
    fd04:	020800d7 02e60284 00230009 001202f1     ..........#.....
    fd14:	00080245 036b0284 02690284 02e00044     E.....k...i.D...
    fd24:	00240205 021c0046 02660210 020c03fb     ..$.F.....f.....
    fd34:	004d038d 010c02a3 014800c7 028c00b3     ..M.......H.....
    fd44:	014803df 00b00006 00140129 0162001c     ..H.....).....b.
    fd54:	03ea00a3 03e303dc 019d034c 03e6002e     ........L.......
    fd64:	021c03e6 03160290 028c0163 0144001f     ........c.....D.
    fd74:	010c035b 0343019f 001401a2 02d40117     [.....C.........
    fd84:	014c0027 017e0017 03d403d4 01aa008e     '.L...~.........
    fd94:	023c00ee 03ca00dc 00ae01bc 035c00ee     ..<...........\.
    fda4:	02a0011e 009f035a 00ae000e 0063006e     ....Z.......n.c.
    fdb4:	0291034c 028c0036 010c001b 02fa01a7     L...6...........
    fdc4:	00020251 024402be 03db00f0 03770342     Q.....D.....B.w.
    fdd4:	03fa01a6 002603e3 005c009b 008e03ea     ......&...\.....
    fde4:	02a000b0 038a009c 038a038a 00060086     ................
    fdf4:	02d6031c 018a002b 008a037b 00ae0006     ....+...{.......
    fe04:	00ae02fc 001c0126 002f035e 03ee01a6     ....&...^./.....
    fe14:	03db038a 006e00a6 00400119 022d0354     ......n...@.T.-.
    fe24:	02930002 00a2009c 00a202a2 028402cb     ................
    fe34:	028c0248 013500d7 01440014 035c002e     H.....5...D...\.
    fe44:	01020222 01d8009c 02700046 00aa01b8     ".......F.p.....
    fe54:	01a800a6 00aa00a6 006a01d8 035a0108     ..........j...Z.
    fe64:	0104030f 02f3006a 031302fa 02dc00ee     ....j...........
    fe74:	00ee01d0 02b3033e 02a7010c 031b002e     ....>...........
    fe84:	007a002e 00460158 005e003e 020601d8     ..z.X.F.>.^.....
    fe94:	0013025e 000e029e 02dc01d8 038e03dc     ^...............
    fea4:	012e0013 03f30262 03cb0354 00ae0198     ....b...T.......
    feb4:	01980158 001b02fe 03ce0166 035c00ae     X.......f.....\.
    fec4:	00bf034a 00ae00ee 010e035c 006b01e6     J.......\.....k.
    fed4:	005b023a 022600c6 00de0222 02fa006e     :.[...&."...n...
    fee4:	004e0360 03e0001e 03c300c6 0363006e     `.N.........n.c.
    fef4:	034f0342 03ea0266 028503e3 002e001e     B.O.f...........
    ff04:	0158007a 003e0046 00fb02fa 024601d8     z.X.F.>.......F.
    ff14:	0013025e 01d8029e 00ae005e 032e006e     ^.......^...n...
    ff24:	01d8002b 026603ee 035c01d8 0013004e     +.....f...\.N...
    ff34:	018e0222 012e03f3 03d403ee 03d302d4     "...............
    ff44:	019800ae 003600e9 017d039c 034c0042     ......6...}.B.L.
    ff54:	02be004b 003b034c 000c0369 00400001     K...L.;.i.....@.
    ff64:	0048017b 001800f9 00140379 00180035     {.H.....y...5...
    ff74:	001800a1 0033010c 001f02cc 001300c4     ......3.........
    ff84:	014500c8 03090038 005e000e 0360034c     ..E.8.....^.L.`.
    ff94:	0018002d 003b0184 00180301 00180075     -.....;.....u...
    ffa4:	00180035 001800a1 000e02fd 01450008     5.............E.
    ffb4:	034c0056 0369008b 015d000c 01450034     V.L...i...].4.E.
    ffc4:	01190038 038b0040 035c000e 015d0162     8...@.....\.b.].
    ffd4:	03c30034 03d10008 03890014 03ad0054     4...........T...
    ffe4:	0145005c 000c0038 03e0027b 0033034c     \.E.8...{...L.3.
    fff4:	000c0369 00340061 03d1031b 03390014     i...a.4.......9.
   10004:	03ad0054 0145005c 027b0038 001403d1     T...\.E.8.{.....
   10014:	00540339 0365018c 0139005d 01790018     9.T...e.].9...y.
   10024:	03290058 0121005c 01310018 01790018     X.).\.!...1...y.
   10034:	03510018 02c4005c 01b8034b 031c013c     ..Q.\...K...<...
   10044:	00a3026a 0093004a 01760176 01760176     j...J...v.v.v.v.
   10054:	01bc01b8 01f600b6 034c003c 005b0319     ........<.L...[.
   10064:	01b8006b 031c013c 017c022a 017603bb     k...<...*.|...v.
   10074:	01b80176 00b600fc 01a8007c 00020245     v.......|...E...
   10084:	001801a9 001800f1 001402f9 00ae018b     ................
   10094:	00ae02a6 03e002ae 001801a9 001800f1     ................
   100a4:	0038007d 01a9011b 012d0018 02060038     }.8.......-.8...
   100b4:	024502ee 03d90008 0121002c 00f1001a     ..E.....,.!.....
   100c4:	02cd0018 00b00014 007001d8 00e601f8     ..........p.....
   100d4:	003c01e8 00160106 002c03d9 001402cd     ..<.......,.....
   100e4:	00180121 00f10293 02d50018 006e0014     !.............n.
   100f4:	008e01d8 004e0158 00380270 00780070     ....X.N.p.8.p.x.
   10104:	00b80028 01f80068 011c010e 03ca03ca     (...h...........
   10114:	015c03c6 00ae010a 006e01e8 03e00198     ..\.......n.....
   10124:	0158008e 00a80078 0270004e 00680038     ..X.x...N.p.8.h.
   10134:	002800b0 010e01f8 03e6011c 03ea03ea     ..(.............
   10144:	03530106 00e30050 001f01e2 00c300d0     ..S.P...........
   10154:	00b301d0 0018002d 002f0346 0130010e     ....-...F./...0.
   10164:	030e0041 001a021d 01ee00ae 039c01ee     A...............
   10174:	035f01e2 033f01e2 031c03d0 031c0262     .._...?.....b...
   10184:	010a02a2 00fc01b8 007c00aa 001a01a8     ..........|.....
   10194:	017a017a 014d017a 01310018 007a0018     z.z.z.M...1...z.
   101a4:	03d301ba 00380145 001a0121 00180301     ....E.8.!.......
   101b4:	001401d5 01a900fb 00e30014 00480148     ............H.H.
   101c4:	001401d5 01480023 001401a9 001c015d     ....#.H.....]...
   101d4:	009300cc 001b014c 005b010c 002f004c     ....L.....[.L./.
   101e4:	00850284 002b0018 00140319 00140239     ......+.....9...
   101f4:	02c902c4 014c000e 037b03e3 001b0008     ......L...{.....
   10204:	01480008 0018002d 034d0066 00ae0018     ..H.-...f.M.....
   10214:	0013014c 02c60166 030e001f 0229001b     L...f.........).
   10224:	01bc003a 02a9011a 010b0038 0346001a     :.......8.....F.
   10234:	02ee001f 01a9004b 017a0014 03e300cc     ....K.....z.....
   10244:	01d501ba 01390014 01a10018 00060038     ......9.....8...
   10254:	00ba004e 03e0003c 000c00c4 003902f1     N...<.........9.
   10264:	02dd000c 02290038 007a0018 03ab01ba     ....8.)...z.....
   10274:	00020225 002d0048 03460018 02ee006f     %...H.-...F.o...
   10284:	034d00b3 00ae0018 0017036e 004c0048     ..M.....n...H.L.
   10294:	024e0013 01b90006 00860018 00060158     ..N.........X...
   102a4:	0289004e 004c0014 0038007d 017603e0     N.....L.}.8...v.
   102b4:	01760176 004e0176 01f600b6 003c0284     v.v.v.N.......<.
   102c4:	01b800ee 013c010e 0102009c 00ae007e     ......<.....~...
   102d4:	006e01a8 0251037e 03b5000d 02050044     ..n.~.Q.....D...
   102e4:	02d90024 01b80000 017c010e 00ae011e     $.........|.....
   102f4:	01a901a8 01910032 004c0044 00430179     ....2...D.L.y.C.
   10304:	00400375 00860158 00180121 006601d8     u.@.X...!.....f.
   10314:	00180139 007c00ba 00b10106 00930044     9.....|.....D...
   10324:	004c0109 001f02be 004c0191 004302fe     ..L.......L...C.
   10334:	0109004b 001b004c 004c0191 024502ee     K...L.....L...E.
   10344:	00cd0008 011b0038 004c0109 01910383     ....8.....L.....
   10354:	02ee004c 02be03ab 01090357 001b004c     L.......W...L...
   10364:	004c0191 036702ee 00c8036b 00440191     ..L...g.k.....D.
   10374:	0027004c 00100130 01d10306 030d000a     L.'.0...........
   10384:	00750022 024c0044 003801a1 0002022d     ".u.D.L...8.-...
   10394:	00440075 00200229 00180301 00440229     u.D.). .....).D.
   103a4:	000000ad 019103a3 004c0044 03e90047     ........D.L.G...
   103b4:	01910022 004c0044 00260051 00420179     "...D.L.Q.&.y.B.
   103c4:	00180301 00440229 00020241 00750048     ....).D.A...H.u.
   103d4:	034c0044 004c008f 00190085 03b5004c     D.L...L.....L...
   103e4:	02290014 00350044 03460018 02ee0027     ..).D.5...F.'...
   103f4:	00080245 010e0353 004c004e 02be0017     E...S...N.L.....
   10404:	0050035c 00400001 02290006 02f60044     \.P...@...).D...
   10414:	03730387 02ee001a 0346001f 00c40043     ..s.......F.C...
   10424:	001401d5 03c300cc 03b3017a 003c00ba     ........z.....<.
   10434:	03b803e0 03f8010e 00be03ce 03ce03ce     ................
   10444:	00130276 03e80056 03a800ae 03e000ae     v...V...........
   10454:	007a002e 00460158 005e003e 031c01d8     ..z.X.F.>.^.....
   10464:	017603d4 03540236 00ee03e3 016b02ee     ..v.6.T.......k.
   10474:	006e01d8 014b02ee 00870326 006e01d8     ..n...K.&.....n.
   10484:	03df0326 01d800ae 0023030e 00ae01d8     &.........#.....
   10494:	01d8002b 01d800ae 019e006e 005b035e     +.......n...^.[.
   104a4:	011e028e 003b0326 02fc01d8 006e01d8     ....&.;.......n.
   104b4:	006e01a6 004b0326 03ce0166 011e00be     ..n.&.K.f.......
   104c4:	02d403d4 004e03c3 019800ae 012e00ee     ......N.........
   104d4:	02760276 00000276 003600bd 02fa02c4     v.v.v.....6.....
   104e4:	004e0017 035c02a0 002b02f6 02f60286     ..N...\...+.....
   104f4:	0286001f 01f603e0 004e001f 004a0033     ..........N.3.J.
   10504:	0056026a 03d402c8 03e003d4 004e001c     j.V...........N.
   10514:	02040004 02c40304 026e0260 03d4002e     ........`.n.....
   10524:	02d40236 011c03eb 02900390 03100290     6...............
   10534:	01bc0290 001c00ae 03440184 00240219     ..........D...$.
   10544:	0029034c 018c0003 030c002f 02d90360     L.)...../...`...
   10554:	004e0000 02600270 0228026e 01bc01f8     ..N.p.`.n.(.....
   10564:	01510130 003c02a6 006001e8 01b80000     0.Q...<...`.....
   10574:	011e037c 0260001a 010e00ae 00fa00fc     |.....`.........
   10584:	010600a6 01bc005a 005a011a 017e021a     ....Z.....Z...~.
   10594:	02dc03f3 01fa0090 0013011a 01fa01fa     ................
   105a4:	015a01fa 03db027e 00ba005e 01fa01fa     ..Z.~...^.......
   105b4:	02bc01fa 00460106 01fa023c 01fa011a     ......F.<.......
   105c4:	01fa021a 02fc021a 03e9011e 0056002c     ............,.V.
   105d4:	001f02e6 00fd0130 00da00a6 007c011a     ....0.........|.
   105e4:	021e02be 023e002f 023e001f 01a60013     ..../.>...>.....
   105f4:	00a600fc 01a2031c 030601a2 00420179     ............y.B.
   10604:	00e00130 03a00306 023d03d3 00860040     0.........=.@...
   10614:	027000c6 00ee0038 02700226 00230038     ..p.8...&.p.8.#.
   10624:	03ae033c 01be00fe 010603e3 00ba0016     <...............
   10634:	031c011a 027e007c 0002005f 027e039c     ....|.~._.....~.
   10644:	0002003f 03d4001b 027e0022 018103eb     ?.......".~.....
   10654:	034c0044 02a003a0 00af0346 010e008e     D.L.....F.......
   10664:	01ae016e 007f036e 001b035e 005b017e     n...n...^...~.[.
   10674:	001b0356 003b0176 035c006e 036002e2     V...v.;.n.\...`.
   10684:	03a002ee 017d015c 01300042 027000fe     ....\.}.B.0...p.
   10694:	010e0378 004603b8 003c0270 02d300ae     x.....F.p.<.....
   106a4:	015800b0 00ee01f8 0040023d 0198006e     ..X.....=.@.n...
   106b4:	00a000ae 00e0039c 004b039c 03dc00ee     ..........K.....
   106c4:	03dc00a0 00be00e0 02fc03ee 027e00ee     ..............~.
   106d4:	00ee03b3 00ce0158 00fe007c 00ee0198     ....X...|.......
   106e4:	02d40023 03dc0027 03e3023e 01580270     #...'...>...p.X.
   106f4:	00b20038 00a002f0 02fe0198 02dc0053     8...........S...
   10704:	023e03dc 022603f3 00380270 02f000ea     ..>...&.p.8.....
   10714:	0270004e 03e000ce 00750044 02600044     N.p.....D.u.D.`.
   10724:	005f034c 00180035 00130346 00a60048     L._.5...F...H...
   10734:	001302ee 03e00048 0006005e 001302f6     ....H...^.......
   10744:	02e6004e 0266005b 03af02e6 013002fc     N...[.f.......0.
   10754:	0013000a 027e0146 005e03f3 037c0046     ....F.~...^.F.|.
   10764:	03e00146 01300158 027000fe 003c03b8     F...X.0...p...<.
   10774:	010600a6 03a801bc 03680198 0270004e     ..........h.N.p.
   10784:	03e00198 004e0004 01b80270 03b501fe     ......N.p.......
   10794:	01fe0046 028c03eb 02a00360 010e00b0     F.......`.......
   107a4:	0098031c 03c60056 001e00ae 035c0158     ....V.......X.\.
   107b4:	03d4005e 03f301a6 00670314 00c702f6     ^.........g.....
   107c4:	001b0266 00c30006 00170214 023e03d4     f.............>.
   107d4:	019803c3 031c005e 001302f6 009c028a     ....^...........
   107e4:	03ea010e 03ea03ea 021c0108 00060093     ................
   107f4:	0226038e 002e03f3 006e008a 035a012e     ..&.......n...Z.
   10804:	035e005f 02fa004f 035e032f 011e005f     _.^.O.../.^._...
   10814:	01aa0260 000a03e0 03c7034e 006e03d4     `.......N.....n.
   10824:	023e035b 038e03d4 02c4039b 01b80260     [.>.........`...
   10834:	005a02bc 0106033c 005a01f8 00ee005e     ..Z.<.....Z.^...
   10844:	01fe01b8 028c0193 02c80013 018c00c4     ................
   10854:	00c80013 00840344 02050184 002d0014     ....D.........-.
   10864:	02840018 001302cc 02c40288 0013018c     ................
   10874:	01840008 001300cc 00e60188 001c0205     ................
   10884:	03a900e6 00ee0018 001c0205 013c01b8     ..............<.
   10894:	00ae0056 03ae0023 00fe033c 03e301a6     V...#...<.......
   108a4:	02ce00ee 009300cf 034501fe 01fe004b     ..........E.K...
   108b4:	004b026d 01a600b0 03ce003f 033c00ee     m.K.....?.....<.
   108c4:	00fe00ee 02c603cb 00e0003f 00a0039c     ........?.......
   108d4:	02f2011c 02c80013 010e027c 015c01b8     ........|.....\.
   108e4:	01a301e2 03f701fe 00c701fe 00d701fe     ................
   108f4:	031c01bc 00560042 02a2039c 01060226     ....B.V.....&...
   10904:	031c01bc 01ca0166 018b0013 000a0130     ....f.......0...
   10914:	00170306 00a602c8 035500fb 01060018     ..........U.....
   10924:	03550093 006e0018 01ee0266 01ee010e     ..U...n.f.......
   10934:	018d014e 018d002c 038e002c 0066038e     N...,...,.....f.
   10944:	0166006e 013c01b8 028c02eb 013000d7     n.f...<.......0.
   10954:	02cc000a 009b0013 0067034e 013c01b8     ........N.g...<.
   10964:	02ea031c 01300027 004b0002 00010130     ....'.0...K.0...
   10974:	02dc0033 026603d4 03eb0342 0058039c     3.....f.B.....X.
   10984:	01be001e 00b003e0 00c701a6 01ee011e     ................
   10994:	00e003ce 00a002dc 0392035c 01f200ae     ........\.......
   109a4:	00ee015e 033c0158 015e01fe 01ee0198     ^...X.<...^.....
   109b4:	00ae033c 003a0066 02c60343 00e0003f     <...f.:.C...?...
   109c4:	00a0039c 02f2015c 02c80013 039c002e     ....\...........
   109d4:	010e01ee 004203dc 01ee03d4 01ee01ee     ......B.........
   109e4:	00e2033c 00ae00c2 019403dc 00ce0393     <...............
   109f4:	00b001bb 010701a6 01ee011e 01ee01ee     ................
   10a04:	00e003ce 00a002dc 0392035c 01f200ae     ........\.......
   10a14:	01f201f2 00ee015e 033c0158 01fe01fe     ....^...X.<.....
   10a24:	015e01fe 01ee0198 01ee01ee 00ae033c     ..^.........<...
   10a34:	003a0066 02c60303 00e0003f 00a0039c     f.:.....?.......
   10a44:	02f2021c 02c80013 025c000e 01e601e6     ..........\.....
   10a54:	001301e6 03d40162 03db02d4 002600ae     ....b.........&.
   10a64:	004a0111 006e00ee 000e01d8 039c004e     ..J...n.....N...
   10a74:	00040290 00540389 01210093 00ee0018     ......T...!.....
   10a84:	01fe01b8 01fe0387 01fe0117 00ee002f     ............/...
   10a94:	001401e5 00ee0023 001401dd 00180139     ....#.......9...
   10aa4:	004f0346 003f02ee 015c01b8 001b01e2     F.O...?...\.....
   10ab4:	00320101 0098039c 026a031c 0130010a     ..2.......j...0.
   10ac4:	030a0002 00aa03b7 002e0349 01d500ee     ........I.......
   10ad4:	032b0014 00e7034c 001800f9 006b010c     ..+.L.........k.
   10ae4:	00140281 0073008c 004e0188 018c023a     ......s...N.:...
   10af4:	02a0006b 03e002be 03790048 00350014     k.......H.y...5.
   10b04:	03460018 02ee039f 02a0038f 036903e0     ..F...........i.
   10b14:	02be000c 00430001 0047034c 00180301     ......C.L.G.....
   10b24:	01d8002e 01d8004e 000e02d3 0351039b     ....N.........Q.
   10b34:	000e0018 001803a9 017c02ba 02d0029c     ..........|.....
   10b44:	02d000dc 01b8010e 019c033c 015c0102     ........<.....\.
   10b54:	01ea0042 03ca009c 005c01ea 01ea03ca     B.........\.....
   10b64:	03ca001c 015c01ea 00ae010a 00060309     ......\.........
   10b74:	0053006e 0130004e 030c0008 013003a0     n.S.N.0.......0.
   10b84:	03e0000c 004e014e 00080130 0360030c     ....N.N.0.....`.
   10b94:	008603bb 00ee0158 00ee01d8 01e600ae     ....X...........
   10ba4:	01ee00ae 01660013 01e600ae 01ee00ae     ......f.........
   10bb4:	01660013 014601d8 00ae01d8 0013012e     ..f...F.........
   10bc4:	01e60226 01ee00ae 01660013 00ee00ae     &.........f.....
   10bd4:	005a0198 02fc0046 012e00ee 02260013     ..Z.F.........&.
   10be4:	03e000ae 029002dc 0044002e 011e0006     ..........D.....
   10bf4:	01be0260 004c0043 0048006f 025002dc     `...C.L.o.H...P.
   10c04:	00ba011e 00ee02fc 004c0285 01d800ee     ..........L.....
   10c14:	00ee038b 00ee03e0 0270004e 00d002dc     ........N.p.....
   10c24:	00900110 00100310 005002d0 02680050     ..........P.P.h.
   10c34:	025c004e 00100210 021003d0 001002d0     N.\.............
   10c44:	02a80090 003000ee 00b203e0 00ab0123     ......0.....#...
   10c54:	0101028c 02600032 01fe01b8 01fe0013     ....2.`.........
   10c64:	004e0055 00d7010c 025002dc 0162001c     U.N.......P...b.
   10c74:	03540033 03dc0027 03d3027e 003b014c     3.T.'...~...L.;.
   10c84:	0037037e 03d401a2 002b0144 000201be     ~.7.....D.+.....
   10c94:	03070354 027900b0 00060032 034a009c     T.....y.2.....J.
   10ca4:	01040047 002c03d9 010a01b8 00020251     G.....,.....Q...
   10cb4:	034a005c 009c0027 00130002 031d038a     \.J.'...........
   10cc4:	02600032 001603e6 00660386 002c03e9     2.`.......f...,.
   10cd4:	01d102e6 0158000a 02e603f8 0130001f     ......X.......0.
   10ce4:	010601fc 02dc0198 031c01d0 001f036a     ............j...
   10cf4:	003c0088 00fe023e 010600a6 02700056     ..<.>.......V.p.
   10d04:	001e0038 01b6017e 001b0356 03db023c     8...~...V...<...
   10d14:	036a006a 023c008b 033e017e 006603df     j.j...<.~.>...f.
   10d24:	0033008c 02b7004c 00840048 001602cb     ..3.L...H.......
   10d34:	01a60176 00be02c3 00f601bc 00840066     v...........f...
   10d44:	03e00044 031c01a0 019c0110 03200050     D...........P. .
   10d54:	02780013 026801ee 008602a8 000002d9     ..x...h.........
   10d64:	005c004e 026e0090 03cc0107 013003eb     N.\...n.......0.
   10d74:	02060340 01bc005a 01060330 003c0220     @...Z...0... .<.
   10d84:	03660056 006e0097 01300166 03060028     V.f...n.f.0.(...
   10d94:	004e030f 011c026e 01900050 001c010e     ..N.n...P.......
   10da4:	00240211 0002009d 004e0066 022602a0     ..$.....f.N...&.
   10db4:	01a60260 003c03e3 004e004b 02260226     `.....<.K.N.&.&.
   10dc4:	0023023c 03e3004e 025c004e 017d00f0     <.#.N...N.\...}.
   10dd4:	038d0042 00b0004c 00440128 00540019     B...L...(.D...T.
   10de4:	02a9006e 00ae000c 019800f0 035f036e     n...........n._.
   10df4:	021c01a0 01060310 00e60226 00180130     ........&...0...
   10e04:	00ba027c 023a0023 0033037a 01460330     |...#.:.z.3.0.F.
   10e14:	012603db 018603cb 02870346 00190048     ..&.....F...H...
   10e24:	006e0054 01ce00b0 023a004e 01f30130     T.n.....N.:.0...
   10e34:	036e02a6 02a90247 010e000c 036e0198     ..n.G.........n.
   10e44:	004e0217 01380270 004e0070 0268026e     ..N.p.8.p.N.n.h.
   10e54:	03cc02a8 008403a0 00020081 02a901a0     ................
   10e64:	00f0000c 01d800f0 00d801d8 03d800d8     ................
   10e74:	00ee03d8 02a9006e 01ce000c 02f1034e     ....n.......N...
   10e84:	01580053 0130004e 02700007 003800ee     S.X.N.0...p...8.
   10e94:	00ae014e 00a7004c 00ae012e 02f001d8     N...L...........
   10ea4:	0038004e 02f001d8 00e00130 00ee00ae     N.8.....0.......
   10eb4:	03a00366 0266006e 0056034b 018e033b     f...n.f.K.V.;...
   10ec4:	03630000 00200009 01bc01f8 004702e6     ..c... .......G.
   10ed4:	010c0130 01e8003c 01e601bc 03c801e6     0...<...........
   10ee4:	002303cc 03e30266 02e503e0 02050000     ..#.f...........
   10ef4:	002d0042 01390018 018c0018 00480013     B.-...9.......H.
   10f04:	01090184 00210018 00e50018 03ee0018     ......!.........
   10f14:	031c03ee 00aa037c 00ae002e 015800ee     ....|.........X.
   10f24:	037c01b8 02be035c 03fb01e2 018502a2     ..|.\...........
   10f34:	00ee0059 00580229 01f80158 005600bc     Y...).X.X.....V.
   10f44:	006e0146 014e0078 00ee0198 018c00ae     F.n.x.N.........
   10f54:	005d0365 0027000c 03b1004c 03a5002d     e.]...'.L...-...
   10f64:	03ad0054 02cc005c 005b0039 00380145     T...\...9.[.E.8.
   10f74:	00360325 004400a0 001e035c 003e001a     %.6...D.\.....>.
   10f84:	00e0003a 00aa029c 00e600bc 00ee01d8     :...............
   10f94:	00ae0070 001c01bc 012e004b 02260013     p.......K.....&.
   10fa4:	01d800ae 01d80146 026200ae 00ee03bb     ....F.....b.....
   10fb4:	03b200f0 00fe033c 033c00ae 00ae011e     ....<.....<.....
   10fc4:	00ee00f0 011e033c 03c602fc 019403dc     ....<...........
   10fd4:	00a0036b 004f004c 00ae0048 00ba01d8     k...L.O.H.......
   10fe4:	00e000a2 0303001c 03e000ae 00540249     ............I.T.
   10ff4:	02e600ae 034e001f 02c80013 00f000ee     ......N.........
   11004:	037c00f2 006a019c 037c00ee 037c00ae     ..|...j...|...|.
   11014:	03e000ee 00180139 01d8006e 001e002e     ....9...n.......
   11024:	00e0001a 00a0039c 0032005c 035c023c     ........\.2.<.\.
   11034:	00ae00f2 00b2023c 00ee00ae 0112023c     ....<.......<...
   11044:	001c037c 03ca03ca 00ee00f0 015800f0     |.............X.
   11054:	005e01f8 01d8005a 01d800ae 006f0306     ..^.Z.........o.
   11064:	002f0366 00ae01d8 004f032e 000000ad     f./.......O.....
   11074:	00180139 003601f1 00ae01d8 035c00a0     9.....6.......\.
   11084:	019c00e0 00130044 00ae0222 01c601d8     ....D...".......
   11094:	01d8005f 018e00ae 026603c3 022603b3     _.........f...&.
   110a4:	00ae012e 014601d8 021403d4 004c0043     ......F.....C.L.
   110b4:	004800df 00a000dc 00a200ba 00ee01d8     ..H.............
   110c4:	00a000f0 039c03e6 00ee02fc 010202fc     ................
   110d4:	00ee00c2 00be033c 035c02fc 00e003f2     ....<.....\.....
   110e4:	00ee00f0 00a002a3 000c01d8 02ee0360     ............`...
   110f4:	0346001f 00c80013 008601d8 003c00ae     ..F...........<.
   11104:	027c00ae 029c0056 03e000aa 01b80158     ..|.V.......X...
   11114:	00e0037c 00a0005c 00f2035c 039c0198     |...\...\.......
   11124:	00ee006e 01f5001b 017e0058 035c03eb     n.......X.~...\.
   11134:	039c03f2 001b00ae 00580229 03eb01fe     ........).X.....
   11144:	01f500ae 00ae0058 03ae00c3 00fe033c     ....X.......<...
   11154:	00a202fc 0392033c 03a0018c 01a200e0     ....<...........
   11164:	03e000a0 00ae01f2 001301ee 00ae0172     ............r...
   11174:	01ee00ee 016e0013 03e000ee 00040130     ......n.....0...
   11184:	004e00e6 003b022e 01ee02a0 01ee01ee     ..N...;.........
   11194:	026001ee 03cb0186 02a00126 01ee0013     ..`.....&.......
   111a4:	03f301a6 02a00006 003400c9 00120130     ..........4.0...
   111b4:	03e00146 004e0168 00120130 035c0158     F...h.N.0...X.\.
   111c4:	01d00210 01900250 02500010 001000d0     ....P.....P.....
   111d4:	00900090 00100090 03e00210 038d01a8     ................
   111e4:	0205004c 00b00014 015502fa 02f6005e     L.........U.^...
   111f4:	01480013 001302fe 002e0188 010e00fa     ..H.............
   11204:	0130004e 01bc002b 00130130 01780168     N.0.+...0...h.x.
   11214:	005f0306 02c9023e 014c0058 00350071     .._.>...X.L.q.5.
   11224:	016d014c 03a30034 001a0260 015a0013     L.m.4...`.....Z.
   11234:	03f3027e 014c00ba 029a0013 005a011a     ~.....L.......Z.
   11244:	023a023a 02a0023a 00ee0266 004e0158     :.:.:...f...X.N.
   11254:	0222035c 0260005b 02a0019a 01ee01ee     \.".[.`.........
   11264:	02fe01ee 0166001b 032603ce 00ee03af     ......f...&.....
   11274:	000e00ae 01d80168 00340071 01bc0198     ....h...q.4.....
   11284:	005a00ba 032900fc 03ce004c 01780158     ..Z...).L...X.x.
   11294:	00ba000e 00100130 015a01bc 019800dc     ....0.....Z.....
   112a4:	01ba0013 01ea0158 019803eb 002e00ae     ....X...........
   112b4:	012a0086 023a0033 004e00ae 00ae0210     ..*.3.:...N.....
   112c4:	004600ae 0006003c 00e5010c 01310018     ..F.<.........1.
   112d4:	00fa0018 003801a1 0144011a 001b015a     ......8...D.Z...
   112e4:	029a0148 005e0046 003c0006 0027010c     H...F.^...<...'.
   112f4:	0075014c 022d0019 01a10002 03e30038     L.u...-.....8...
   11304:	0018002d 0013018c 00080148 001403d1     -.......H.......
   11314:	03460004 00480013 004e00ae 00a80068     ..F...H...N.h...
   11324:	01e800e8 01900130 0017030e 01b80048     ....0.......H...
   11334:	031002dc 0090019c 01a803d0 016800ae     ..............h.
   11344:	01d80066 00270346 031902ee 004c005e     f...F.'.....^.L.
   11354:	03a90177 001e0018 004b009c 02fc03ce     w.........K.....
   11364:	00a2039c 017e033c 038a009c 03bf034a     ....<.~.....J...
   11374:	02fc00ae 02ad00ae 00ce0058 00200229     ........X...). .
   11384:	01060178 0260005e 002b0130 023e0013     x...^.`.0.+...>.
   11394:	03f301c6 01460168 00590259 027e0178     ....h.F.Y.Y.x.~.
   113a4:	02c90077 00710058 03cb0034 02a0004e     w...X.q.4...N...
   113b4:	0236023a 007b014c 006f02b6 015800ae     :.6.L.{...o...X.
   113c4:	000000ad 00ee001e 016d014c 014c0035     ........L.m.5.L.
   113d4:	00340071 001b018c 000002be 003402dd     q.4...........4.
   113e4:	0002022d 01b80168 031c023c 010a00aa     -...h...<.......
   113f4:	01a8037c 03e00178 023c01b8 00160106     |...x.....<.....
   11404:	02ae03d3 02ae00ae 00ee00ae 02aa001c     ................
   11414:	028c00ee 022e0360 016e03a0 00ee03a0     ....`.....n.....
   11424:	00ee022a 00a103e0 010c0018 02cc0360     *...........`...
   11434:	006603a0 018c01d8 02cd0027 00330014     ..f.....'.....3.
   11444:	0017028c 02f9026e 00660014 03e001d8     ....n.....f.....
   11454:	00000000                                ....

00011458 <_global_impure_ptr>:
   11458:	20000080                                ... 

0001145c <_init>:
   1145c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1145e:	bf00      	nop
   11460:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11462:	bc08      	pop	{r3}
   11464:	469e      	mov	lr, r3
   11466:	4770      	bx	lr

00011468 <__init_array_start>:
   11468:	0000b2d5 	.word	0x0000b2d5

0001146c <__frame_dummy_init_array_entry>:
   1146c:	00008025                                %...

00011470 <_fini>:
   11470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11472:	bf00      	nop
   11474:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11476:	bc08      	pop	{r3}
   11478:	469e      	mov	lr, r3
   1147a:	4770      	bx	lr

0001147c <__fini_array_start>:
   1147c:	00008001 	.word	0x00008001

Disassembly of section .relocate:

20000000 <bpm_ps_no_halt_exec>:
{
20000000:	b480      	push	{r7}
20000002:	b085      	sub	sp, #20
20000004:	af00      	add	r7, sp, #0
20000006:	6078      	str	r0, [r7, #4]
20000008:	6039      	str	r1, [r7, #0]
	bool b_psok = false;
2000000a:	2300      	movs	r3, #0
2000000c:	73fb      	strb	r3, [r7, #15]
	bool b_timeout = false;
2000000e:	2300      	movs	r3, #0
20000010:	73bb      	strb	r3, [r7, #14]
	BPM_UNLOCK(PMCON);
20000012:	4b15      	ldr	r3, [pc, #84]	; (20000068 <bpm_ps_no_halt_exec+0x68>)
20000014:	4a15      	ldr	r2, [pc, #84]	; (2000006c <bpm_ps_no_halt_exec+0x6c>)
20000016:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
20000018:	687b      	ldr	r3, [r7, #4]
2000001a:	683a      	ldr	r2, [r7, #0]
2000001c:	61da      	str	r2, [r3, #28]
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
2000001e:	4b12      	ldr	r3, [pc, #72]	; (20000068 <bpm_ps_no_halt_exec+0x68>)
20000020:	695b      	ldr	r3, [r3, #20]
20000022:	f003 0301 	and.w	r3, r3, #1
20000026:	2b00      	cmp	r3, #0
20000028:	bf14      	ite	ne
2000002a:	2301      	movne	r3, #1
2000002c:	2300      	moveq	r3, #0
2000002e:	73fb      	strb	r3, [r7, #15]
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
20000030:	4b0f      	ldr	r3, [pc, #60]	; (20000070 <bpm_ps_no_halt_exec+0x70>)
20000032:	681b      	ldr	r3, [r3, #0]
20000034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000038:	2b00      	cmp	r3, #0
2000003a:	bf14      	ite	ne
2000003c:	2301      	movne	r3, #1
2000003e:	2300      	moveq	r3, #0
20000040:	73bb      	strb	r3, [r7, #14]
	} while (!b_psok && !b_timeout);
20000042:	7bfb      	ldrb	r3, [r7, #15]
20000044:	f083 0301 	eor.w	r3, r3, #1
20000048:	b2db      	uxtb	r3, r3
2000004a:	2b00      	cmp	r3, #0
2000004c:	d005      	beq.n	2000005a <bpm_ps_no_halt_exec+0x5a>
2000004e:	7bbb      	ldrb	r3, [r7, #14]
20000050:	f083 0301 	eor.w	r3, r3, #1
20000054:	b2db      	uxtb	r3, r3
20000056:	2b00      	cmp	r3, #0
20000058:	d1e1      	bne.n	2000001e <bpm_ps_no_halt_exec+0x1e>
	return b_psok;
2000005a:	7bfb      	ldrb	r3, [r7, #15]
}
2000005c:	4618      	mov	r0, r3
2000005e:	3714      	adds	r7, #20
20000060:	46bd      	mov	sp, r7
20000062:	bc80      	pop	{r7}
20000064:	4770      	bx	lr
20000066:	bf00      	nop
20000068:	400f0000 	.word	0x400f0000
2000006c:	aa00001c 	.word	0xaa00001c
20000070:	e000e010 	.word	0xe000e010

20000074 <g_interrupt_enabled>:
20000074:	00000001                                ....

20000078 <flashcalw_wait_until_ready>:
20000078:	00009e9d 00000000                       ........

20000080 <impure_data>:
20000080:	00000000 2000036c 200003d4 2000043c     ....l.. ... <.. 
	...
20000128:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20000138:	0005deec 0000000b 00000000 00000000     ................
	...

200004a8 <__atexit_recursive_mutex>:
200004a8:	20003e38                                8>. 
